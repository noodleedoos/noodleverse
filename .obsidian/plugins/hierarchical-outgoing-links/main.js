/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HierarchicalOutgoingLinksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/view.ts
var import_obsidian = require("obsidian");
var VIEW_TYPE = "hierarchical-outgoing-links-view";
var HierarchicalOutgoingLinksView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getIcon() {
    return "links-going-out";
  }
  getDisplayText() {
    return "Hierarchical outgoing links";
  }
  async initialize() {
    const container = this.containerEl.children[1];
    container.empty();
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      const resolvedLinks = this.app.metadataCache.resolvedLinks[activeFile.path];
      const unresolvedLinks = this.app.metadataCache.unresolvedLinks[activeFile.path];
      const pane = container.createDiv({ cls: "outgoing-link-pane" });
      const resolvedHierarchy = this.create_hierarchy(resolvedLinks);
      const unresolvedHierarchy = this.create_hierarchy(unresolvedLinks);
      this.append_links(pane, "Links", resolvedHierarchy);
      this.append_links(pane, "Unresolved links", unresolvedHierarchy);
    }
  }
  append_links(pane, headerText, links) {
    const linksHeader = pane.createDiv({ cls: "tree-item-self is-clickable" });
    linksHeader.createEl("div", { text: headerText });
    pane.appendChild(linksHeader);
    const searchResultsContainer = pane.createDiv({ cls: "search-result-container" });
    links.forEach((l) => {
      this.append_child(searchResultsContainer, l);
    });
  }
  append_child(parent, item) {
    const treeItem = parent.createDiv({ cls: "tree-item" });
    const treeItemSelf = treeItem.createDiv({ cls: "tree-item-self is-clickable outgoing-link-item" });
    const treeItemIcon = treeItemSelf.createDiv({ cls: "tree-item-icon collapse-icon" });
    let name = item.name;
    if (item.children && item.children.length == 0) {
      const firstLink2 = this.app.metadataCache.getFirstLinkpathDest(item.name, "");
      if (firstLink2) {
        name = firstLink2.basename;
        treeItemIcon.appendChild((0, import_obsidian.getIcon)("lucide-link"));
      } else {
        treeItemIcon.appendChild((0, import_obsidian.getIcon)("lucide-file-plus"));
      }
    }
    const firstLink = this.app.metadataCache.getFirstLinkpathDest(item.name, "");
    const treeItemInner = treeItemSelf.createDiv({ cls: "tree-item-inner", text: name });
    if (item.children.length > 0) {
      treeItemIcon.appendChild((0, import_obsidian.getIcon)("right-triangle"));
    }
    let text = "";
    if (item.children.length == 0) {
      text = item.count.toString();
    }
    const treeItemFlairOuter = treeItemSelf.createDiv({ cls: "tree-item-flair-outer" }).createEl("span", { cls: "tree-item-flair", text });
    const treeItemChildren = treeItem.createDiv({ cls: "tree-item-children" });
    if (item.children.length > 0) {
      item.children.forEach((c) => {
        this.append_child(treeItemChildren, c);
      });
    }
    treeItemSelf.addEventListener("click", (e) => {
      if (item.children.length == 0) {
        this.navigateTo(item.name);
      } else {
        this.toggleBranch(item, treeItem, treeItemSelf, treeItemIcon);
      }
    });
  }
  navigateTo(name) {
    const firstLink = this.app.metadataCache.getFirstLinkpathDest(name, "");
    if (firstLink) {
      this.app.workspace.openLinkText(firstLink.name, firstLink.path);
    }
  }
  toggleBranch(item, treeItem, treeItemSelf, treeItemIcon) {
    treeItemSelf.toggleClass("is-collapsed", !treeItemSelf.hasClass("is-collapsed"));
    treeItemIcon.toggleClass("is-collapsed", !treeItemIcon.hasClass("is-collapsed"));
    if (treeItemSelf.hasClass("is-collapsed")) {
      treeItemSelf.nextSibling.remove();
    } else {
      const treeItemChildren = treeItem.createDiv({ cls: "tree-item-children" });
      if (item.children.length > 0) {
        item.children.forEach((c) => {
          this.append_child(treeItemChildren, c);
        });
      }
    }
  }
  create_hierarchy(paths) {
    let result = [];
    let level = { result };
    for (const path in paths) {
      path.split("/").reduce((r, name, i, a) => {
        if (!r[name]) {
          r[name] = { result: [] };
          r.result.push({ name, count: paths[path], children: r[name].result });
        }
        return r[name];
      }, level);
    }
    return result;
  }
  register_events() {
    this.plugin.registerEvent(this.app.metadataCache.on("changed", () => {
      this.initialize();
    }));
    this.plugin.registerEvent(this.app.workspace.on("layout-change", () => {
      this.initialize();
    }));
    this.plugin.registerEvent(this.app.workspace.on("active-leaf-change", () => {
      this.initialize();
    }));
  }
  async onOpen() {
    this.register_events();
    return this.initialize();
  }
};

// src/main.ts
var HierarchicalOutgoingLinksPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.registerView(
      VIEW_TYPE,
      (leaf) => new HierarchicalOutgoingLinksView(leaf, this)
    );
    this.addCommand({
      id: "show-hierarchical-outgoing-links",
      name: "Show hierarchical outgoing links",
      callback: () => {
        this.activateView();
      }
    });
    this.activateView();
  }
  onunload() {
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE, active: true }));
    }
    workspace.revealLeaf(leaf);
  }
};
