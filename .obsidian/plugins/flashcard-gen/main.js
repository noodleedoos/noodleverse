/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb2, mod) => function __require() {
  return mod || (0, cb2[__getOwnPropNames(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug6(...args) {
          if (!debug6.enabled) {
            return;
          }
          const self2 = debug6;
          const curr = Number(new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug6.namespace = namespace;
        debug6.useColors = createDebug.useColors();
        debug6.color = createDebug.selectColor(namespace);
        debug6.extend = extend;
        debug6.destroy = createDebug.destroy;
        Object.defineProperty(debug6, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug6);
        }
        return debug6;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module2) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/safe-await/lib/index.js
var require_lib = __commonJS({
  "node_modules/safe-await/lib/index.js"(exports, module2) {
    var nativeExceptions = [
      EvalError,
      RangeError,
      ReferenceError,
      SyntaxError,
      TypeError,
      URIError
    ].filter((except) => typeof except === "function");
    function throwNative(error) {
      for (const Exception of nativeExceptions) {
        if (error instanceof Exception)
          throw error;
      }
    }
    module2.exports = function safeAwait2(promise, finallyFunc) {
      return promise.then((data) => {
        if (data instanceof Error) {
          throwNative(data);
          return [data];
        }
        return [void 0, data];
      }).catch((error) => {
        throwNative(error);
        return [error];
      }).finally(() => {
        if (finallyFunc && typeof finallyFunc === "function") {
          finallyFunc();
        }
      });
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QuizGenPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/utils.ts
var import_debug = __toESM(require_browser());
var logger = (0, import_debug.default)("textgenerator:setModel");
async function createFolder(folder, app) {
  logger("createFolder", folder);
  const folderExists = await app.vault.adapter.exists(folder);
  if (!folderExists) {
    await this.app.vault.createFolder(folder);
  }
  logger("createFolder end");
}
async function createFileWithInput(filePath, fileContent, app) {
  logger("createFileWithInput", filePath, fileContent);
  const dirMatch = filePath.match(/(.*)[\/\\]/);
  let dirName = "";
  if (dirMatch)
    dirName = dirMatch[1];
  if (await app.vault.adapter.exists(dirName)) {
    return await app.vault.create(filePath, fileContent);
  } else {
    await createFolder(dirName, app);
    return await this.vault.create(filePath, fileContent);
  }
}
async function openFile(app, file, optional) {
  logger("openFile", file, optional);
  let leaf;
  if ((optional == null ? void 0 : optional.openInNewTab) && (optional == null ? void 0 : optional.direction)) {
    leaf = app.workspace.splitActiveLeaf(optional.direction);
  } else {
    leaf = app.workspace.getUnpinnedLeaf();
  }
  await leaf.openFile(file);
  if ((optional == null ? void 0 : optional.mode) || (optional == null ? void 0 : optional.focus)) {
    await leaf.setViewState({
      ...leaf.getViewState(),
      state: optional.mode && optional.mode !== "default" ? { ...leaf.view.getState(), mode: optional.mode } : leaf.view.getState(),
      popstate: true
    }, { focus: optional == null ? void 0 : optional.focus });
  }
  logger("openFile end");
}

// src/quiz_generator.ts
var import_obsidian = require("obsidian");
var import_debug3 = __toESM(require_browser());

// src/req_formatter.ts
var import_debug2 = __toESM(require_browser());
var logger2 = (0, import_debug2.default)("quizgenerator:ReqFormatter");
var ReqFormatter = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  addContext(parameters, prompt) {
    const params = {
      ...parameters,
      prompt
    };
    return params;
  }
  prepareReqParameters(params, insertMetadata, templatePath = "", additionnalParams = {}, role = "assistant") {
    logger2("prepareReqParameters", params, insertMetadata, templatePath);
    let bodyParams = {
      model: params.engine,
      max_tokens: 3e3,
      temperature: params.temperature,
      frequency_penalty: params.frequency_penalty
    };
    const reqUrl = "https://api.openai.com/v1/chat/completions";
    const reqExtractResult = "requestResults?.choices[0].message.content";
    bodyParams["messages"] = [
      { role: "system", content: params.system_prompt },
      { role, content: params.prompt }
    ];
    bodyParams = { ...bodyParams, ...additionnalParams == null ? void 0 : additionnalParams.bodyParams };
    let reqParams = {
      url: reqUrl,
      method: "POST",
      body: "",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${params.api_key}`
      },
      extractResult: reqExtractResult
    };
    reqParams = { ...reqParams, ...additionnalParams == null ? void 0 : additionnalParams.reqParams };
    reqParams.body = JSON.stringify(bodyParams);
    logger2("prepareReqParameters", { bodyParams, reqParams });
    return reqParams;
  }
};

// node_modules/underscore/modules/index.js
var modules_exports = {};
__export(modules_exports, {
  VERSION: () => VERSION,
  after: () => after,
  all: () => every,
  allKeys: () => allKeys,
  any: () => some,
  assign: () => extendOwn_default,
  before: () => before,
  bind: () => bind_default,
  bindAll: () => bindAll_default,
  chain: () => chain,
  chunk: () => chunk,
  clone: () => clone,
  collect: () => map,
  compact: () => compact,
  compose: () => compose,
  constant: () => constant,
  contains: () => contains,
  countBy: () => countBy_default,
  create: () => create,
  debounce: () => debounce,
  default: () => underscore_array_methods_default,
  defaults: () => defaults_default,
  defer: () => defer_default,
  delay: () => delay_default,
  detect: () => find,
  difference: () => difference_default,
  drop: () => rest,
  each: () => each,
  escape: () => escape_default,
  every: () => every,
  extend: () => extend_default,
  extendOwn: () => extendOwn_default,
  filter: () => filter,
  find: () => find,
  findIndex: () => findIndex_default,
  findKey: () => findKey,
  findLastIndex: () => findLastIndex_default,
  findWhere: () => findWhere,
  first: () => first,
  flatten: () => flatten2,
  foldl: () => reduce_default,
  foldr: () => reduceRight_default,
  forEach: () => each,
  functions: () => functions,
  get: () => get,
  groupBy: () => groupBy_default,
  has: () => has2,
  head: () => first,
  identity: () => identity,
  include: () => contains,
  includes: () => contains,
  indexBy: () => indexBy_default,
  indexOf: () => indexOf_default,
  initial: () => initial,
  inject: () => reduce_default,
  intersection: () => intersection,
  invert: () => invert,
  invoke: () => invoke_default,
  isArguments: () => isArguments_default,
  isArray: () => isArray_default,
  isArrayBuffer: () => isArrayBuffer_default,
  isBoolean: () => isBoolean,
  isDataView: () => isDataView_default,
  isDate: () => isDate_default,
  isElement: () => isElement,
  isEmpty: () => isEmpty,
  isEqual: () => isEqual,
  isError: () => isError_default,
  isFinite: () => isFinite2,
  isFunction: () => isFunction_default,
  isMap: () => isMap_default,
  isMatch: () => isMatch,
  isNaN: () => isNaN2,
  isNull: () => isNull,
  isNumber: () => isNumber_default,
  isObject: () => isObject,
  isRegExp: () => isRegExp_default,
  isSet: () => isSet_default,
  isString: () => isString_default,
  isSymbol: () => isSymbol_default,
  isTypedArray: () => isTypedArray_default,
  isUndefined: () => isUndefined,
  isWeakMap: () => isWeakMap_default,
  isWeakSet: () => isWeakSet_default,
  iteratee: () => iteratee,
  keys: () => keys,
  last: () => last,
  lastIndexOf: () => lastIndexOf_default,
  map: () => map,
  mapObject: () => mapObject,
  matcher: () => matcher,
  matches: () => matcher,
  max: () => max,
  memoize: () => memoize,
  methods: () => functions,
  min: () => min,
  mixin: () => mixin,
  negate: () => negate,
  noop: () => noop,
  now: () => now_default,
  object: () => object,
  omit: () => omit_default,
  once: () => once_default,
  pairs: () => pairs,
  partial: () => partial_default,
  partition: () => partition_default,
  pick: () => pick_default,
  pluck: () => pluck,
  property: () => property,
  propertyOf: () => propertyOf,
  random: () => random,
  range: () => range,
  reduce: () => reduce_default,
  reduceRight: () => reduceRight_default,
  reject: () => reject,
  rest: () => rest,
  restArguments: () => restArguments,
  result: () => result,
  sample: () => sample,
  select: () => filter,
  shuffle: () => shuffle,
  size: () => size,
  some: () => some,
  sortBy: () => sortBy,
  sortedIndex: () => sortedIndex,
  tail: () => rest,
  take: () => first,
  tap: () => tap,
  template: () => template,
  templateSettings: () => templateSettings_default,
  throttle: () => throttle,
  times: () => times,
  toArray: () => toArray,
  toPath: () => toPath,
  transpose: () => unzip,
  unescape: () => unescape_default,
  union: () => union_default,
  uniq: () => uniq,
  unique: () => uniq,
  uniqueId: () => uniqueId,
  unzip: () => unzip,
  values: () => values,
  where: () => where,
  without: () => without_default,
  wrap: () => wrap,
  zip: () => zip_default
});

// node_modules/underscore/modules/_setup.js
var VERSION = "1.13.6";
var root = typeof self == "object" && self.self === self && self || typeof global == "object" && global.global === global && global || Function("return this")() || {};
var ArrayProto = Array.prototype;
var ObjProto = Object.prototype;
var SymbolProto = typeof Symbol !== "undefined" ? Symbol.prototype : null;
var push = ArrayProto.push;
var slice = ArrayProto.slice;
var toString = ObjProto.toString;
var hasOwnProperty = ObjProto.hasOwnProperty;
var supportsArrayBuffer = typeof ArrayBuffer !== "undefined";
var supportsDataView = typeof DataView !== "undefined";
var nativeIsArray = Array.isArray;
var nativeKeys = Object.keys;
var nativeCreate = Object.create;
var nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;
var _isNaN = isNaN;
var _isFinite = isFinite;
var hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
var nonEnumerableProps = [
  "valueOf",
  "isPrototypeOf",
  "toString",
  "propertyIsEnumerable",
  "hasOwnProperty",
  "toLocaleString"
];
var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;

// node_modules/underscore/modules/restArguments.js
function restArguments(func, startIndex) {
  startIndex = startIndex == null ? func.length - 1 : +startIndex;
  return function() {
    var length = Math.max(arguments.length - startIndex, 0), rest2 = Array(length), index = 0;
    for (; index < length; index++) {
      rest2[index] = arguments[index + startIndex];
    }
    switch (startIndex) {
      case 0:
        return func.call(this, rest2);
      case 1:
        return func.call(this, arguments[0], rest2);
      case 2:
        return func.call(this, arguments[0], arguments[1], rest2);
    }
    var args = Array(startIndex + 1);
    for (index = 0; index < startIndex; index++) {
      args[index] = arguments[index];
    }
    args[startIndex] = rest2;
    return func.apply(this, args);
  };
}

// node_modules/underscore/modules/isObject.js
function isObject(obj) {
  var type = typeof obj;
  return type === "function" || type === "object" && !!obj;
}

// node_modules/underscore/modules/isNull.js
function isNull(obj) {
  return obj === null;
}

// node_modules/underscore/modules/isUndefined.js
function isUndefined(obj) {
  return obj === void 0;
}

// node_modules/underscore/modules/isBoolean.js
function isBoolean(obj) {
  return obj === true || obj === false || toString.call(obj) === "[object Boolean]";
}

// node_modules/underscore/modules/isElement.js
function isElement(obj) {
  return !!(obj && obj.nodeType === 1);
}

// node_modules/underscore/modules/_tagTester.js
function tagTester(name) {
  var tag = "[object " + name + "]";
  return function(obj) {
    return toString.call(obj) === tag;
  };
}

// node_modules/underscore/modules/isString.js
var isString_default = tagTester("String");

// node_modules/underscore/modules/isNumber.js
var isNumber_default = tagTester("Number");

// node_modules/underscore/modules/isDate.js
var isDate_default = tagTester("Date");

// node_modules/underscore/modules/isRegExp.js
var isRegExp_default = tagTester("RegExp");

// node_modules/underscore/modules/isError.js
var isError_default = tagTester("Error");

// node_modules/underscore/modules/isSymbol.js
var isSymbol_default = tagTester("Symbol");

// node_modules/underscore/modules/isArrayBuffer.js
var isArrayBuffer_default = tagTester("ArrayBuffer");

// node_modules/underscore/modules/isFunction.js
var isFunction = tagTester("Function");
var nodelist = root.document && root.document.childNodes;
if (typeof /./ != "function" && typeof Int8Array != "object" && typeof nodelist != "function") {
  isFunction = function(obj) {
    return typeof obj == "function" || false;
  };
}
var isFunction_default = isFunction;

// node_modules/underscore/modules/_hasObjectTag.js
var hasObjectTag_default = tagTester("Object");

// node_modules/underscore/modules/_stringTagBug.js
var hasStringTagBug = supportsDataView && hasObjectTag_default(new DataView(new ArrayBuffer(8)));
var isIE11 = typeof Map !== "undefined" && hasObjectTag_default(/* @__PURE__ */ new Map());

// node_modules/underscore/modules/isDataView.js
var isDataView = tagTester("DataView");
function ie10IsDataView(obj) {
  return obj != null && isFunction_default(obj.getInt8) && isArrayBuffer_default(obj.buffer);
}
var isDataView_default = hasStringTagBug ? ie10IsDataView : isDataView;

// node_modules/underscore/modules/isArray.js
var isArray_default = nativeIsArray || tagTester("Array");

// node_modules/underscore/modules/_has.js
function has(obj, key) {
  return obj != null && hasOwnProperty.call(obj, key);
}

// node_modules/underscore/modules/isArguments.js
var isArguments = tagTester("Arguments");
(function() {
  if (!isArguments(arguments)) {
    isArguments = function(obj) {
      return has(obj, "callee");
    };
  }
})();
var isArguments_default = isArguments;

// node_modules/underscore/modules/isFinite.js
function isFinite2(obj) {
  return !isSymbol_default(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
}

// node_modules/underscore/modules/isNaN.js
function isNaN2(obj) {
  return isNumber_default(obj) && _isNaN(obj);
}

// node_modules/underscore/modules/constant.js
function constant(value) {
  return function() {
    return value;
  };
}

// node_modules/underscore/modules/_createSizePropertyCheck.js
function createSizePropertyCheck(getSizeProperty) {
  return function(collection) {
    var sizeProperty = getSizeProperty(collection);
    return typeof sizeProperty == "number" && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
  };
}

// node_modules/underscore/modules/_shallowProperty.js
function shallowProperty(key) {
  return function(obj) {
    return obj == null ? void 0 : obj[key];
  };
}

// node_modules/underscore/modules/_getByteLength.js
var getByteLength_default = shallowProperty("byteLength");

// node_modules/underscore/modules/_isBufferLike.js
var isBufferLike_default = createSizePropertyCheck(getByteLength_default);

// node_modules/underscore/modules/isTypedArray.js
var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
function isTypedArray(obj) {
  return nativeIsView ? nativeIsView(obj) && !isDataView_default(obj) : isBufferLike_default(obj) && typedArrayPattern.test(toString.call(obj));
}
var isTypedArray_default = supportsArrayBuffer ? isTypedArray : constant(false);

// node_modules/underscore/modules/_getLength.js
var getLength_default = shallowProperty("length");

// node_modules/underscore/modules/_collectNonEnumProps.js
function emulatedSet(keys2) {
  var hash = {};
  for (var l = keys2.length, i = 0; i < l; ++i)
    hash[keys2[i]] = true;
  return {
    contains: function(key) {
      return hash[key] === true;
    },
    push: function(key) {
      hash[key] = true;
      return keys2.push(key);
    }
  };
}
function collectNonEnumProps(obj, keys2) {
  keys2 = emulatedSet(keys2);
  var nonEnumIdx = nonEnumerableProps.length;
  var constructor = obj.constructor;
  var proto = isFunction_default(constructor) && constructor.prototype || ObjProto;
  var prop = "constructor";
  if (has(obj, prop) && !keys2.contains(prop))
    keys2.push(prop);
  while (nonEnumIdx--) {
    prop = nonEnumerableProps[nonEnumIdx];
    if (prop in obj && obj[prop] !== proto[prop] && !keys2.contains(prop)) {
      keys2.push(prop);
    }
  }
}

// node_modules/underscore/modules/keys.js
function keys(obj) {
  if (!isObject(obj))
    return [];
  if (nativeKeys)
    return nativeKeys(obj);
  var keys2 = [];
  for (var key in obj)
    if (has(obj, key))
      keys2.push(key);
  if (hasEnumBug)
    collectNonEnumProps(obj, keys2);
  return keys2;
}

// node_modules/underscore/modules/isEmpty.js
function isEmpty(obj) {
  if (obj == null)
    return true;
  var length = getLength_default(obj);
  if (typeof length == "number" && (isArray_default(obj) || isString_default(obj) || isArguments_default(obj)))
    return length === 0;
  return getLength_default(keys(obj)) === 0;
}

// node_modules/underscore/modules/isMatch.js
function isMatch(object2, attrs) {
  var _keys = keys(attrs), length = _keys.length;
  if (object2 == null)
    return !length;
  var obj = Object(object2);
  for (var i = 0; i < length; i++) {
    var key = _keys[i];
    if (attrs[key] !== obj[key] || !(key in obj))
      return false;
  }
  return true;
}

// node_modules/underscore/modules/underscore.js
function _(obj) {
  if (obj instanceof _)
    return obj;
  if (!(this instanceof _))
    return new _(obj);
  this._wrapped = obj;
}
_.VERSION = VERSION;
_.prototype.value = function() {
  return this._wrapped;
};
_.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
_.prototype.toString = function() {
  return String(this._wrapped);
};

// node_modules/underscore/modules/_toBufferView.js
function toBufferView(bufferSource) {
  return new Uint8Array(
    bufferSource.buffer || bufferSource,
    bufferSource.byteOffset || 0,
    getByteLength_default(bufferSource)
  );
}

// node_modules/underscore/modules/isEqual.js
var tagDataView = "[object DataView]";
function eq(a, b, aStack, bStack) {
  if (a === b)
    return a !== 0 || 1 / a === 1 / b;
  if (a == null || b == null)
    return false;
  if (a !== a)
    return b !== b;
  var type = typeof a;
  if (type !== "function" && type !== "object" && typeof b != "object")
    return false;
  return deepEq(a, b, aStack, bStack);
}
function deepEq(a, b, aStack, bStack) {
  if (a instanceof _)
    a = a._wrapped;
  if (b instanceof _)
    b = b._wrapped;
  var className = toString.call(a);
  if (className !== toString.call(b))
    return false;
  if (hasStringTagBug && className == "[object Object]" && isDataView_default(a)) {
    if (!isDataView_default(b))
      return false;
    className = tagDataView;
  }
  switch (className) {
    case "[object RegExp]":
    case "[object String]":
      return "" + a === "" + b;
    case "[object Number]":
      if (+a !== +a)
        return +b !== +b;
      return +a === 0 ? 1 / +a === 1 / b : +a === +b;
    case "[object Date]":
    case "[object Boolean]":
      return +a === +b;
    case "[object Symbol]":
      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    case "[object ArrayBuffer]":
    case tagDataView:
      return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
  }
  var areArrays = className === "[object Array]";
  if (!areArrays && isTypedArray_default(a)) {
    var byteLength = getByteLength_default(a);
    if (byteLength !== getByteLength_default(b))
      return false;
    if (a.buffer === b.buffer && a.byteOffset === b.byteOffset)
      return true;
    areArrays = true;
  }
  if (!areArrays) {
    if (typeof a != "object" || typeof b != "object")
      return false;
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(isFunction_default(aCtor) && aCtor instanceof aCtor && isFunction_default(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
      return false;
    }
  }
  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;
  while (length--) {
    if (aStack[length] === a)
      return bStack[length] === b;
  }
  aStack.push(a);
  bStack.push(b);
  if (areArrays) {
    length = a.length;
    if (length !== b.length)
      return false;
    while (length--) {
      if (!eq(a[length], b[length], aStack, bStack))
        return false;
    }
  } else {
    var _keys = keys(a), key;
    length = _keys.length;
    if (keys(b).length !== length)
      return false;
    while (length--) {
      key = _keys[length];
      if (!(has(b, key) && eq(a[key], b[key], aStack, bStack)))
        return false;
    }
  }
  aStack.pop();
  bStack.pop();
  return true;
}
function isEqual(a, b) {
  return eq(a, b);
}

// node_modules/underscore/modules/allKeys.js
function allKeys(obj) {
  if (!isObject(obj))
    return [];
  var keys2 = [];
  for (var key in obj)
    keys2.push(key);
  if (hasEnumBug)
    collectNonEnumProps(obj, keys2);
  return keys2;
}

// node_modules/underscore/modules/_methodFingerprint.js
function ie11fingerprint(methods) {
  var length = getLength_default(methods);
  return function(obj) {
    if (obj == null)
      return false;
    var keys2 = allKeys(obj);
    if (getLength_default(keys2))
      return false;
    for (var i = 0; i < length; i++) {
      if (!isFunction_default(obj[methods[i]]))
        return false;
    }
    return methods !== weakMapMethods || !isFunction_default(obj[forEachName]);
  };
}
var forEachName = "forEach";
var hasName = "has";
var commonInit = ["clear", "delete"];
var mapTail = ["get", hasName, "set"];
var mapMethods = commonInit.concat(forEachName, mapTail);
var weakMapMethods = commonInit.concat(mapTail);
var setMethods = ["add"].concat(commonInit, forEachName, hasName);

// node_modules/underscore/modules/isMap.js
var isMap_default = isIE11 ? ie11fingerprint(mapMethods) : tagTester("Map");

// node_modules/underscore/modules/isWeakMap.js
var isWeakMap_default = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester("WeakMap");

// node_modules/underscore/modules/isSet.js
var isSet_default = isIE11 ? ie11fingerprint(setMethods) : tagTester("Set");

// node_modules/underscore/modules/isWeakSet.js
var isWeakSet_default = tagTester("WeakSet");

// node_modules/underscore/modules/values.js
function values(obj) {
  var _keys = keys(obj);
  var length = _keys.length;
  var values2 = Array(length);
  for (var i = 0; i < length; i++) {
    values2[i] = obj[_keys[i]];
  }
  return values2;
}

// node_modules/underscore/modules/pairs.js
function pairs(obj) {
  var _keys = keys(obj);
  var length = _keys.length;
  var pairs2 = Array(length);
  for (var i = 0; i < length; i++) {
    pairs2[i] = [_keys[i], obj[_keys[i]]];
  }
  return pairs2;
}

// node_modules/underscore/modules/invert.js
function invert(obj) {
  var result2 = {};
  var _keys = keys(obj);
  for (var i = 0, length = _keys.length; i < length; i++) {
    result2[obj[_keys[i]]] = _keys[i];
  }
  return result2;
}

// node_modules/underscore/modules/functions.js
function functions(obj) {
  var names = [];
  for (var key in obj) {
    if (isFunction_default(obj[key]))
      names.push(key);
  }
  return names.sort();
}

// node_modules/underscore/modules/_createAssigner.js
function createAssigner(keysFunc, defaults) {
  return function(obj) {
    var length = arguments.length;
    if (defaults)
      obj = Object(obj);
    if (length < 2 || obj == null)
      return obj;
    for (var index = 1; index < length; index++) {
      var source = arguments[index], keys2 = keysFunc(source), l = keys2.length;
      for (var i = 0; i < l; i++) {
        var key = keys2[i];
        if (!defaults || obj[key] === void 0)
          obj[key] = source[key];
      }
    }
    return obj;
  };
}

// node_modules/underscore/modules/extend.js
var extend_default = createAssigner(allKeys);

// node_modules/underscore/modules/extendOwn.js
var extendOwn_default = createAssigner(keys);

// node_modules/underscore/modules/defaults.js
var defaults_default = createAssigner(allKeys, true);

// node_modules/underscore/modules/_baseCreate.js
function ctor() {
  return function() {
  };
}
function baseCreate(prototype) {
  if (!isObject(prototype))
    return {};
  if (nativeCreate)
    return nativeCreate(prototype);
  var Ctor = ctor();
  Ctor.prototype = prototype;
  var result2 = new Ctor();
  Ctor.prototype = null;
  return result2;
}

// node_modules/underscore/modules/create.js
function create(prototype, props) {
  var result2 = baseCreate(prototype);
  if (props)
    extendOwn_default(result2, props);
  return result2;
}

// node_modules/underscore/modules/clone.js
function clone(obj) {
  if (!isObject(obj))
    return obj;
  return isArray_default(obj) ? obj.slice() : extend_default({}, obj);
}

// node_modules/underscore/modules/tap.js
function tap(obj, interceptor) {
  interceptor(obj);
  return obj;
}

// node_modules/underscore/modules/toPath.js
function toPath(path) {
  return isArray_default(path) ? path : [path];
}
_.toPath = toPath;

// node_modules/underscore/modules/_toPath.js
function toPath2(path) {
  return _.toPath(path);
}

// node_modules/underscore/modules/_deepGet.js
function deepGet(obj, path) {
  var length = path.length;
  for (var i = 0; i < length; i++) {
    if (obj == null)
      return void 0;
    obj = obj[path[i]];
  }
  return length ? obj : void 0;
}

// node_modules/underscore/modules/get.js
function get(object2, path, defaultValue) {
  var value = deepGet(object2, toPath2(path));
  return isUndefined(value) ? defaultValue : value;
}

// node_modules/underscore/modules/has.js
function has2(obj, path) {
  path = toPath2(path);
  var length = path.length;
  for (var i = 0; i < length; i++) {
    var key = path[i];
    if (!has(obj, key))
      return false;
    obj = obj[key];
  }
  return !!length;
}

// node_modules/underscore/modules/identity.js
function identity(value) {
  return value;
}

// node_modules/underscore/modules/matcher.js
function matcher(attrs) {
  attrs = extendOwn_default({}, attrs);
  return function(obj) {
    return isMatch(obj, attrs);
  };
}

// node_modules/underscore/modules/property.js
function property(path) {
  path = toPath2(path);
  return function(obj) {
    return deepGet(obj, path);
  };
}

// node_modules/underscore/modules/_optimizeCb.js
function optimizeCb(func, context, argCount) {
  if (context === void 0)
    return func;
  switch (argCount == null ? 3 : argCount) {
    case 1:
      return function(value) {
        return func.call(context, value);
      };
    case 3:
      return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
    case 4:
      return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
  }
  return function() {
    return func.apply(context, arguments);
  };
}

// node_modules/underscore/modules/_baseIteratee.js
function baseIteratee(value, context, argCount) {
  if (value == null)
    return identity;
  if (isFunction_default(value))
    return optimizeCb(value, context, argCount);
  if (isObject(value) && !isArray_default(value))
    return matcher(value);
  return property(value);
}

// node_modules/underscore/modules/iteratee.js
function iteratee(value, context) {
  return baseIteratee(value, context, Infinity);
}
_.iteratee = iteratee;

// node_modules/underscore/modules/_cb.js
function cb(value, context, argCount) {
  if (_.iteratee !== iteratee)
    return _.iteratee(value, context);
  return baseIteratee(value, context, argCount);
}

// node_modules/underscore/modules/mapObject.js
function mapObject(obj, iteratee2, context) {
  iteratee2 = cb(iteratee2, context);
  var _keys = keys(obj), length = _keys.length, results = {};
  for (var index = 0; index < length; index++) {
    var currentKey = _keys[index];
    results[currentKey] = iteratee2(obj[currentKey], currentKey, obj);
  }
  return results;
}

// node_modules/underscore/modules/noop.js
function noop() {
}

// node_modules/underscore/modules/propertyOf.js
function propertyOf(obj) {
  if (obj == null)
    return noop;
  return function(path) {
    return get(obj, path);
  };
}

// node_modules/underscore/modules/times.js
function times(n, iteratee2, context) {
  var accum = Array(Math.max(0, n));
  iteratee2 = optimizeCb(iteratee2, context, 1);
  for (var i = 0; i < n; i++)
    accum[i] = iteratee2(i);
  return accum;
}

// node_modules/underscore/modules/random.js
function random(min2, max2) {
  if (max2 == null) {
    max2 = min2;
    min2 = 0;
  }
  return min2 + Math.floor(Math.random() * (max2 - min2 + 1));
}

// node_modules/underscore/modules/now.js
var now_default = Date.now || function() {
  return new Date().getTime();
};

// node_modules/underscore/modules/_createEscaper.js
function createEscaper(map2) {
  var escaper = function(match) {
    return map2[match];
  };
  var source = "(?:" + keys(map2).join("|") + ")";
  var testRegexp = RegExp(source);
  var replaceRegexp = RegExp(source, "g");
  return function(string) {
    string = string == null ? "" : "" + string;
    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
  };
}

// node_modules/underscore/modules/_escapeMap.js
var escapeMap_default = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};

// node_modules/underscore/modules/escape.js
var escape_default = createEscaper(escapeMap_default);

// node_modules/underscore/modules/_unescapeMap.js
var unescapeMap_default = invert(escapeMap_default);

// node_modules/underscore/modules/unescape.js
var unescape_default = createEscaper(unescapeMap_default);

// node_modules/underscore/modules/templateSettings.js
var templateSettings_default = _.templateSettings = {
  evaluate: /<%([\s\S]+?)%>/g,
  interpolate: /<%=([\s\S]+?)%>/g,
  escape: /<%-([\s\S]+?)%>/g
};

// node_modules/underscore/modules/template.js
var noMatch = /(.)^/;
var escapes = {
  "'": "'",
  "\\": "\\",
  "\r": "r",
  "\n": "n",
  "\u2028": "u2028",
  "\u2029": "u2029"
};
var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
function escapeChar(match) {
  return "\\" + escapes[match];
}
var bareIdentifier = /^\s*(\w|\$)+\s*$/;
function template(text, settings, oldSettings) {
  if (!settings && oldSettings)
    settings = oldSettings;
  settings = defaults_default({}, settings, _.templateSettings);
  var matcher2 = RegExp([
    (settings.escape || noMatch).source,
    (settings.interpolate || noMatch).source,
    (settings.evaluate || noMatch).source
  ].join("|") + "|$", "g");
  var index = 0;
  var source = "__p+='";
  text.replace(matcher2, function(match, escape, interpolate, evaluate, offset) {
    source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
    index = offset + match.length;
    if (escape) {
      source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
    } else if (interpolate) {
      source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
    } else if (evaluate) {
      source += "';\n" + evaluate + "\n__p+='";
    }
    return match;
  });
  source += "';\n";
  var argument = settings.variable;
  if (argument) {
    if (!bareIdentifier.test(argument))
      throw new Error(
        "variable is not a bare identifier: " + argument
      );
  } else {
    source = "with(obj||{}){\n" + source + "}\n";
    argument = "obj";
  }
  source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
  var render;
  try {
    render = new Function(argument, "_", source);
  } catch (e) {
    e.source = source;
    throw e;
  }
  var template2 = function(data) {
    return render.call(this, data, _);
  };
  template2.source = "function(" + argument + "){\n" + source + "}";
  return template2;
}

// node_modules/underscore/modules/result.js
function result(obj, path, fallback) {
  path = toPath2(path);
  var length = path.length;
  if (!length) {
    return isFunction_default(fallback) ? fallback.call(obj) : fallback;
  }
  for (var i = 0; i < length; i++) {
    var prop = obj == null ? void 0 : obj[path[i]];
    if (prop === void 0) {
      prop = fallback;
      i = length;
    }
    obj = isFunction_default(prop) ? prop.call(obj) : prop;
  }
  return obj;
}

// node_modules/underscore/modules/uniqueId.js
var idCounter = 0;
function uniqueId(prefix) {
  var id = ++idCounter + "";
  return prefix ? prefix + id : id;
}

// node_modules/underscore/modules/chain.js
function chain(obj) {
  var instance = _(obj);
  instance._chain = true;
  return instance;
}

// node_modules/underscore/modules/_executeBound.js
function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
  if (!(callingContext instanceof boundFunc))
    return sourceFunc.apply(context, args);
  var self2 = baseCreate(sourceFunc.prototype);
  var result2 = sourceFunc.apply(self2, args);
  if (isObject(result2))
    return result2;
  return self2;
}

// node_modules/underscore/modules/partial.js
var partial = restArguments(function(func, boundArgs) {
  var placeholder = partial.placeholder;
  var bound = function() {
    var position = 0, length = boundArgs.length;
    var args = Array(length);
    for (var i = 0; i < length; i++) {
      args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
    }
    while (position < arguments.length)
      args.push(arguments[position++]);
    return executeBound(func, bound, this, this, args);
  };
  return bound;
});
partial.placeholder = _;
var partial_default = partial;

// node_modules/underscore/modules/bind.js
var bind_default = restArguments(function(func, context, args) {
  if (!isFunction_default(func))
    throw new TypeError("Bind must be called on a function");
  var bound = restArguments(function(callArgs) {
    return executeBound(func, bound, context, this, args.concat(callArgs));
  });
  return bound;
});

// node_modules/underscore/modules/_isArrayLike.js
var isArrayLike_default = createSizePropertyCheck(getLength_default);

// node_modules/underscore/modules/_flatten.js
function flatten(input, depth, strict, output) {
  output = output || [];
  if (!depth && depth !== 0) {
    depth = Infinity;
  } else if (depth <= 0) {
    return output.concat(input);
  }
  var idx = output.length;
  for (var i = 0, length = getLength_default(input); i < length; i++) {
    var value = input[i];
    if (isArrayLike_default(value) && (isArray_default(value) || isArguments_default(value))) {
      if (depth > 1) {
        flatten(value, depth - 1, strict, output);
        idx = output.length;
      } else {
        var j = 0, len = value.length;
        while (j < len)
          output[idx++] = value[j++];
      }
    } else if (!strict) {
      output[idx++] = value;
    }
  }
  return output;
}

// node_modules/underscore/modules/bindAll.js
var bindAll_default = restArguments(function(obj, keys2) {
  keys2 = flatten(keys2, false, false);
  var index = keys2.length;
  if (index < 1)
    throw new Error("bindAll must be passed function names");
  while (index--) {
    var key = keys2[index];
    obj[key] = bind_default(obj[key], obj);
  }
  return obj;
});

// node_modules/underscore/modules/memoize.js
function memoize(func, hasher) {
  var memoize2 = function(key) {
    var cache = memoize2.cache;
    var address = "" + (hasher ? hasher.apply(this, arguments) : key);
    if (!has(cache, address))
      cache[address] = func.apply(this, arguments);
    return cache[address];
  };
  memoize2.cache = {};
  return memoize2;
}

// node_modules/underscore/modules/delay.js
var delay_default = restArguments(function(func, wait, args) {
  return setTimeout(function() {
    return func.apply(null, args);
  }, wait);
});

// node_modules/underscore/modules/defer.js
var defer_default = partial_default(delay_default, _, 1);

// node_modules/underscore/modules/throttle.js
function throttle(func, wait, options) {
  var timeout, context, args, result2;
  var previous = 0;
  if (!options)
    options = {};
  var later = function() {
    previous = options.leading === false ? 0 : now_default();
    timeout = null;
    result2 = func.apply(context, args);
    if (!timeout)
      context = args = null;
  };
  var throttled = function() {
    var _now = now_default();
    if (!previous && options.leading === false)
      previous = _now;
    var remaining = wait - (_now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      previous = _now;
      result2 = func.apply(context, args);
      if (!timeout)
        context = args = null;
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }
    return result2;
  };
  throttled.cancel = function() {
    clearTimeout(timeout);
    previous = 0;
    timeout = context = args = null;
  };
  return throttled;
}

// node_modules/underscore/modules/debounce.js
function debounce(func, wait, immediate) {
  var timeout, previous, args, result2, context;
  var later = function() {
    var passed = now_default() - previous;
    if (wait > passed) {
      timeout = setTimeout(later, wait - passed);
    } else {
      timeout = null;
      if (!immediate)
        result2 = func.apply(context, args);
      if (!timeout)
        args = context = null;
    }
  };
  var debounced = restArguments(function(_args) {
    context = this;
    args = _args;
    previous = now_default();
    if (!timeout) {
      timeout = setTimeout(later, wait);
      if (immediate)
        result2 = func.apply(context, args);
    }
    return result2;
  });
  debounced.cancel = function() {
    clearTimeout(timeout);
    timeout = args = context = null;
  };
  return debounced;
}

// node_modules/underscore/modules/wrap.js
function wrap(func, wrapper) {
  return partial_default(wrapper, func);
}

// node_modules/underscore/modules/negate.js
function negate(predicate) {
  return function() {
    return !predicate.apply(this, arguments);
  };
}

// node_modules/underscore/modules/compose.js
function compose() {
  var args = arguments;
  var start = args.length - 1;
  return function() {
    var i = start;
    var result2 = args[start].apply(this, arguments);
    while (i--)
      result2 = args[i].call(this, result2);
    return result2;
  };
}

// node_modules/underscore/modules/after.js
function after(times2, func) {
  return function() {
    if (--times2 < 1) {
      return func.apply(this, arguments);
    }
  };
}

// node_modules/underscore/modules/before.js
function before(times2, func) {
  var memo;
  return function() {
    if (--times2 > 0) {
      memo = func.apply(this, arguments);
    }
    if (times2 <= 1)
      func = null;
    return memo;
  };
}

// node_modules/underscore/modules/once.js
var once_default = partial_default(before, 2);

// node_modules/underscore/modules/findKey.js
function findKey(obj, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = keys(obj), key;
  for (var i = 0, length = _keys.length; i < length; i++) {
    key = _keys[i];
    if (predicate(obj[key], key, obj))
      return key;
  }
}

// node_modules/underscore/modules/_createPredicateIndexFinder.js
function createPredicateIndexFinder(dir) {
  return function(array, predicate, context) {
    predicate = cb(predicate, context);
    var length = getLength_default(array);
    var index = dir > 0 ? 0 : length - 1;
    for (; index >= 0 && index < length; index += dir) {
      if (predicate(array[index], index, array))
        return index;
    }
    return -1;
  };
}

// node_modules/underscore/modules/findIndex.js
var findIndex_default = createPredicateIndexFinder(1);

// node_modules/underscore/modules/findLastIndex.js
var findLastIndex_default = createPredicateIndexFinder(-1);

// node_modules/underscore/modules/sortedIndex.js
function sortedIndex(array, obj, iteratee2, context) {
  iteratee2 = cb(iteratee2, context, 1);
  var value = iteratee2(obj);
  var low = 0, high = getLength_default(array);
  while (low < high) {
    var mid = Math.floor((low + high) / 2);
    if (iteratee2(array[mid]) < value)
      low = mid + 1;
    else
      high = mid;
  }
  return low;
}

// node_modules/underscore/modules/_createIndexFinder.js
function createIndexFinder(dir, predicateFind, sortedIndex2) {
  return function(array, item, idx) {
    var i = 0, length = getLength_default(array);
    if (typeof idx == "number") {
      if (dir > 0) {
        i = idx >= 0 ? idx : Math.max(idx + length, i);
      } else {
        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
      }
    } else if (sortedIndex2 && idx && length) {
      idx = sortedIndex2(array, item);
      return array[idx] === item ? idx : -1;
    }
    if (item !== item) {
      idx = predicateFind(slice.call(array, i, length), isNaN2);
      return idx >= 0 ? idx + i : -1;
    }
    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
      if (array[idx] === item)
        return idx;
    }
    return -1;
  };
}

// node_modules/underscore/modules/indexOf.js
var indexOf_default = createIndexFinder(1, findIndex_default, sortedIndex);

// node_modules/underscore/modules/lastIndexOf.js
var lastIndexOf_default = createIndexFinder(-1, findLastIndex_default);

// node_modules/underscore/modules/find.js
function find(obj, predicate, context) {
  var keyFinder = isArrayLike_default(obj) ? findIndex_default : findKey;
  var key = keyFinder(obj, predicate, context);
  if (key !== void 0 && key !== -1)
    return obj[key];
}

// node_modules/underscore/modules/findWhere.js
function findWhere(obj, attrs) {
  return find(obj, matcher(attrs));
}

// node_modules/underscore/modules/each.js
function each(obj, iteratee2, context) {
  iteratee2 = optimizeCb(iteratee2, context);
  var i, length;
  if (isArrayLike_default(obj)) {
    for (i = 0, length = obj.length; i < length; i++) {
      iteratee2(obj[i], i, obj);
    }
  } else {
    var _keys = keys(obj);
    for (i = 0, length = _keys.length; i < length; i++) {
      iteratee2(obj[_keys[i]], _keys[i], obj);
    }
  }
  return obj;
}

// node_modules/underscore/modules/map.js
function map(obj, iteratee2, context) {
  iteratee2 = cb(iteratee2, context);
  var _keys = !isArrayLike_default(obj) && keys(obj), length = (_keys || obj).length, results = Array(length);
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    results[index] = iteratee2(obj[currentKey], currentKey, obj);
  }
  return results;
}

// node_modules/underscore/modules/_createReduce.js
function createReduce(dir) {
  var reducer = function(obj, iteratee2, memo, initial2) {
    var _keys = !isArrayLike_default(obj) && keys(obj), length = (_keys || obj).length, index = dir > 0 ? 0 : length - 1;
    if (!initial2) {
      memo = obj[_keys ? _keys[index] : index];
      index += dir;
    }
    for (; index >= 0 && index < length; index += dir) {
      var currentKey = _keys ? _keys[index] : index;
      memo = iteratee2(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };
  return function(obj, iteratee2, memo, context) {
    var initial2 = arguments.length >= 3;
    return reducer(obj, optimizeCb(iteratee2, context, 4), memo, initial2);
  };
}

// node_modules/underscore/modules/reduce.js
var reduce_default = createReduce(1);

// node_modules/underscore/modules/reduceRight.js
var reduceRight_default = createReduce(-1);

// node_modules/underscore/modules/filter.js
function filter(obj, predicate, context) {
  var results = [];
  predicate = cb(predicate, context);
  each(obj, function(value, index, list) {
    if (predicate(value, index, list))
      results.push(value);
  });
  return results;
}

// node_modules/underscore/modules/reject.js
function reject(obj, predicate, context) {
  return filter(obj, negate(cb(predicate)), context);
}

// node_modules/underscore/modules/every.js
function every(obj, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = !isArrayLike_default(obj) && keys(obj), length = (_keys || obj).length;
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    if (!predicate(obj[currentKey], currentKey, obj))
      return false;
  }
  return true;
}

// node_modules/underscore/modules/some.js
function some(obj, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = !isArrayLike_default(obj) && keys(obj), length = (_keys || obj).length;
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    if (predicate(obj[currentKey], currentKey, obj))
      return true;
  }
  return false;
}

// node_modules/underscore/modules/contains.js
function contains(obj, item, fromIndex, guard) {
  if (!isArrayLike_default(obj))
    obj = values(obj);
  if (typeof fromIndex != "number" || guard)
    fromIndex = 0;
  return indexOf_default(obj, item, fromIndex) >= 0;
}

// node_modules/underscore/modules/invoke.js
var invoke_default = restArguments(function(obj, path, args) {
  var contextPath, func;
  if (isFunction_default(path)) {
    func = path;
  } else {
    path = toPath2(path);
    contextPath = path.slice(0, -1);
    path = path[path.length - 1];
  }
  return map(obj, function(context) {
    var method = func;
    if (!method) {
      if (contextPath && contextPath.length) {
        context = deepGet(context, contextPath);
      }
      if (context == null)
        return void 0;
      method = context[path];
    }
    return method == null ? method : method.apply(context, args);
  });
});

// node_modules/underscore/modules/pluck.js
function pluck(obj, key) {
  return map(obj, property(key));
}

// node_modules/underscore/modules/where.js
function where(obj, attrs) {
  return filter(obj, matcher(attrs));
}

// node_modules/underscore/modules/max.js
function max(obj, iteratee2, context) {
  var result2 = -Infinity, lastComputed = -Infinity, value, computed;
  if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj[0] != "object" && obj != null) {
    obj = isArrayLike_default(obj) ? obj : values(obj);
    for (var i = 0, length = obj.length; i < length; i++) {
      value = obj[i];
      if (value != null && value > result2) {
        result2 = value;
      }
    }
  } else {
    iteratee2 = cb(iteratee2, context);
    each(obj, function(v, index, list) {
      computed = iteratee2(v, index, list);
      if (computed > lastComputed || computed === -Infinity && result2 === -Infinity) {
        result2 = v;
        lastComputed = computed;
      }
    });
  }
  return result2;
}

// node_modules/underscore/modules/min.js
function min(obj, iteratee2, context) {
  var result2 = Infinity, lastComputed = Infinity, value, computed;
  if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj[0] != "object" && obj != null) {
    obj = isArrayLike_default(obj) ? obj : values(obj);
    for (var i = 0, length = obj.length; i < length; i++) {
      value = obj[i];
      if (value != null && value < result2) {
        result2 = value;
      }
    }
  } else {
    iteratee2 = cb(iteratee2, context);
    each(obj, function(v, index, list) {
      computed = iteratee2(v, index, list);
      if (computed < lastComputed || computed === Infinity && result2 === Infinity) {
        result2 = v;
        lastComputed = computed;
      }
    });
  }
  return result2;
}

// node_modules/underscore/modules/toArray.js
var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
function toArray(obj) {
  if (!obj)
    return [];
  if (isArray_default(obj))
    return slice.call(obj);
  if (isString_default(obj)) {
    return obj.match(reStrSymbol);
  }
  if (isArrayLike_default(obj))
    return map(obj, identity);
  return values(obj);
}

// node_modules/underscore/modules/sample.js
function sample(obj, n, guard) {
  if (n == null || guard) {
    if (!isArrayLike_default(obj))
      obj = values(obj);
    return obj[random(obj.length - 1)];
  }
  var sample2 = toArray(obj);
  var length = getLength_default(sample2);
  n = Math.max(Math.min(n, length), 0);
  var last2 = length - 1;
  for (var index = 0; index < n; index++) {
    var rand = random(index, last2);
    var temp = sample2[index];
    sample2[index] = sample2[rand];
    sample2[rand] = temp;
  }
  return sample2.slice(0, n);
}

// node_modules/underscore/modules/shuffle.js
function shuffle(obj) {
  return sample(obj, Infinity);
}

// node_modules/underscore/modules/sortBy.js
function sortBy(obj, iteratee2, context) {
  var index = 0;
  iteratee2 = cb(iteratee2, context);
  return pluck(map(obj, function(value, key, list) {
    return {
      value,
      index: index++,
      criteria: iteratee2(value, key, list)
    };
  }).sort(function(left, right) {
    var a = left.criteria;
    var b = right.criteria;
    if (a !== b) {
      if (a > b || a === void 0)
        return 1;
      if (a < b || b === void 0)
        return -1;
    }
    return left.index - right.index;
  }), "value");
}

// node_modules/underscore/modules/_group.js
function group(behavior, partition) {
  return function(obj, iteratee2, context) {
    var result2 = partition ? [[], []] : {};
    iteratee2 = cb(iteratee2, context);
    each(obj, function(value, index) {
      var key = iteratee2(value, index, obj);
      behavior(result2, value, key);
    });
    return result2;
  };
}

// node_modules/underscore/modules/groupBy.js
var groupBy_default = group(function(result2, value, key) {
  if (has(result2, key))
    result2[key].push(value);
  else
    result2[key] = [value];
});

// node_modules/underscore/modules/indexBy.js
var indexBy_default = group(function(result2, value, key) {
  result2[key] = value;
});

// node_modules/underscore/modules/countBy.js
var countBy_default = group(function(result2, value, key) {
  if (has(result2, key))
    result2[key]++;
  else
    result2[key] = 1;
});

// node_modules/underscore/modules/partition.js
var partition_default = group(function(result2, value, pass) {
  result2[pass ? 0 : 1].push(value);
}, true);

// node_modules/underscore/modules/size.js
function size(obj) {
  if (obj == null)
    return 0;
  return isArrayLike_default(obj) ? obj.length : keys(obj).length;
}

// node_modules/underscore/modules/_keyInObj.js
function keyInObj(value, key, obj) {
  return key in obj;
}

// node_modules/underscore/modules/pick.js
var pick_default = restArguments(function(obj, keys2) {
  var result2 = {}, iteratee2 = keys2[0];
  if (obj == null)
    return result2;
  if (isFunction_default(iteratee2)) {
    if (keys2.length > 1)
      iteratee2 = optimizeCb(iteratee2, keys2[1]);
    keys2 = allKeys(obj);
  } else {
    iteratee2 = keyInObj;
    keys2 = flatten(keys2, false, false);
    obj = Object(obj);
  }
  for (var i = 0, length = keys2.length; i < length; i++) {
    var key = keys2[i];
    var value = obj[key];
    if (iteratee2(value, key, obj))
      result2[key] = value;
  }
  return result2;
});

// node_modules/underscore/modules/omit.js
var omit_default = restArguments(function(obj, keys2) {
  var iteratee2 = keys2[0], context;
  if (isFunction_default(iteratee2)) {
    iteratee2 = negate(iteratee2);
    if (keys2.length > 1)
      context = keys2[1];
  } else {
    keys2 = map(flatten(keys2, false, false), String);
    iteratee2 = function(value, key) {
      return !contains(keys2, key);
    };
  }
  return pick_default(obj, iteratee2, context);
});

// node_modules/underscore/modules/initial.js
function initial(array, n, guard) {
  return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
}

// node_modules/underscore/modules/first.js
function first(array, n, guard) {
  if (array == null || array.length < 1)
    return n == null || guard ? void 0 : [];
  if (n == null || guard)
    return array[0];
  return initial(array, array.length - n);
}

// node_modules/underscore/modules/rest.js
function rest(array, n, guard) {
  return slice.call(array, n == null || guard ? 1 : n);
}

// node_modules/underscore/modules/last.js
function last(array, n, guard) {
  if (array == null || array.length < 1)
    return n == null || guard ? void 0 : [];
  if (n == null || guard)
    return array[array.length - 1];
  return rest(array, Math.max(0, array.length - n));
}

// node_modules/underscore/modules/compact.js
function compact(array) {
  return filter(array, Boolean);
}

// node_modules/underscore/modules/flatten.js
function flatten2(array, depth) {
  return flatten(array, depth, false);
}

// node_modules/underscore/modules/difference.js
var difference_default = restArguments(function(array, rest2) {
  rest2 = flatten(rest2, true, true);
  return filter(array, function(value) {
    return !contains(rest2, value);
  });
});

// node_modules/underscore/modules/without.js
var without_default = restArguments(function(array, otherArrays) {
  return difference_default(array, otherArrays);
});

// node_modules/underscore/modules/uniq.js
function uniq(array, isSorted, iteratee2, context) {
  if (!isBoolean(isSorted)) {
    context = iteratee2;
    iteratee2 = isSorted;
    isSorted = false;
  }
  if (iteratee2 != null)
    iteratee2 = cb(iteratee2, context);
  var result2 = [];
  var seen = [];
  for (var i = 0, length = getLength_default(array); i < length; i++) {
    var value = array[i], computed = iteratee2 ? iteratee2(value, i, array) : value;
    if (isSorted && !iteratee2) {
      if (!i || seen !== computed)
        result2.push(value);
      seen = computed;
    } else if (iteratee2) {
      if (!contains(seen, computed)) {
        seen.push(computed);
        result2.push(value);
      }
    } else if (!contains(result2, value)) {
      result2.push(value);
    }
  }
  return result2;
}

// node_modules/underscore/modules/union.js
var union_default = restArguments(function(arrays) {
  return uniq(flatten(arrays, true, true));
});

// node_modules/underscore/modules/intersection.js
function intersection(array) {
  var result2 = [];
  var argsLength = arguments.length;
  for (var i = 0, length = getLength_default(array); i < length; i++) {
    var item = array[i];
    if (contains(result2, item))
      continue;
    var j;
    for (j = 1; j < argsLength; j++) {
      if (!contains(arguments[j], item))
        break;
    }
    if (j === argsLength)
      result2.push(item);
  }
  return result2;
}

// node_modules/underscore/modules/unzip.js
function unzip(array) {
  var length = array && max(array, getLength_default).length || 0;
  var result2 = Array(length);
  for (var index = 0; index < length; index++) {
    result2[index] = pluck(array, index);
  }
  return result2;
}

// node_modules/underscore/modules/zip.js
var zip_default = restArguments(unzip);

// node_modules/underscore/modules/object.js
function object(list, values2) {
  var result2 = {};
  for (var i = 0, length = getLength_default(list); i < length; i++) {
    if (values2) {
      result2[list[i]] = values2[i];
    } else {
      result2[list[i][0]] = list[i][1];
    }
  }
  return result2;
}

// node_modules/underscore/modules/range.js
function range(start, stop, step) {
  if (stop == null) {
    stop = start || 0;
    start = 0;
  }
  if (!step) {
    step = stop < start ? -1 : 1;
  }
  var length = Math.max(Math.ceil((stop - start) / step), 0);
  var range2 = Array(length);
  for (var idx = 0; idx < length; idx++, start += step) {
    range2[idx] = start;
  }
  return range2;
}

// node_modules/underscore/modules/chunk.js
function chunk(array, count) {
  if (count == null || count < 1)
    return [];
  var result2 = [];
  var i = 0, length = array.length;
  while (i < length) {
    result2.push(slice.call(array, i, i += count));
  }
  return result2;
}

// node_modules/underscore/modules/_chainResult.js
function chainResult(instance, obj) {
  return instance._chain ? _(obj).chain() : obj;
}

// node_modules/underscore/modules/mixin.js
function mixin(obj) {
  each(functions(obj), function(name) {
    var func = _[name] = obj[name];
    _.prototype[name] = function() {
      var args = [this._wrapped];
      push.apply(args, arguments);
      return chainResult(this, func.apply(_, args));
    };
  });
  return _;
}

// node_modules/underscore/modules/underscore-array-methods.js
each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
  var method = ArrayProto[name];
  _.prototype[name] = function() {
    var obj = this._wrapped;
    if (obj != null) {
      method.apply(obj, arguments);
      if ((name === "shift" || name === "splice") && obj.length === 0) {
        delete obj[0];
      }
    }
    return chainResult(this, obj);
  };
});
each(["concat", "join", "slice"], function(name) {
  var method = ArrayProto[name];
  _.prototype[name] = function() {
    var obj = this._wrapped;
    if (obj != null)
      obj = method.apply(obj, arguments);
    return chainResult(this, obj);
  };
});
var underscore_array_methods_default = _;

// node_modules/underscore/modules/index-default.js
var _2 = mixin(modules_exports);
_2._ = _2;

// src/quiz_generator.ts
var logger3 = (0, import_debug3.default)("quizgenerator: QuizGenerator");
var QuizGenerator = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
    this.n_gen_question = 0;
  }
  async generate(title) {
    logger3(`Generating a Quiz on ${title}`);
    let counter = 0;
    if (!this.plugin.processing) {
      this.plugin.processing = true;
      const currentFile = this.app.workspace.getActiveFile();
      if (!currentFile)
        return [""];
      const content = await this.app.vault.read(currentFile);
      const chunks = this.preprocessText(content, 2e3);
      let responses = [];
      await Promise.all(
        chunks.map(async (chunk2) => {
          let trans_chunk = chunk2.replace(/"/gm, "*");
          trans_chunk = chunk2.replace(/'/gm, "_");
          this.plugin.settings.prompt = this.getPrompt(trans_chunk);
          const reqformatter = new ReqFormatter(
            this.app,
            this.plugin
          );
          const params = reqformatter.prepareReqParameters(
            this.plugin.settings,
            false
          );
          const response = await this.getQuizFromAPI(params);
          responses = [...responses, ...response];
          counter += 1;
          console.log(`Generated flashcard on ${counter} / ${chunks.length}`);
        })
      );
      return responses;
    } else {
      new import_obsidian.Notice("There is already another generation process");
      logger3("generate error", "There is another generation process");
      return Promise.reject(
        new Error("There is another generation process")
      );
    }
  }
  async prune_question(text) {
    console.log(`Currently Pruning to 10 questions ...`);
    if (this.n_gen_question > 10) {
      return sample(text, 10);
    }
    return text;
  }
  preprocessText(text, chunkSize) {
    const chunks = [];
    const paragraphs = text.split("\n");
    if (paragraphs[paragraphs.length - 1].length == 0) {
      paragraphs.pop();
    }
    let currentChunk = "";
    for (const paragraph of paragraphs) {
      if (currentChunk.length + paragraph.length > chunkSize) {
        chunks.push(currentChunk.trim());
        currentChunk = "";
      }
      currentChunk += paragraph + " ";
    }
    if (currentChunk !== "") {
      chunks.push(currentChunk.trim());
    }
    return chunks;
  }
  combineResponses(responses) {
    return responses.join("\n");
  }
  /* getPrompt(content: string) {
  	return "[INPUT]" + content;
  } */
  getPrompt(content) {
    return `Give sets
		of question/answer for anki cards based uniquely on this input in the following json format:
		" [OUTPUT]{"Questions" : [{ "key_info" : "The obitore are a community from the south west of asia that are selling erasers",
		   
"question" : "What are the obitore ? ",
		   
"answer" : "A community from the south west of asia know for selling erasers.",
		   
"quote" : "The obitore are a community from the south west of asia that are selling erasers[...] (line 4)"}, ... ]} }".
		   The key_info property must be a quote from the given text.
		   If you ask a question that depends on a specific context/conditions, precise it in the question.
		  In a json, the attribute name MUST be '"' and not '''. All the questions must have their response in the input text,
		   don't add additional information but try having elaborate answers (you are allowed to rephrase). 
		   Forget every exterior knowledge. Note that the text is written in a markdown format and can contain mathematical formulas, hence the OUTPUT.answers 
		   have to be compatible with markdown. If there are not enough information in the token return an empty json. 
		   Text : ${content}`;
  }
  async getQuizFromAPI(params, n_try = 0) {
    let response = await (0, import_obsidian.request)(params);
    const response_json = JSON.parse(response);
    response = response_json.choices[0].message.content;
    response = response.replace(/(?<!\\)\\(?=[a-zA-Z])/gm, "\\\\");
    let assistantResponse = [""];
    try {
      assistantResponse = await this.outputFormatting(response);
      return assistantResponse;
    } catch (error) {
      n_try += 1;
      if (n_try > 1) {
        this.plugin.processing = false;
        new import_obsidian.Notice(
          "We are having trouble creating the quiz, some part of the text might not have flashcards please try again by selecting a specific part of the text."
        );
        assistantResponse = [""];
      } else {
        console.log(
          `N TRY : ${n_try} ! The json was not correct ... Reformulating ... ${error}`
        );
        const new_prompt = `This is not a correct json ! Return a corrected version format (to help you the error is ${error}) : ${response}`;
        params.prompt = new_prompt;
        assistantResponse = await this.getQuizFromAPI(params, n_try);
      }
      return assistantResponse;
    }
  }
  async outputFormatting(input) {
    const result2 = [];
    let transformedString = input.replace("[OUTPUT]", "");
    transformedString = transformedString.replace(/,(?=[}\]])/gm, "");
    if (transformedString == "{}") {
      return [""];
    }
    const jsonResult = JSON.parse(transformedString);
    for (const entry of jsonResult.Questions) {
      if (entry.answer != "" && entry.answer != "null") {
        const new_set = `${JSON.stringify(entry.question).replace(
          /\\\\/gm,
          "\\"
        )}
?
${JSON.stringify(entry.answer).replace(
          /\\\\/gm,
          "\\"
        )} *(Exact Quote : "${entry.key_info != "" && !entry.key_info.includes("pyramids") ? `${entry.key_info}*` : "NA"})"

`;
        result2.push(new_set.replace(/"/gm, ""));
      }
    }
    return result2;
  }
  delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
};

// src/set_path.ts
var import_obsidian2 = require("obsidian");
var import_debug4 = __toESM(require_browser());
var logger4 = (0, import_debug4.default)("textgenerator:SetPath");
var SetPath = class extends import_obsidian2.Modal {
  constructor(app, result2, onSubmit) {
    super(app);
    this.result = result2;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    logger4("onOpen");
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "New Document Path" });
    setTimeout(() => {
      contentEl.addEventListener("keyup", async (event) => {
        event.preventDefault();
        if (event.key === "Enter") {
          try {
            await this.onSubmit(this.result);
            this.close();
          } catch (error) {
            new import_obsidian2.Notice(
              "\u{1F534}Error: File already exists. Choose another path."
            );
            console.error(error);
          }
        }
      });
    }, 100);
    new import_obsidian2.Setting(contentEl).setName("Path").addText(
      (text) => text.setPlaceholder("Path").setValue(this.result.toString()).onChange((value) => {
        this.result = value;
      }).inputEl.setAttribute("size", "50")
    );
    new import_obsidian2.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Submit").setCta().onClick(async () => {
        try {
          await this.onSubmit(this.result);
          this.close();
        } catch (error) {
          new import_obsidian2.Notice(
            "\u{1F534}Error: File already exists. Choose another path."
          );
          console.error(error);
        }
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var import_safe_await = __toESM(require_lib());
var import_debug5 = __toESM(require_browser());
var logger5 = (0, import_debug5.default)("textgenerator:main");
var SYSTEM_PROMPT = "You are a Anki Flashcard generator.";
var DEFAULT_SETTINGS = {
  api_key: "",
  engine: "gpt-3.5-turbo",
  //gpt-3.5-turbo
  max_tokens: 1e3,
  temperature: 0.7,
  frequency_penalty: 0.5,
  prompt: "",
  system_prompt: SYSTEM_PROMPT,
  n_questions: 7,
  prune: false,
  showStatusBar: true,
  outputToBlockQuote: false,
  promptsPath: "textgenerator/prompts",
  displayErrorInEditor: false
};
var QuizGenPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.processing = false;
  }
  //TODO : Give the file where the cursor is (Not necessary) -> clear
  getActiveView() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (activeView !== null) {
      return activeView;
    } else {
      new import_obsidian3.Notice("The file type should be Markdown!");
      return null;
    }
  }
  async generateQuiz() {
    this.settings.system_prompt = SYSTEM_PROMPT;
    const activeFile = this.app.workspace.getActiveFile();
    console.log("Creating the questions ...");
    const quizgen = new QuizGenerator(this.app, this);
    let title;
    if (activeFile !== null) {
      title = `${activeFile.basename} Quiz`;
    } else {
      logger5("You have to select a file.");
      title = "NewQuiz";
    }
    let responses = await quizgen.generate(title);
    if (this.settings.prune) {
      responses = await quizgen.prune_question(responses);
    }
    const response = responses.join("\n");
    const content = "# Generated Quiz\n\n#flashcards\n" + response;
    const suggestedPath = `${title}.md`;
    new SetPath(this.app, suggestedPath, async (path) => {
      const [errorFile, file] = await (0, import_safe_await.default)(
        createFileWithInput(path, content, this.app)
      );
      if (errorFile) {
        logger5("createTemplate error", errorFile);
        return Promise.reject(errorFile);
      }
      openFile(this.app, file);
    }).open();
    this.processing = false;
  }
  async onload() {
    this.defaultSettings = DEFAULT_SETTINGS;
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon(
      "checkbox-glyph",
      "Quiz Generator",
      async (evt) => {
        statusBarItemEl.setText("Generating Quiz ...");
        this.generateQuiz();
        statusBarItemEl.setText("No Quiz Generation");
        this.processing = false;
      }
    );
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("No Quiz Generation");
    this.addCommand({
      id: "genquiz-modal",
      name: "Generate quiz",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
        if (markdownView) {
          if (!checking) {
            statusBarItemEl.setText("Generating Quiz ...");
            this.generateQuiz();
          }
          statusBarItemEl.setText("No Quiz Generation");
          return true;
        }
      }
    });
    this.addSettingTab(new QuizGenSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var QuizGenSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", {
      text: "Settings of the Awesome Quiz Generator Plugin."
    });
    new import_obsidian3.Setting(containerEl).setName("Api Key").setDesc("It's a secret \u{1F440}").addText(
      (text) => text.setPlaceholder("Enter your Open AI API key").setValue(this.plugin.settings.api_key).onChange(async (value) => {
        this.plugin.settings.api_key = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Model").addDropdown((choice) => choice.addOption("gpt-3.5-turbo", "gpt-3.5-turbo").addOption("gpt-4", "gpt-4").setValue("gpt-3.5-turbo").onChange(async (value) => {
      this.plugin.settings.engine = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Prune questions").setDesc("Limit to 10 the number of generated flashcards").addToggle(
      (res) => res.setValue(this.plugin.settings.prune).onChange(async (value) => {
        this.plugin.settings.prune = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvY29tbW9uLmpzIiwgIm5vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsICJub2RlX21vZHVsZXMvc2FmZS1hd2FpdC9saWIvaW5kZXguanMiLCAic3JjL21haW4udHMiLCAic3JjL3V0aWxzLnRzIiwgInNyYy9xdWl6X2dlbmVyYXRvci50cyIsICJzcmMvcmVxX2Zvcm1hdHRlci50cyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX3NldHVwLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcmVzdEFyZ3VtZW50cy5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzT2JqZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNOdWxsLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNVbmRlZmluZWQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0Jvb2xlYW4uanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0VsZW1lbnQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fdGFnVGVzdGVyLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNTdHJpbmcuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc051bWJlci5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzRGF0ZS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzUmVnRXhwLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNFcnJvci5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzU3ltYm9sLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNBcnJheUJ1ZmZlci5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzRnVuY3Rpb24uanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9faGFzT2JqZWN0VGFnLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX3N0cmluZ1RhZ0J1Zy5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzRGF0YVZpZXcuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0FycmF5LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2hhcy5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzQXJndW1lbnRzLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNGaW5pdGUuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc05hTi5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2NvbnN0YW50LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2NyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX3NoYWxsb3dQcm9wZXJ0eS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19nZXRCeXRlTGVuZ3RoLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2lzQnVmZmVyTGlrZS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzVHlwZWRBcnJheS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19nZXRMZW5ndGguanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fY29sbGVjdE5vbkVudW1Qcm9wcy5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2tleXMuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0VtcHR5LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNNYXRjaC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3VuZGVyc2NvcmUuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fdG9CdWZmZXJWaWV3LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNFcXVhbC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2FsbEtleXMuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fbWV0aG9kRmluZ2VycHJpbnQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc01hcC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzV2Vha01hcC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzU2V0LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNXZWFrU2V0LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdmFsdWVzLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcGFpcnMuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pbnZlcnQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9mdW5jdGlvbnMuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fY3JlYXRlQXNzaWduZXIuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9leHRlbmQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9leHRlbmRPd24uanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9kZWZhdWx0cy5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19iYXNlQ3JlYXRlLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY3JlYXRlLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY2xvbmUuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy90YXAuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy90b1BhdGguanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fdG9QYXRoLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2RlZXBHZXQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9nZXQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9oYXMuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pZGVudGl0eS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL21hdGNoZXIuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wcm9wZXJ0eS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19vcHRpbWl6ZUNiLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2Jhc2VJdGVyYXRlZS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2l0ZXJhdGVlLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2NiLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbWFwT2JqZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbm9vcC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3Byb3BlcnR5T2YuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy90aW1lcy5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3JhbmRvbS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL25vdy5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19jcmVhdGVFc2NhcGVyLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2VzY2FwZU1hcC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2VzY2FwZS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL191bmVzY2FwZU1hcC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3VuZXNjYXBlLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdGVtcGxhdGVTZXR0aW5ncy5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3RlbXBsYXRlLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcmVzdWx0LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdW5pcXVlSWQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9jaGFpbi5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19leGVjdXRlQm91bmQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wYXJ0aWFsLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvYmluZC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19pc0FycmF5TGlrZS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19mbGF0dGVuLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvYmluZEFsbC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL21lbW9pemUuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9kZWxheS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2RlZmVyLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdGhyb3R0bGUuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9kZWJvdW5jZS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3dyYXAuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9uZWdhdGUuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9jb21wb3NlLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvYWZ0ZXIuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9iZWZvcmUuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9vbmNlLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZmluZEtleS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19jcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlci5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ZpbmRJbmRleC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ZpbmRMYXN0SW5kZXguanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zb3J0ZWRJbmRleC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19jcmVhdGVJbmRleEZpbmRlci5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2luZGV4T2YuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9sYXN0SW5kZXhPZi5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ZpbmQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9maW5kV2hlcmUuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9lYWNoLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbWFwLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2NyZWF0ZVJlZHVjZS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3JlZHVjZS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3JlZHVjZVJpZ2h0LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZmlsdGVyLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcmVqZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZXZlcnkuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zb21lLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY29udGFpbnMuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pbnZva2UuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wbHVjay5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3doZXJlLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbWF4LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbWluLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdG9BcnJheS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3NhbXBsZS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3NodWZmbGUuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zb3J0QnkuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fZ3JvdXAuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9ncm91cEJ5LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaW5kZXhCeS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2NvdW50QnkuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wYXJ0aXRpb24uanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zaXplLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2tleUluT2JqLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcGljay5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL29taXQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pbml0aWFsLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZmlyc3QuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9yZXN0LmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbGFzdC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2NvbXBhY3QuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9mbGF0dGVuLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZGlmZmVyZW5jZS5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3dpdGhvdXQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy91bmlxLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdW5pb24uanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pbnRlcnNlY3Rpb24uanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy91bnppcC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3ppcC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL29iamVjdC5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3JhbmdlLmpzIiwgIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY2h1bmsuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fY2hhaW5SZXN1bHQuanMiLCAibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9taXhpbi5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3VuZGVyc2NvcmUtYXJyYXktbWV0aG9kcy5qcyIsICJub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2luZGV4LWRlZmF1bHQuanMiLCAic3JjL3NldF9wYXRoLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsICJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cdGNyZWF0ZURlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cdFx0bGV0IGVuYWJsZU92ZXJyaWRlID0gbnVsbDtcblx0XHRsZXQgbmFtZXNwYWNlc0NhY2hlO1xuXHRcdGxldCBlbmFibGVkQ2FjaGU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuICclJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBjcmVhdGVEZWJ1Zy5kZXN0cm95OyAvLyBYWFggVGVtcG9yYXJ5LiBXaWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZWJ1ZywgJ2VuYWJsZWQnLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdGdldDogKCkgPT4ge1xuXHRcdFx0XHRpZiAoZW5hYmxlT3ZlcnJpZGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZW5hYmxlT3ZlcnJpZGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG5hbWVzcGFjZXNDYWNoZSAhPT0gY3JlYXRlRGVidWcubmFtZXNwYWNlcykge1xuXHRcdFx0XHRcdG5hbWVzcGFjZXNDYWNoZSA9IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXM7XG5cdFx0XHRcdFx0ZW5hYmxlZENhY2hlID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVuYWJsZWRDYWNoZTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IHYgPT4ge1xuXHRcdFx0XHRlbmFibGVPdmVycmlkZSA9IHY7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBFbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cdFx0Y3JlYXRlRGVidWcubmFtZXNwYWNlcyA9IG5hbWVzcGFjZXM7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zbGljZSgxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0KiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cblx0KlxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0Y29uc3QgbmFtZXNwYWNlcyA9IFtcblx0XHRcdC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAodG9OYW1lc3BhY2UpLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0aWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgaTtcblx0XHRsZXQgbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29udmVydCByZWdleHAgdG8gbmFtZXNwYWNlXG5cdCpcblx0KiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG5cdFx0cmV0dXJuIHJlZ2V4cC50b1N0cmluZygpXG5cdFx0XHQuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG5cdFx0XHQucmVwbGFjZSgvXFwuXFwqXFw/JC8sICcqJyk7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8qKlxuXHQqIFhYWCBETyBOT1QgVVNFLiBUaGlzIGlzIGEgdGVtcG9yYXJ5IHN0dWIgZnVuY3Rpb24uXG5cdCogWFhYIEl0IFdJTEwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHQqL1xuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwgIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuZXhwb3J0cy5kZXN0cm95ID0gKCgpID0+IHtcblx0bGV0IHdhcm5lZCA9IGZhbHNlO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCF3YXJuZWQpIHtcblx0XHRcdHdhcm5lZCA9IHRydWU7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0XHR9XG5cdH07XG59KSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUuZGVidWcoKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKiBJZiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGF2YWlsYWJsZSwgZmFsbHMgYmFja1xuICogdG8gYGNvbnNvbGUubG9nYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzLmxvZyA9IGNvbnNvbGUuZGVidWcgfHwgY29uc29sZS5sb2cgfHwgKCgpID0+IHt9KTtcblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCAiLyogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vRGF2aWRXZWxscy81NGY5ZGQxYWY0YTQ4OWU1ZjEzNThmMzNjZTU5ZThhZCAqL1xuXG4vKiBOYXRpdmUgRXJyb3IgdHlwZXMgaHR0cHM6Ly9temwubGEvMlZlaDNUUiAqL1xuY29uc3QgbmF0aXZlRXhjZXB0aW9ucyA9IFtcbiAgRXZhbEVycm9yLCBSYW5nZUVycm9yLCBSZWZlcmVuY2VFcnJvciwgU3ludGF4RXJyb3IsIFR5cGVFcnJvciwgVVJJRXJyb3Jcbl0uZmlsdGVyKChleGNlcHQpID0+IHR5cGVvZiBleGNlcHQgPT09ICdmdW5jdGlvbicpXG5cbi8qIFRocm93IG5hdGl2ZSBlcnJvcnMuIHJlZjogaHR0cHM6Ly9iaXQubHkvMlZzb0NHRSAqL1xuZnVuY3Rpb24gdGhyb3dOYXRpdmUoZXJyb3IpIHtcbiAgZm9yIChjb25zdCBFeGNlcHRpb24gb2YgbmF0aXZlRXhjZXB0aW9ucykge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEV4Y2VwdGlvbikgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vKiBIZWxwZXIgYnVkZHkgZm9yIHJlbW92aW5nIGFzeW5jL2F3YWl0IHRyeS9jYXRjaCBsaXR0ZXIgKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2FmZUF3YWl0KHByb21pc2UsIGZpbmFsbHlGdW5jKSB7XG4gIHJldHVybiBwcm9taXNlLnRoZW4oZGF0YSA9PiB7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhyb3dOYXRpdmUoZGF0YSlcbiAgICAgIHJldHVybiBbIGRhdGEgXVxuICAgIH1cbiAgICByZXR1cm4gWyB1bmRlZmluZWQsIGRhdGEgXVxuICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgdGhyb3dOYXRpdmUoZXJyb3IpXG4gICAgcmV0dXJuIFsgZXJyb3IgXVxuICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICBpZiAoZmluYWxseUZ1bmMgJiYgdHlwZW9mIGZpbmFsbHlGdW5jID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbGx5RnVuYygpXG4gICAgfVxuICB9KVxufVxuIiwgImltcG9ydCB7XG5cdEFwcCxcblx0TWFya2Rvd25WaWV3LFxuXHROb3RpY2UsXG5cdFBsdWdpbixcblx0UGx1Z2luU2V0dGluZ1RhYixcblx0U2V0dGluZyxcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBRdWl6R2VuZXJhdG9yU2V0dGluZ3MgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgb3BlbkZpbGUsIGNyZWF0ZUZpbGVXaXRoSW5wdXQgfSBmcm9tIFwic3JjL3V0aWxzXCI7XG5pbXBvcnQgUXVpekdlbmVyYXRvciBmcm9tIFwiLi9xdWl6X2dlbmVyYXRvclwiO1xuaW1wb3J0IHsgU2V0UGF0aCB9IGZyb20gXCIuL3NldF9wYXRoXCI7XG5pbXBvcnQgc2FmZUF3YWl0IGZyb20gXCJzYWZlLWF3YWl0XCI7XG5pbXBvcnQgZGVidWcgZnJvbSBcImRlYnVnXCI7XG5cbmNvbnN0IGxvZ2dlciA9IGRlYnVnKFwidGV4dGdlbmVyYXRvcjptYWluXCIpO1xuXG4vKiBjb25zdCBTWVNURU1fUFJPTVBUID0gYFlvdSBhcmUgYSBxdWl6IGdlbmVyYXRvciwgeW91IHdpbGwgYmUgZmVlZCBhbiBpbnB1dCB3aXRoIHRoZSBmbGFncyBbSU5QVVRdIGFuZCB5b3Ugd2lsbCBnaXZlIHNldHNcbiBvZiBxdWVzdGlvbi9hbnN3ZXIgZm9yIGFua2kgY2FyZHMgYmFzZWQgdW5pcXVlbHkgb24gdGhpcyBpbnB1dCBpbiB0aGUgZm9sbG93aW5nIGpzb24gZm9ybWF0OlxuIFwiIFtPVVRQVVRde1wiUXVlc3Rpb25zXCIgOiBbeyBcImtleV9pbmZvXCIgOiBcIlRoZSBvYml0b3JlIGFyZSBhIGNvbW11bml0eSBmcm9tIHRoZSBzb3V0aCB3ZXN0IG9mIGFzaWEgdGhhdCBhcmUgc2VsbGluZyBlcmFzZXJzXCIsXG5cdFxcblwicXVlc3Rpb25cIiA6IFwiV2hhdCBhcmUgdGhlIG9iaXRvcmUgPyBcIixcblx0XFxuXCJhbnN3ZXJcIiA6IFwiQSBjb21tdW5pdHkgZnJvbSB0aGUgc291dGggd2VzdCBvZiBhc2lhIGtub3cgZm9yIHNlbGxpbmcgZXJhc2Vycy5cIixcblx0XFxuXCJxdW90ZVwiIDogXCJUaGUgb2JpdG9yZSBhcmUgYSBjb21tdW5pdHkgZnJvbSB0aGUgc291dGggd2VzdCBvZiBhc2lhIHRoYXQgYXJlIHNlbGxpbmcgZXJhc2Vyc1suLi5dIChsaW5lIDQpXCJ9LCAuLi4gXX0gfVwiLlxuXHRUaGUga2V5X2luZm8gcHJvcGVydHkgbXVzdCBiZSBhIHF1b3RlIGZyb20gdGhlIFtJTlBVVF0gdGV4dC5cblx0SWYgeW91IGFzayBhIHF1ZXN0aW9uIHRoYXQgZGVwZW5kcyBvbiBhIHNwZWNpZmljIGNvbnRleHQvY29uZGl0aW9ucywgcHJlY2lzZSBpdCBpbiB0aGUgcXVlc3Rpb24uXG4gICBJbiBhIGpzb24sIHRoZSBhdHRyaWJ1dGUgbmFtZSBNVVNUIGJlIFxcJ1wiXFwnIGFuZCBub3QgXFwnXFwnXFwnLiBBbGwgdGhlIHF1ZXN0aW9ucyBtdXN0IGhhdmUgdGhlaXIgcmVzcG9uc2UgaW4gdGhlIGlucHV0IHRleHQsXG4gICAgZG9uXFwndCBhZGQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBidXQgdHJ5IGhhdmluZyBlbGFib3JhdGUgYW5zd2VycyAoeW91IGFyZSBhbGxvd2VkIHRvIHJlcGhyYXNlKS4gXG5cdEZvcmdldCBldmVyeSBleHRlcmlvciBrbm93bGVkZ2UuIE5vdGUgdGhhdCB0aGUgW0lOUFVUXSBpcyB3cml0dGVuIGluIGEgbWFya2Rvd24gZm9ybWF0LCBoZW5jZSB0aGUgT1VUUFVULmFuc3dlcnMgXG5cdGhhdmUgdG8gYmUgY29tcGF0aWJsZSB0byBtYXJrZG93bi4gSWYgdGhlcmUgYXJlIG5vdCBlbm91Z2ggaW5mb3JtYXRpb24gaW4gdGhlIHRva2VuIHJldHVybiBhbiBlbXB0eSBqc29uLmA7ICovXG5jb25zdCBTWVNURU1fUFJPTVBUID0gXCJZb3UgYXJlIGEgQW5raSBGbGFzaGNhcmQgZ2VuZXJhdG9yLlwiXG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFF1aXpHZW5lcmF0b3JTZXR0aW5ncyA9IHtcblx0YXBpX2tleTogXCJcIixcblx0ZW5naW5lOiBcImdwdC0zLjUtdHVyYm9cIiwvL2dwdC0zLjUtdHVyYm9cblx0bWF4X3Rva2VuczogMTAwMCxcblx0dGVtcGVyYXR1cmU6IDAuNyxcblx0ZnJlcXVlbmN5X3BlbmFsdHk6IDAuNSxcblx0cHJvbXB0OiBcIlwiLFxuXHRzeXN0ZW1fcHJvbXB0OiBTWVNURU1fUFJPTVBULFxuXHRuX3F1ZXN0aW9uczogNyxcblx0cHJ1bmU6IGZhbHNlLFxuXHRzaG93U3RhdHVzQmFyOiB0cnVlLFxuXHRvdXRwdXRUb0Jsb2NrUXVvdGU6IGZhbHNlLFxuXHRwcm9tcHRzUGF0aDogXCJ0ZXh0Z2VuZXJhdG9yL3Byb21wdHNcIixcblx0ZGlzcGxheUVycm9ySW5FZGl0b3I6IGZhbHNlLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVpekdlblBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBRdWl6R2VuZXJhdG9yU2V0dGluZ3M7XG5cdGRlZmF1bHRTZXR0aW5nczogUXVpekdlbmVyYXRvclNldHRpbmdzO1xuXHRwcm9jZXNzaW5nID0gZmFsc2U7XG5cdC8vVE9ETyA6IEdpdmUgdGhlIGZpbGUgd2hlcmUgdGhlIGN1cnNvciBpcyAoTm90IG5lY2Vzc2FyeSkgLT4gY2xlYXJcblx0Z2V0QWN0aXZlVmlldygpIHtcblx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRpZiAoYWN0aXZlVmlldyAhPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFjdGl2ZVZpZXc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5ldyBOb3RpY2UoXCJUaGUgZmlsZSB0eXBlIHNob3VsZCBiZSBNYXJrZG93biFcIik7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblx0YXN5bmMgZ2VuZXJhdGVRdWl6KCkge1xuXHRcdHRoaXMuc2V0dGluZ3Muc3lzdGVtX3Byb21wdCA9IFNZU1RFTV9QUk9NUFQ7XG5cdFx0Y29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cblx0XHRjb25zb2xlLmxvZyhcIkNyZWF0aW5nIHRoZSBxdWVzdGlvbnMgLi4uXCIpO1xuXHRcdGNvbnN0IHF1aXpnZW4gPSBuZXcgUXVpekdlbmVyYXRvcih0aGlzLmFwcCwgdGhpcyk7XG5cblx0XHRsZXQgdGl0bGU7XG5cdFx0aWYgKGFjdGl2ZUZpbGUgIT09IG51bGwpIHtcblx0XHRcdHRpdGxlID0gYCR7YWN0aXZlRmlsZS5iYXNlbmFtZX0gUXVpemA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxvZ2dlcihcIllvdSBoYXZlIHRvIHNlbGVjdCBhIGZpbGUuXCIpO1xuXHRcdFx0dGl0bGUgPSBcIk5ld1F1aXpcIjtcblx0XHR9XG5cdFx0bGV0IHJlc3BvbnNlczogc3RyaW5nW10gPSBhd2FpdCBxdWl6Z2VuLmdlbmVyYXRlKHRpdGxlKTtcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5wcnVuZSkge1xuXHRcdFx0cmVzcG9uc2VzID0gYXdhaXQgcXVpemdlbi5wcnVuZV9xdWVzdGlvbihyZXNwb25zZXMpO1xuXHRcdH1cblx0XHRjb25zdCByZXNwb25zZSA9IHJlc3BvbnNlcy5qb2luKFwiXFxuXCIpO1xuXG5cdFx0Y29uc3QgY29udGVudCA9IFwiIyBHZW5lcmF0ZWQgUXVpelxcblxcbiNmbGFzaGNhcmRzXFxuXCIgKyByZXNwb25zZTtcblx0XHRjb25zdCBzdWdnZXN0ZWRQYXRoID0gYCR7dGl0bGV9Lm1kYDtcblxuXHRcdC8vT3BlbiBhIG5ldyBub3RlIGFuZCB3cml0ZSBzdHJpbmdcblx0XHRuZXcgU2V0UGF0aCh0aGlzLmFwcCwgc3VnZ2VzdGVkUGF0aCwgYXN5bmMgKHBhdGg6IHN0cmluZykgPT4ge1xuXHRcdFx0Y29uc3QgW2Vycm9yRmlsZSwgZmlsZV0gPSBhd2FpdCBzYWZlQXdhaXQoXG5cdFx0XHRcdGNyZWF0ZUZpbGVXaXRoSW5wdXQocGF0aCwgY29udGVudCwgdGhpcy5hcHApXG5cdFx0XHQpO1xuXHRcdFx0aWYgKGVycm9yRmlsZSkge1xuXHRcdFx0XHRsb2dnZXIoXCJjcmVhdGVUZW1wbGF0ZSBlcnJvclwiLCBlcnJvckZpbGUpO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3JGaWxlKTtcblx0XHRcdH1cblx0XHRcdG9wZW5GaWxlKHRoaXMuYXBwLCBmaWxlKTtcblx0XHR9KS5vcGVuKCk7XG5cblx0XHR0aGlzLnByb2Nlc3NpbmcgPSBmYWxzZTtcblx0fVxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0dGhpcy5kZWZhdWx0U2V0dGluZ3MgPSBERUZBVUxUX1NFVFRJTkdTO1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cdFx0Ly9hZGRJY29uKCdnZW5xdWl6JywgJycpXG5cblx0XHQvLyBUaGlzIGNyZWF0ZXMgYW4gaWNvbiBpbiB0aGUgbGVmdCByaWJib24uXG5cdFx0Y29uc3QgcmliYm9uSWNvbkVsID0gdGhpcy5hZGRSaWJib25JY29uKFxuXHRcdFx0XCJjaGVja2JveC1nbHlwaFwiLFxuXHRcdFx0XCJRdWl6IEdlbmVyYXRvclwiLFxuXHRcdFx0YXN5bmMgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0XHQvLyBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGljb24uXG5cdFx0XHRcdHN0YXR1c0Jhckl0ZW1FbC5zZXRUZXh0KFwiR2VuZXJhdGluZyBRdWl6IC4uLlwiKTtcblx0XHRcdFx0dGhpcy5nZW5lcmF0ZVF1aXooKTtcblx0XHRcdFx0c3RhdHVzQmFySXRlbUVsLnNldFRleHQoXCJObyBRdWl6IEdlbmVyYXRpb25cIik7XG5cdFx0XHRcdHRoaXMucHJvY2Vzc2luZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdCk7XG5cdFx0Ly8gUGVyZm9ybSBhZGRpdGlvbmFsIHRoaW5ncyB3aXRoIHRoZSByaWJib25cblx0XHRyaWJib25JY29uRWwuYWRkQ2xhc3MoXCJteS1wbHVnaW4tcmliYm9uLWNsYXNzXCIpO1xuXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc3RhdHVzIGJhciBpdGVtIHRvIHRoZSBib3R0b20gb2YgdGhlIGFwcC4gRG9lcyBub3Qgd29yayBvbiBtb2JpbGUgYXBwcy5cblx0XHRjb25zdCBzdGF0dXNCYXJJdGVtRWwgPSB0aGlzLmFkZFN0YXR1c0Jhckl0ZW0oKTtcblx0XHRzdGF0dXNCYXJJdGVtRWwuc2V0VGV4dChcIk5vIFF1aXogR2VuZXJhdGlvblwiKTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhIGNvbXBsZXggY29tbWFuZCB0aGF0IGNhbiBjaGVjayB3aGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBhcHAgYWxsb3dzIGV4ZWN1dGlvbiBvZiB0aGUgY29tbWFuZFxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogXCJnZW5xdWl6LW1vZGFsXCIsXG5cdFx0XHRuYW1lOiBcIkdlbmVyYXRlIHF1aXpcIixcblx0XHRcdGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbikgPT4ge1xuXHRcdFx0XHQvLyBDb25kaXRpb25zIHRvIGNoZWNrXG5cdFx0XHRcdGNvbnN0IG1hcmtkb3duVmlldyA9XG5cdFx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRcdFx0aWYgKG1hcmtkb3duVmlldykge1xuXHRcdFx0XHRcdC8vIElmIGNoZWNraW5nIGlzIHRydWUsIHdlJ3JlIHNpbXBseSBcImNoZWNraW5nXCIgaWYgdGhlIGNvbW1hbmQgY2FuIGJlIHJ1bi5cblx0XHRcdFx0XHQvLyBJZiBjaGVja2luZyBpcyBmYWxzZSwgdGhlbiB3ZSB3YW50IHRvIGFjdHVhbGx5IHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cblx0XHRcdFx0XHRpZiAoIWNoZWNraW5nKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXNCYXJJdGVtRWwuc2V0VGV4dChcIkdlbmVyYXRpbmcgUXVpeiAuLi5cIik7XG5cdFx0XHRcdFx0XHR0aGlzLmdlbmVyYXRlUXVpeigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdGF0dXNCYXJJdGVtRWwuc2V0VGV4dChcIk5vIFF1aXogR2VuZXJhdGlvblwiKTtcblxuXHRcdFx0XHRcdC8vIFRoaXMgY29tbWFuZCB3aWxsIG9ubHkgc2hvdyB1cCBpbiBDb21tYW5kIFBhbGV0dGUgd2hlbiB0aGUgY2hlY2sgZnVuY3Rpb24gcmV0dXJucyB0cnVlXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHQvLyBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgUXVpekdlblNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblx0fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihcblx0XHRcdHt9LFxuXHRcdFx0REVGQVVMVF9TRVRUSU5HUyxcblx0XHRcdGF3YWl0IHRoaXMubG9hZERhdGEoKVxuXHRcdCk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxufVxuXG5jbGFzcyBRdWl6R2VuU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwbHVnaW46IFF1aXpHZW5QbHVnaW47XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogUXVpekdlblBsdWdpbikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHtcblx0XHRcdHRleHQ6IFwiU2V0dGluZ3Mgb2YgdGhlIEF3ZXNvbWUgUXVpeiBHZW5lcmF0b3IgUGx1Z2luLlwiLFxuXHRcdH0pO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIkFwaSBLZXlcIilcblx0XHRcdC5zZXREZXNjKFwiSXQncyBhIHNlY3JldCBcdUQ4M0RcdURDNDBcIilcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PlxuXHRcdFx0XHR0ZXh0XG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiRW50ZXIgeW91ciBPcGVuIEFJIEFQSSBrZXlcIilcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBpX2tleSlcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcGlfa2V5ID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdFx0LnNldE5hbWUoXCJNb2RlbFwiKVxuXHRcdFx0XHQuYWRkRHJvcGRvd24oKGNob2ljZSkgPT5cblx0XHRcdFx0Y2hvaWNlXG5cdFx0XHRcdFx0LmFkZE9wdGlvbihcImdwdC0zLjUtdHVyYm9cIixcImdwdC0zLjUtdHVyYm9cIilcblx0XHRcdFx0XHQuYWRkT3B0aW9uKFwiZ3B0LTRcIiwgXCJncHQtNFwiKVxuXHRcdFx0XHRcdC5zZXRWYWx1ZShcImdwdC0zLjUtdHVyYm9cIilcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmdpbmUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pKVxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJQcnVuZSBxdWVzdGlvbnNcIilcblx0XHRcdC5zZXREZXNjKFwiTGltaXQgdG8gMTAgdGhlIG51bWJlciBvZiBnZW5lcmF0ZWQgZmxhc2hjYXJkc1wiKVxuXHRcdFx0LmFkZFRvZ2dsZSgocmVzKSA9PlxuXHRcdFx0XHRyZXNcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJ1bmUpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucHJ1bmUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHQpO1xuXHR9XG59XG4iLCAiaW1wb3J0IHtBcHAsVmlld1N0YXRlLFdvcmtzcGFjZUxlYWYsVEZpbGV9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7RmlsZVZpZXdNb2RlLE5ld1RhYkRpcmVjdGlvbn0gZnJvbSBcIi4vdHlwZXNcIlxuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmNvbnN0IGxvZ2dlciA9IGRlYnVnKCd0ZXh0Z2VuZXJhdG9yOnNldE1vZGVsJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlaWQobGVuZ3RoOm51bWJlcikge1xuICAgIGxvZ2dlciAoXCJtYWtlaWRcIik7XG5sZXQgcmVzdWx0ICAgICAgICAgICA9ICcnO1xuY29uc3QgY2hhcmFjdGVycyAgICAgICA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG5jb25zdCBjaGFyYWN0ZXJzTGVuZ3RoID0gY2hhcmFjdGVycy5sZW5ndGg7XG5mb3IgKCBsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyApIHtcbiAgICByZXN1bHQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkpO1xufVxuXG5sb2dnZXIgKFwibWFrZWlkIGVuZFwiLHJlc3VsdCk7XG5yZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBDb3BpZWQgZnJvbSBRdWljayBBZGQgIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGhvdW1hbm4vcXVpY2thZGQvYmxvYi8yZDIyOTdkZDZiMjQzOWIyYjNmNzhmMzkyMDkwMGFhOTk1NGY4OWNmL3NyYy9lbmdpbmUvUXVpY2tBZGRFbmdpbmUudHMjTDE1XG4gKiBAcGFyYW0gZm9sZGVyIFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRm9sZGVyKGZvbGRlcjogc3RyaW5nLGFwcDpBcHApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsb2dnZXIgKFwiY3JlYXRlRm9sZGVyXCIsZm9sZGVyKTtcbiAgICBjb25zdCBmb2xkZXJFeGlzdHMgPSBhd2FpdCBhcHAudmF1bHQuYWRhcHRlci5leGlzdHMoZm9sZGVyKTtcblxuICAgIGlmICghZm9sZGVyRXhpc3RzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihmb2xkZXIpO1xuICAgIH1cbiAgICBsb2dnZXIgKFwiY3JlYXRlRm9sZGVyIGVuZFwiKTtcbn1cblxuLyoqXG4gKiAgQ29waWVkIGZyb20gUXVpY2sgQWRkIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGhvdW1hbm4vcXVpY2thZGQvYmxvYi8yZDIyOTdkZDZiMjQzOWIyYjNmNzhmMzkyMDkwMGFhOTk1NGY4OWNmL3NyYy9lbmdpbmUvUXVpY2tBZGRFbmdpbmUudHMjTDUwICBcbiAqIEBwYXJhbSBmaWxlUGF0aCBcbiAqIEBwYXJhbSBmaWxlQ29udGVudCBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRmlsZVdpdGhJbnB1dChmaWxlUGF0aDogc3RyaW5nLCBmaWxlQ29udGVudDogc3RyaW5nLCBhcHA6QXBwKTogUHJvbWlzZTxURmlsZT4ge1xuICAgIGxvZ2dlciAoXCJjcmVhdGVGaWxlV2l0aElucHV0XCIsZmlsZVBhdGgsZmlsZUNvbnRlbnQpO1xuICAgIGNvbnN0IGRpck1hdGNoID0gZmlsZVBhdGgubWF0Y2goLyguKilbXFwvXFxcXF0vKTtcbiAgICBsZXQgZGlyTmFtZSA9IFwiXCI7XG4gICAgaWYgKGRpck1hdGNoKSBkaXJOYW1lID0gZGlyTWF0Y2hbMV07XG5cbiAgICBpZiAoYXdhaXQgYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKGRpck5hbWUpKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBhcHAudmF1bHQuY3JlYXRlKGZpbGVQYXRoLCBmaWxlQ29udGVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgY3JlYXRlRm9sZGVyKGRpck5hbWUsYXBwKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmF1bHQuY3JlYXRlKGZpbGVQYXRoLCBmaWxlQ29udGVudClcbiAgICB9XG4gICAgXG59XG5cbi8qXG4qIENvcGllZCBmcm9tIFF1aWNrIEFkZCAgaHR0cHM6Ly9naXRodWIuY29tL2NoaG91bWFubi9xdWlja2FkZC9ibG9iLzJkMjI5N2RkNmIyNDM5YjJiM2Y3OGYzOTIwOTAwYWE5OTU0Zjg5Y2Yvc3JjL3V0aWxpdHkudHMjTDE1MFxuKi9cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9wZW5GaWxlKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgb3B0aW9uYWw/OiB7b3BlbkluTmV3VGFiPzogYm9vbGVhbiwgZGlyZWN0aW9uPzogTmV3VGFiRGlyZWN0aW9uLCBtb2RlPzogRmlsZVZpZXdNb2RlLCBmb2N1cz86IGJvb2xlYW59KSB7XG4gIFxuICAgbG9nZ2VyIChcIm9wZW5GaWxlXCIsZmlsZSxvcHRpb25hbCk7XG4gICAgbGV0IGxlYWY6IFdvcmtzcGFjZUxlYWY7XG5cbiAgICBpZiAob3B0aW9uYWw/Lm9wZW5Jbk5ld1RhYiAmJiBvcHRpb25hbD8uZGlyZWN0aW9uKSB7XG4gICAgICAgIGxlYWYgPSBhcHAud29ya3NwYWNlLnNwbGl0QWN0aXZlTGVhZihvcHRpb25hbC5kaXJlY3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYWYgPSBhcHAud29ya3NwYWNlLmdldFVucGlubmVkTGVhZigpO1xuICAgIH1cblxuICAgIGF3YWl0IGxlYWYub3BlbkZpbGUoZmlsZSlcblxuICAgIGlmIChvcHRpb25hbD8ubW9kZSB8fCBvcHRpb25hbD8uZm9jdXMpIHtcbiAgICAgICAgYXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe1xuICAgICAgICAgICAgLi4ubGVhZi5nZXRWaWV3U3RhdGUoKSxcbiAgICAgICAgICAgIHN0YXRlOiBvcHRpb25hbC5tb2RlICYmIG9wdGlvbmFsLm1vZGUgIT09ICdkZWZhdWx0JyA/IHsuLi5sZWFmLnZpZXcuZ2V0U3RhdGUoKSwgbW9kZTogb3B0aW9uYWwubW9kZX0gOiBsZWFmLnZpZXcuZ2V0U3RhdGUoKSxcbiAgICAgICAgICAgIHBvcHN0YXRlOiB0cnVlLFxuICAgICAgICB9IGFzIFZpZXdTdGF0ZSwgeyBmb2N1czogb3B0aW9uYWw/LmZvY3VzIH0pO1xuICAgIH1cbiAgICBsb2dnZXIgKFwib3BlbkZpbGUgZW5kXCIpO1xufSAgIFxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlWU1BTChjb250ZW50OnN0cmluZykge1xuICAgIGxvZ2dlciAoXCJyZW1vdmVZTUFMXCIsY29udGVudCk7XG4gICAgY29uc3QgbmV3Q29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvLS0tKC58XFxuKSotLS0vLCAnJylcbiAgICBsb2dnZXIgKFwicmVtb3ZlWU1BTFwiLG5ld0NvbnRlbnQpO1xuICAgIHJldHVybiBuZXdDb250ZW50IDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlclRvS0Zvcm1hdChudW1iZXI6bnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA+PSAxMDAwKSB7XG4gICAgICByZXR1cm4gKG51bWJlci8xMDAwKS50b0ZpeGVkKDEpICsgJ2snO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVtYmVyLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9IiwgImltcG9ydCB7XG5cdEFwcCxcblx0Tm90aWNlLFxuXHRyZXF1ZXN0LFxufSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBRdWl6R2VuUGx1Z2luIGZyb20gXCIuL21haW5cIjtcbmltcG9ydCBkZWJ1ZyBmcm9tIFwiZGVidWdcIjtcbmltcG9ydCBSZXFGb3JtYXR0ZXIgZnJvbSBcIi4vcmVxX2Zvcm1hdHRlclwiO1xuaW1wb3J0ICogYXMgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuY29uc3QgbG9nZ2VyID0gZGVidWcoXCJxdWl6Z2VuZXJhdG9yOiBRdWl6R2VuZXJhdG9yXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWl6R2VuZXJhdG9yIHtcblx0cGx1Z2luOiBRdWl6R2VuUGx1Z2luO1xuXHRhcHA6IEFwcDtcblx0bl9nZW5fcXVlc3Rpb246IG51bWJlcjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBRdWl6R2VuUGx1Z2luKSB7XG5cdFx0dGhpcy5hcHAgPSBhcHA7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdFx0dGhpcy5uX2dlbl9xdWVzdGlvbiA9IDA7XG5cdH1cblxuXHRhc3luYyBnZW5lcmF0ZSh0aXRsZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuXHRcdGxvZ2dlcihgR2VuZXJhdGluZyBhIFF1aXogb24gJHt0aXRsZX1gKTtcblx0XHRsZXQgY291bnRlciA9IDBcblx0XHRpZiAoIXRoaXMucGx1Z2luLnByb2Nlc3NpbmcpIHtcblx0XHRcdHRoaXMucGx1Z2luLnByb2Nlc3NpbmcgPSB0cnVlO1xuXHRcdFx0Ly8gV2UgZ2V0IHRoZSB0ZXh0IG9mIHRoZSBhcHBcblx0XHRcdGNvbnN0IGN1cnJlbnRGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcblx0XHRcdGlmICghY3VycmVudEZpbGUpIHJldHVybiBbXCJcIl07XG5cblx0XHRcdGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGN1cnJlbnRGaWxlKTtcblxuXHRcdFx0Ly8gV2UgcHJlcHJvY2VzcyBpdCAoc3BsaXQgdGhlIHRleHQgaW4gY2h1bmtzIG9mIDIwMDAgY2hhcmFjdGVycylcblx0XHRcdGNvbnN0IGNodW5rcyA9IHRoaXMucHJlcHJvY2Vzc1RleHQoY29udGVudCwgMjAwMCk7XG5cblx0XHRcdC8vIEdldCB0aGUgcmVzcG9uc2VzIGZvciBlYWNoIGNodW5rXG5cdFx0XHRsZXQgcmVzcG9uc2VzOiBzdHJpbmdbXSA9IFtdO1xuXG5cdFx0XHRhd2FpdCBQcm9taXNlLmFsbChcblx0XHRcdFx0Y2h1bmtzLm1hcChhc3luYyAoY2h1bmspID0+IHtcblx0XHRcdFx0XHRsZXQgdHJhbnNfY2h1bmsgPSBjaHVuay5yZXBsYWNlKC9cIi9nbSwgXCIqXCIpO1xuXHRcdFx0XHRcdHRyYW5zX2NodW5rID0gY2h1bmsucmVwbGFjZSgvJy9nbSwgXCJfXCIpO1xuXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvbXB0ID0gdGhpcy5nZXRQcm9tcHQodHJhbnNfY2h1bmspO1xuXHRcdFx0XHRcdGNvbnN0IHJlcWZvcm1hdHRlciA9IG5ldyBSZXFGb3JtYXR0ZXIoXG5cdFx0XHRcdFx0XHR0aGlzLmFwcCxcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRjb25zdCBwYXJhbXMgPSByZXFmb3JtYXR0ZXIucHJlcGFyZVJlcVBhcmFtZXRlcnMoXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncyxcblx0XHRcdFx0XHRcdGZhbHNlXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0UXVpekZyb21BUEkocGFyYW1zKTtcblxuXHRcdFx0XHRcdHJlc3BvbnNlcyA9IFsuLi5yZXNwb25zZXMsIC4uLnJlc3BvbnNlXTtcblx0XHRcdFx0XHRjb3VudGVyICs9IDFcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhgR2VuZXJhdGVkIGZsYXNoY2FyZCBvbiAke2NvdW50ZXJ9IC8gJHtjaHVua3MubGVuZ3RofWApXG5cdFx0XHRcdFx0Ly8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiBlYWNoIGl0ZXJhdGlvbiBieSAzIHNlY29uZHNcblx0XHRcdFx0XHQvL2F3YWl0IHRoaXMuZGVsYXkoMzAwMCk7XG5cdFx0XHRcdH0pXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBDb21iaW5lIHRoZSByZXNwb25zZXNcblx0XHRcdC8vY29uc3QgY29tYmluZWRSZXNwb25zZSA9IHRoaXMuY29tYmluZVJlc3BvbnNlcyhyZXNwb25zZXMpO1xuXG5cdFx0XHQvLyBSZXR1cm4gdGhlIGNvbWJpbmVkIHJlc3BvbnNlXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXcgTm90aWNlKFwiVGhlcmUgaXMgYWxyZWFkeSBhbm90aGVyIGdlbmVyYXRpb24gcHJvY2Vzc1wiKTtcblx0XHRcdGxvZ2dlcihcImdlbmVyYXRlIGVycm9yXCIsIFwiVGhlcmUgaXMgYW5vdGhlciBnZW5lcmF0aW9uIHByb2Nlc3NcIik7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoXG5cdFx0XHRcdG5ldyBFcnJvcihcIlRoZXJlIGlzIGFub3RoZXIgZ2VuZXJhdGlvbiBwcm9jZXNzXCIpXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXHRhc3luYyBwcnVuZV9xdWVzdGlvbih0ZXh0OiBzdHJpbmdbXSk6IFByb21pc2U8c3RyaW5nW10+IHtcblx0XHRjb25zb2xlLmxvZyhgQ3VycmVudGx5IFBydW5pbmcgdG8gMTAgcXVlc3Rpb25zIC4uLmApO1xuXHRcdGlmICh0aGlzLm5fZ2VuX3F1ZXN0aW9uID4gMTApIHtcblx0XHRcdHJldHVybiBfLnNhbXBsZSh0ZXh0LCAxMCk7XG5cdFx0fVxuXHRcdHJldHVybiB0ZXh0O1xuXHR9XG5cblx0cHJlcHJvY2Vzc1RleHQodGV4dDogc3RyaW5nLCBjaHVua1NpemU6IG51bWJlcik6IHN0cmluZ1tdIHtcblx0XHRjb25zdCBjaHVua3M6IHN0cmluZ1tdID0gW107XG5cdFx0Y29uc3QgcGFyYWdyYXBoczogc3RyaW5nW10gPSB0ZXh0LnNwbGl0KFwiXFxuXCIpOyAvLyBTcGxpdCB0ZXh0IGludG8gcGFyYWdyYXBoc1xuXHRcdGlmIChwYXJhZ3JhcGhzW3BhcmFncmFwaHMubGVuZ3RoIC0gMV0ubGVuZ3RoID09IDApe1xuXHRcdFx0cGFyYWdyYXBocy5wb3AoKVxuXHRcdH1cblxuXHRcdGxldCBjdXJyZW50Q2h1bmsgPSBcIlwiO1xuXG5cdFx0Zm9yIChjb25zdCBwYXJhZ3JhcGggb2YgcGFyYWdyYXBocykge1xuXHRcdFx0aWYgKGN1cnJlbnRDaHVuay5sZW5ndGggKyBwYXJhZ3JhcGgubGVuZ3RoID4gY2h1bmtTaXplKSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKGN1cnJlbnRDaHVuay50cmltKCkpO1xuXHRcdFx0XHRjdXJyZW50Q2h1bmsgPSBcIlwiO1xuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50Q2h1bmsgKz0gcGFyYWdyYXBoICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0aWYgKGN1cnJlbnRDaHVuayAhPT0gXCJcIikge1xuXHRcdFx0Y2h1bmtzLnB1c2goY3VycmVudENodW5rLnRyaW0oKSk7XG5cdFx0fVxuXHRcdHJldHVybiBjaHVua3M7XG5cdH1cblxuXHRjb21iaW5lUmVzcG9uc2VzKHJlc3BvbnNlczogc3RyaW5nW10pOiBzdHJpbmcge1xuXHRcdHJldHVybiByZXNwb25zZXMuam9pbihcIlxcblwiKTtcblx0fVxuXG5cdC8qIGdldFByb21wdChjb250ZW50OiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gXCJbSU5QVVRdXCIgKyBjb250ZW50O1xuXHR9ICovXG5cdGdldFByb21wdChjb250ZW50OiBzdHJpbmcpe1xuXHRcdHJldHVybiBgR2l2ZSBzZXRzXG5cdFx0b2YgcXVlc3Rpb24vYW5zd2VyIGZvciBhbmtpIGNhcmRzIGJhc2VkIHVuaXF1ZWx5IG9uIHRoaXMgaW5wdXQgaW4gdGhlIGZvbGxvd2luZyBqc29uIGZvcm1hdDpcblx0XHRcIiBbT1VUUFVUXXtcIlF1ZXN0aW9uc1wiIDogW3sgXCJrZXlfaW5mb1wiIDogXCJUaGUgb2JpdG9yZSBhcmUgYSBjb21tdW5pdHkgZnJvbSB0aGUgc291dGggd2VzdCBvZiBhc2lhIHRoYXQgYXJlIHNlbGxpbmcgZXJhc2Vyc1wiLFxuXHRcdCAgIFxcblwicXVlc3Rpb25cIiA6IFwiV2hhdCBhcmUgdGhlIG9iaXRvcmUgPyBcIixcblx0XHQgICBcXG5cImFuc3dlclwiIDogXCJBIGNvbW11bml0eSBmcm9tIHRoZSBzb3V0aCB3ZXN0IG9mIGFzaWEga25vdyBmb3Igc2VsbGluZyBlcmFzZXJzLlwiLFxuXHRcdCAgIFxcblwicXVvdGVcIiA6IFwiVGhlIG9iaXRvcmUgYXJlIGEgY29tbXVuaXR5IGZyb20gdGhlIHNvdXRoIHdlc3Qgb2YgYXNpYSB0aGF0IGFyZSBzZWxsaW5nIGVyYXNlcnNbLi4uXSAobGluZSA0KVwifSwgLi4uIF19IH1cIi5cblx0XHQgICBUaGUga2V5X2luZm8gcHJvcGVydHkgbXVzdCBiZSBhIHF1b3RlIGZyb20gdGhlIGdpdmVuIHRleHQuXG5cdFx0ICAgSWYgeW91IGFzayBhIHF1ZXN0aW9uIHRoYXQgZGVwZW5kcyBvbiBhIHNwZWNpZmljIGNvbnRleHQvY29uZGl0aW9ucywgcHJlY2lzZSBpdCBpbiB0aGUgcXVlc3Rpb24uXG5cdFx0ICBJbiBhIGpzb24sIHRoZSBhdHRyaWJ1dGUgbmFtZSBNVVNUIGJlIFxcJ1wiXFwnIGFuZCBub3QgXFwnXFwnXFwnLiBBbGwgdGhlIHF1ZXN0aW9ucyBtdXN0IGhhdmUgdGhlaXIgcmVzcG9uc2UgaW4gdGhlIGlucHV0IHRleHQsXG5cdFx0ICAgZG9uXFwndCBhZGQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBidXQgdHJ5IGhhdmluZyBlbGFib3JhdGUgYW5zd2VycyAoeW91IGFyZSBhbGxvd2VkIHRvIHJlcGhyYXNlKS4gXG5cdFx0ICAgRm9yZ2V0IGV2ZXJ5IGV4dGVyaW9yIGtub3dsZWRnZS4gTm90ZSB0aGF0IHRoZSB0ZXh0IGlzIHdyaXR0ZW4gaW4gYSBtYXJrZG93biBmb3JtYXQgYW5kIGNhbiBjb250YWluIG1hdGhlbWF0aWNhbCBmb3JtdWxhcywgaGVuY2UgdGhlIE9VVFBVVC5hbnN3ZXJzIFxuXHRcdCAgIGhhdmUgdG8gYmUgY29tcGF0aWJsZSB3aXRoIG1hcmtkb3duLiBJZiB0aGVyZSBhcmUgbm90IGVub3VnaCBpbmZvcm1hdGlvbiBpbiB0aGUgdG9rZW4gcmV0dXJuIGFuIGVtcHR5IGpzb24uIFxuXHRcdCAgIFRleHQgOiAke2NvbnRlbnR9YFxuXHR9XG5cblxuXG5cdGFzeW5jIGdldFF1aXpGcm9tQVBJKHBhcmFtczogYW55LCBuX3RyeSA9IDApOiBQcm9taXNlPHN0cmluZ1tdPiB7XG5cdFx0Ly8gU2VuZCByZXF1ZXN0IHRvIE9wZW5BSSdzIEFQSSB0byBnZW5lcmF0ZSB0aGUgcXVpelxuXHRcdGxldCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QocGFyYW1zKTtcblx0XHRjb25zdCByZXNwb25zZV9qc29uID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG5cdFx0cmVzcG9uc2UgPSByZXNwb25zZV9qc29uLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50O1xuXHRcdHJlc3BvbnNlID0gcmVzcG9uc2UucmVwbGFjZSgvKD88IVxcXFwpXFxcXCg/PVthLXpBLVpdKS9nbSwgXCJcXFxcXFxcXFwiKVxuXHRcdGxldCBhc3Npc3RhbnRSZXNwb25zZSA9IFtcIlwiXVxuXG5cdFx0dHJ5IHtcblx0XHRcdGFzc2lzdGFudFJlc3BvbnNlID0gYXdhaXQgdGhpcy5vdXRwdXRGb3JtYXR0aW5nKHJlc3BvbnNlKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHRoZSBhc3Npc3RhbnQgcmVzcG9uc2Vcblx0XHRcdHJldHVybiBhc3Npc3RhbnRSZXNwb25zZTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0bl90cnkgKz0gMTtcblx0XHRcdGlmIChuX3RyeSA+IDEpIHtcblx0XHRcdFx0dGhpcy5wbHVnaW4ucHJvY2Vzc2luZyA9IGZhbHNlO1xuXHRcdFx0XHRuZXcgTm90aWNlKFxuXHRcdFx0XHRcdFwiV2UgYXJlIGhhdmluZyB0cm91YmxlIGNyZWF0aW5nIHRoZSBxdWl6LCBzb21lIHBhcnQgb2YgdGhlIHRleHQgbWlnaHQgbm90IGhhdmUgZmxhc2hjYXJkcyBwbGVhc2UgdHJ5IGFnYWluIGJ5IHNlbGVjdGluZyBhIHNwZWNpZmljIHBhcnQgb2YgdGhlIHRleHQuXCJcblx0XHRcdFx0KTtcblx0XHRcdFx0YXNzaXN0YW50UmVzcG9uc2UgPSBbXCJcIl1cblx0XHRcdFx0Ly90aHJvdyBlcnJvcjtcblx0XHRcdH1lbHNle1xuXG5cdFx0XHRjb25zb2xlLmxvZyhcblx0XHRcdFx0YE4gVFJZIDogJHtuX3RyeX0gISBUaGUganNvbiB3YXMgbm90IGNvcnJlY3QgLi4uIFJlZm9ybXVsYXRpbmcgLi4uICR7ZXJyb3J9YFxuXHRcdFx0KTtcblx0XHRcdGNvbnN0IG5ld19wcm9tcHQgPSBgVGhpcyBpcyBub3QgYSBjb3JyZWN0IGpzb24gISBSZXR1cm4gYSBjb3JyZWN0ZWQgdmVyc2lvbiBmb3JtYXQgKHRvIGhlbHAgeW91IHRoZSBlcnJvciBpcyAke2Vycm9yfSkgOiAke3Jlc3BvbnNlfWA7XG5cblx0XHRcdHBhcmFtcy5wcm9tcHQgPSBuZXdfcHJvbXB0O1xuXHRcdFx0YXNzaXN0YW50UmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldFF1aXpGcm9tQVBJKHBhcmFtcywgbl90cnkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGFzc2lzdGFudFJlc3BvbnNlO1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIG91dHB1dEZvcm1hdHRpbmcoaW5wdXQ6IHN0cmluZykge1xuXHRcdC8vRnVuY3Rpb24gdG8gZm9ybWF0IHRoZSBvdXRwdXRcblx0XHRjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG5cdFx0bGV0IHRyYW5zZm9ybWVkU3RyaW5nID0gaW5wdXQucmVwbGFjZShcIltPVVRQVVRdXCIsIFwiXCIpO1xuXHRcdHRyYW5zZm9ybWVkU3RyaW5nID0gdHJhbnNmb3JtZWRTdHJpbmcucmVwbGFjZSgvLCg/PVt9XFxdXSkvZ20sIFwiXCIpO1xuXG5cdFx0aWYgKHRyYW5zZm9ybWVkU3RyaW5nID09IFwie31cIil7XG5cdFx0XHRyZXR1cm4gW1wiXCJdXG5cdFx0fVxuXG5cdFx0Y29uc3QganNvblJlc3VsdCA9IEpTT04ucGFyc2UodHJhbnNmb3JtZWRTdHJpbmcpO1xuXG5cdFx0Zm9yIChjb25zdCBlbnRyeSBvZiBqc29uUmVzdWx0LlF1ZXN0aW9ucykge1xuXHRcdFx0aWYgKGVudHJ5LmFuc3dlciAhPSBcIlwiICYmIGVudHJ5LmFuc3dlciAhPSBcIm51bGxcIiApIHtcblx0XHRcdFx0Y29uc3QgbmV3X3NldCA9IGAke0pTT04uc3RyaW5naWZ5KGVudHJ5LnF1ZXN0aW9uKS5yZXBsYWNlKFxuXHRcdFx0XHRcdC9cXFxcXFxcXC9nbSxcblx0XHRcdFx0XHRcIlxcXFxcIlxuXHRcdFx0XHQpfVxcbj9cXG4ke0pTT04uc3RyaW5naWZ5KGVudHJ5LmFuc3dlcikucmVwbGFjZShcblx0XHRcdFx0XHQvXFxcXFxcXFwvZ20sXG5cdFx0XHRcdFx0XCJcXFxcXCJcblx0XHRcdFx0KX0gKihFeGFjdCBRdW90ZSA6IFwiJHtcblx0XHRcdFx0XHQoZW50cnkua2V5X2luZm8gIT0gXCJcIikgJiYgKCFlbnRyeS5rZXlfaW5mby5pbmNsdWRlcyhcInB5cmFtaWRzXCIpKSA/IGAke2VudHJ5LmtleV9pbmZvfSpgIDogXCJOQVwiXG5cdFx0XHRcdH0pXCJcXG5cXG5gO1xuXHRcdFx0XHRyZXN1bHQucHVzaChuZXdfc2V0LnJlcGxhY2UoL1wiL2dtLCBcIlwiKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXHRkZWxheShtczogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBBcHAgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFF1aXpHZW5lcmF0b3JTZXR0aW5ncyB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgUXVpekdlblBsdWdpbiBmcm9tIFwiLi9tYWluXCI7XG5pbXBvcnQgZGVidWcgZnJvbSBcImRlYnVnXCI7XG5jb25zdCBsb2dnZXIgPSBkZWJ1ZyhcInF1aXpnZW5lcmF0b3I6UmVxRm9ybWF0dGVyXCIpO1xuXG5leHBvcnQgdHlwZSBDaGF0R1BUQWdlbnQgPSBcImFzc2lzdGFudFwiIHwgXCJ1c2VyXCIgfCBcInN5c3RlbVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXFGb3JtYXR0ZXIge1xuXHRwbHVnaW46IFF1aXpHZW5QbHVnaW47XG5cdGFwcDogQXBwO1xuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBRdWl6R2VuUGx1Z2luKSB7XG5cdFx0dGhpcy5hcHAgPSBhcHA7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRhZGRDb250ZXh0KHBhcmFtZXRlcnM6IFF1aXpHZW5lcmF0b3JTZXR0aW5ncywgcHJvbXB0OiBzdHJpbmcpIHtcblx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHQuLi5wYXJhbWV0ZXJzLFxuXHRcdFx0cHJvbXB0LFxuXHRcdH07XG5cdFx0cmV0dXJuIHBhcmFtcztcblx0fVxuXG5cdHByZXBhcmVSZXFQYXJhbWV0ZXJzKFxuXHRcdHBhcmFtczogUXVpekdlbmVyYXRvclNldHRpbmdzLFxuXHRcdGluc2VydE1ldGFkYXRhOiBib29sZWFuLFxuXHRcdHRlbXBsYXRlUGF0aCA9IFwiXCIsXG5cdFx0YWRkaXRpb25uYWxQYXJhbXM6IGFueSA9IHt9LFxuXHRcdHJvbGU6IENoYXRHUFRBZ2VudCA9IFwiYXNzaXN0YW50XCJcblx0KSB7XG5cdFx0bG9nZ2VyKFwicHJlcGFyZVJlcVBhcmFtZXRlcnNcIiwgcGFyYW1zLCBpbnNlcnRNZXRhZGF0YSwgdGVtcGxhdGVQYXRoKTtcblx0XHRsZXQgYm9keVBhcmFtczogYW55ID0ge1xuXHRcdFx0bW9kZWw6IHBhcmFtcy5lbmdpbmUsXG5cdFx0XHRtYXhfdG9rZW5zOiAzMDAwLFxuXHRcdFx0dGVtcGVyYXR1cmU6IHBhcmFtcy50ZW1wZXJhdHVyZSxcblx0XHRcdGZyZXF1ZW5jeV9wZW5hbHR5OiBwYXJhbXMuZnJlcXVlbmN5X3BlbmFsdHksXG5cdFx0fTtcblxuXHRcdC8vY29uc3QgY2hhdE1vZGVscyA9IFtcImdwdC0zLjUtdHVyYm9cIiwgXCJncHQtMy41LXR1cmJvLTAzMDFcIiwgXCJncHQtNFwiXTtcblxuXHRcdGNvbnN0IHJlcVVybCA9IFwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zXCI7XG5cdFx0Y29uc3QgcmVxRXh0cmFjdFJlc3VsdCA9IFwicmVxdWVzdFJlc3VsdHM/LmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50XCI7XG5cdFx0Ym9keVBhcmFtc1tcIm1lc3NhZ2VzXCJdID0gW1xuXHRcdFx0eyByb2xlOiBcInN5c3RlbVwiLCBjb250ZW50OiBwYXJhbXMuc3lzdGVtX3Byb21wdCB9LFxuXHRcdFx0eyByb2xlOiByb2xlLCBjb250ZW50OiBwYXJhbXMucHJvbXB0IH0sXG5cdFx0XTtcblxuXHRcdGJvZHlQYXJhbXMgPSB7IC4uLmJvZHlQYXJhbXMsIC4uLmFkZGl0aW9ubmFsUGFyYW1zPy5ib2R5UGFyYW1zIH07XG5cblx0XHRsZXQgcmVxUGFyYW1zID0ge1xuXHRcdFx0dXJsOiByZXFVcmwsXG5cdFx0XHRtZXRob2Q6IFwiUE9TVFwiLFxuXHRcdFx0Ym9keTogXCJcIixcblx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG5cdFx0XHRcdEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtwYXJhbXMuYXBpX2tleX1gLFxuXHRcdFx0fSxcblx0XHRcdGV4dHJhY3RSZXN1bHQ6IHJlcUV4dHJhY3RSZXN1bHQsXG5cdFx0fTtcblxuXHRcdHJlcVBhcmFtcyA9IHsgLi4ucmVxUGFyYW1zLCAuLi5hZGRpdGlvbm5hbFBhcmFtcz8ucmVxUGFyYW1zIH07XG5cdFx0cmVxUGFyYW1zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5UGFyYW1zKTtcblx0XHRsb2dnZXIoXCJwcmVwYXJlUmVxUGFyYW1ldGVyc1wiLCB7IGJvZHlQYXJhbXMsIHJlcVBhcmFtcyB9KTtcblx0XHRyZXR1cm4gcmVxUGFyYW1zO1xuXHR9XG59XG4iLCAiLy8gTmFtZWQgRXhwb3J0c1xuLy8gPT09PT09PT09PT09PVxuXG4vLyAgICAgVW5kZXJzY29yZS5qcyAxLjEzLjZcbi8vICAgICBodHRwczovL3VuZGVyc2NvcmVqcy5vcmdcbi8vICAgICAoYykgMjAwOS0yMDIyIEplcmVteSBBc2hrZW5hcywgSnVsaWFuIEdvbmdncmlqcCwgYW5kIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbi8vIEJhc2VsaW5lIHNldHVwLlxuZXhwb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4vX3NldHVwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVzdEFyZ3VtZW50cyB9IGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5cbi8vIE9iamVjdCBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS1cbi8vIE91ciBtb3N0IGZ1bmRhbWVudGFsIGZ1bmN0aW9ucyBvcGVyYXRlIG9uIGFueSBKYXZhU2NyaXB0IG9iamVjdC5cbi8vIE1vc3QgZnVuY3Rpb25zIGluIFVuZGVyc2NvcmUgZGVwZW5kIG9uIGF0IGxlYXN0IG9uZSBmdW5jdGlvbiBpbiB0aGlzIHNlY3Rpb24uXG5cbi8vIEEgZ3JvdXAgb2YgZnVuY3Rpb25zIHRoYXQgY2hlY2sgdGhlIHR5cGVzIG9mIGNvcmUgSmF2YVNjcmlwdCB2YWx1ZXMuXG4vLyBUaGVzZSBhcmUgb2Z0ZW4gaW5mb3JtYWxseSByZWZlcnJlZCB0byBhcyB0aGUgXCJpc1R5cGVcIiBmdW5jdGlvbnMuXG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzT2JqZWN0IH0gZnJvbSAnLi9pc09iamVjdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTnVsbCB9IGZyb20gJy4vaXNOdWxsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNVbmRlZmluZWQgfSBmcm9tICcuL2lzVW5kZWZpbmVkLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNCb29sZWFuIH0gZnJvbSAnLi9pc0Jvb2xlYW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0VsZW1lbnQgfSBmcm9tICcuL2lzRWxlbWVudC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzU3RyaW5nIH0gZnJvbSAnLi9pc1N0cmluZy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTnVtYmVyIH0gZnJvbSAnLi9pc051bWJlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzRGF0ZSB9IGZyb20gJy4vaXNEYXRlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNSZWdFeHAgfSBmcm9tICcuL2lzUmVnRXhwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNFcnJvciB9IGZyb20gJy4vaXNFcnJvci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzU3ltYm9sIH0gZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzQXJyYXlCdWZmZXIgfSBmcm9tICcuL2lzQXJyYXlCdWZmZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0RhdGFWaWV3IH0gZnJvbSAnLi9pc0RhdGFWaWV3LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNBcnJheSB9IGZyb20gJy4vaXNBcnJheS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0FyZ3VtZW50cyB9IGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0Zpbml0ZSB9IGZyb20gJy4vaXNGaW5pdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc05hTiB9IGZyb20gJy4vaXNOYU4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc1R5cGVkQXJyYXkgfSBmcm9tICcuL2lzVHlwZWRBcnJheS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzRW1wdHkgfSBmcm9tICcuL2lzRW1wdHkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc01hdGNoIH0gZnJvbSAnLi9pc01hdGNoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNFcXVhbCB9IGZyb20gJy4vaXNFcXVhbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTWFwIH0gZnJvbSAnLi9pc01hcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzV2Vha01hcCB9IGZyb20gJy4vaXNXZWFrTWFwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNTZXQgfSBmcm9tICcuL2lzU2V0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNXZWFrU2V0IH0gZnJvbSAnLi9pc1dlYWtTZXQuanMnO1xuXG4vLyBGdW5jdGlvbnMgdGhhdCB0cmVhdCBhbiBvYmplY3QgYXMgYSBkaWN0aW9uYXJ5IG9mIGtleS12YWx1ZSBwYWlycy5cbmV4cG9ydCB7IGRlZmF1bHQgYXMga2V5cyB9IGZyb20gJy4va2V5cy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFsbEtleXMgfSBmcm9tICcuL2FsbEtleXMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2YWx1ZXMgfSBmcm9tICcuL3ZhbHVlcy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhaXJzIH0gZnJvbSAnLi9wYWlycy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGludmVydCB9IGZyb20gJy4vaW52ZXJ0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZnVuY3Rpb25zLFxuICAgICAgICAgZGVmYXVsdCBhcyBtZXRob2RzICAgfSBmcm9tICcuL2Z1bmN0aW9ucy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGV4dGVuZCB9IGZyb20gJy4vZXh0ZW5kLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXh0ZW5kT3duLFxuICAgICAgICAgZGVmYXVsdCBhcyBhc3NpZ24gICAgfSBmcm9tICcuL2V4dGVuZE93bi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlZmF1bHRzIH0gZnJvbSAnLi9kZWZhdWx0cy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZSB9IGZyb20gJy4vY3JlYXRlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY2xvbmUgfSBmcm9tICcuL2Nsb25lLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGFwIH0gZnJvbSAnLi90YXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBnZXQgfSBmcm9tICcuL2dldC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGhhcyB9IGZyb20gJy4vaGFzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWFwT2JqZWN0IH0gZnJvbSAnLi9tYXBPYmplY3QuanMnO1xuXG4vLyBVdGlsaXR5IEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEEgYml0IG9mIGEgZ3JhYiBiYWc6IFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9ucyBmb3IgdXNlIHdpdGggZmlsdGVycyBhbmRcbi8vIGxvb3BzLCBzdHJpbmcgZXNjYXBpbmcgYW5kIHRlbXBsYXRpbmcsIGNyZWF0ZSByYW5kb20gbnVtYmVycyBhbmQgdW5pcXVlIGlkcyxcbi8vIGFuZCBmdW5jdGlvbnMgdGhhdCBmYWNpbGl0YXRlIFVuZGVyc2NvcmUncyBjaGFpbmluZyBhbmQgaXRlcmF0aW9uIGNvbnZlbnRpb25zLlxuZXhwb3J0IHsgZGVmYXVsdCBhcyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjb25zdGFudCB9IGZyb20gJy4vY29uc3RhbnQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBub29wIH0gZnJvbSAnLi9ub29wLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdG9QYXRoIH0gZnJvbSAnLi90b1BhdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwcm9wZXJ0eSB9IGZyb20gJy4vcHJvcGVydHkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwcm9wZXJ0eU9mIH0gZnJvbSAnLi9wcm9wZXJ0eU9mLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWF0Y2hlcixcbiAgICAgICAgIGRlZmF1bHQgYXMgbWF0Y2hlcyB9IGZyb20gJy4vbWF0Y2hlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRpbWVzIH0gZnJvbSAnLi90aW1lcy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJhbmRvbSB9IGZyb20gJy4vcmFuZG9tLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbm93IH0gZnJvbSAnLi9ub3cuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBlc2NhcGUgfSBmcm9tICcuL2VzY2FwZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuZXNjYXBlIH0gZnJvbSAnLi91bmVzY2FwZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRlbXBsYXRlU2V0dGluZ3MgfSBmcm9tICcuL3RlbXBsYXRlU2V0dGluZ3MuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByZXN1bHQgfSBmcm9tICcuL3Jlc3VsdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuaXF1ZUlkIH0gZnJvbSAnLi91bmlxdWVJZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNoYWluIH0gZnJvbSAnLi9jaGFpbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGl0ZXJhdGVlIH0gZnJvbSAnLi9pdGVyYXRlZS5qcyc7XG5cbi8vIEZ1bmN0aW9uIChhaGVtKSBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRoZXNlIGZ1bmN0aW9ucyB0YWtlIGEgZnVuY3Rpb24gYXMgYW4gYXJndW1lbnQgYW5kIHJldHVybiBhIG5ldyBmdW5jdGlvblxuLy8gYXMgdGhlIHJlc3VsdC4gQWxzbyBrbm93biBhcyBoaWdoZXItb3JkZXIgZnVuY3Rpb25zLlxuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJ0aWFsIH0gZnJvbSAnLi9wYXJ0aWFsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYmluZCB9IGZyb20gJy4vYmluZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGJpbmRBbGwgfSBmcm9tICcuL2JpbmRBbGwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtZW1vaXplIH0gZnJvbSAnLi9tZW1vaXplLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVsYXkgfSBmcm9tICcuL2RlbGF5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVmZXIgfSBmcm9tICcuL2RlZmVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGhyb3R0bGUgfSBmcm9tICcuL3Rocm90dGxlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVib3VuY2UgfSBmcm9tICcuL2RlYm91bmNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd3JhcCB9IGZyb20gJy4vd3JhcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG5lZ2F0ZSB9IGZyb20gJy4vbmVnYXRlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY29tcG9zZSB9IGZyb20gJy4vY29tcG9zZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFmdGVyIH0gZnJvbSAnLi9hZnRlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGJlZm9yZSB9IGZyb20gJy4vYmVmb3JlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb25jZSB9IGZyb20gJy4vb25jZS5qcyc7XG5cbi8vIEZpbmRlcnNcbi8vIC0tLS0tLS1cbi8vIEZ1bmN0aW9ucyB0aGF0IGV4dHJhY3QgKHRoZSBwb3NpdGlvbiBvZikgYSBzaW5nbGUgZWxlbWVudCBmcm9tIGFuIG9iamVjdFxuLy8gb3IgYXJyYXkgYmFzZWQgb24gc29tZSBjcml0ZXJpb24uXG5leHBvcnQgeyBkZWZhdWx0IGFzIGZpbmRLZXkgfSBmcm9tICcuL2ZpbmRLZXkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmaW5kSW5kZXggfSBmcm9tICcuL2ZpbmRJbmRleC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZpbmRMYXN0SW5kZXggfSBmcm9tICcuL2ZpbmRMYXN0SW5kZXguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzb3J0ZWRJbmRleCB9IGZyb20gJy4vc29ydGVkSW5kZXguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpbmRleE9mIH0gZnJvbSAnLi9pbmRleE9mLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbGFzdEluZGV4T2YgfSBmcm9tICcuL2xhc3RJbmRleE9mLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmluZCxcbiAgICAgICAgIGRlZmF1bHQgYXMgZGV0ZWN0IH0gZnJvbSAnLi9maW5kLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmluZFdoZXJlIH0gZnJvbSAnLi9maW5kV2hlcmUuanMnO1xuXG4vLyBDb2xsZWN0aW9uIEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEZ1bmN0aW9ucyB0aGF0IHdvcmsgb24gYW55IGNvbGxlY3Rpb24gb2YgZWxlbWVudHM6IGVpdGhlciBhbiBhcnJheSwgb3Jcbi8vIGFuIG9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMuXG5leHBvcnQgeyBkZWZhdWx0IGFzIGVhY2gsXG4gICAgICAgICBkZWZhdWx0IGFzIGZvckVhY2ggfSBmcm9tICcuL2VhY2guanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtYXAsXG4gICAgICAgICBkZWZhdWx0IGFzIGNvbGxlY3QgfSBmcm9tICcuL21hcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlZHVjZSxcbiAgICAgICAgIGRlZmF1bHQgYXMgZm9sZGwsXG4gICAgICAgICBkZWZhdWx0IGFzIGluamVjdCB9IGZyb20gJy4vcmVkdWNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVkdWNlUmlnaHQsXG4gICAgICAgICBkZWZhdWx0IGFzIGZvbGRyICAgICAgIH0gZnJvbSAnLi9yZWR1Y2VSaWdodC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZpbHRlcixcbiAgICAgICAgIGRlZmF1bHQgYXMgc2VsZWN0IH0gZnJvbSAnLi9maWx0ZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByZWplY3QgfSBmcm9tICcuL3JlamVjdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGV2ZXJ5LFxuICAgICAgICAgZGVmYXVsdCBhcyBhbGwgICB9IGZyb20gJy4vZXZlcnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzb21lLFxuICAgICAgICAgZGVmYXVsdCBhcyBhbnkgIH0gZnJvbSAnLi9zb21lLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY29udGFpbnMsXG4gICAgICAgICBkZWZhdWx0IGFzIGluY2x1ZGVzLFxuICAgICAgICAgZGVmYXVsdCBhcyBpbmNsdWRlICB9IGZyb20gJy4vY29udGFpbnMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpbnZva2UgfSBmcm9tICcuL2ludm9rZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBsdWNrIH0gZnJvbSAnLi9wbHVjay5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdoZXJlIH0gZnJvbSAnLi93aGVyZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1heCB9IGZyb20gJy4vbWF4LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWluIH0gZnJvbSAnLi9taW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzaHVmZmxlIH0gZnJvbSAnLi9zaHVmZmxlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2FtcGxlIH0gZnJvbSAnLi9zYW1wbGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzb3J0QnkgfSBmcm9tICcuL3NvcnRCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGdyb3VwQnkgfSBmcm9tICcuL2dyb3VwQnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpbmRleEJ5IH0gZnJvbSAnLi9pbmRleEJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY291bnRCeSB9IGZyb20gJy4vY291bnRCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnRpdGlvbiB9IGZyb20gJy4vcGFydGl0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdG9BcnJheSB9IGZyb20gJy4vdG9BcnJheS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNpemUgfSBmcm9tICcuL3NpemUuanMnO1xuXG4vLyBgXy5waWNrYCBhbmQgYF8ub21pdGAgYXJlIGFjdHVhbGx5IG9iamVjdCBmdW5jdGlvbnMsIGJ1dCB3ZSBwdXRcbi8vIHRoZW0gaGVyZSBpbiBvcmRlciB0byBjcmVhdGUgYSBtb3JlIG5hdHVyYWwgcmVhZGluZyBvcmRlciBpbiB0aGVcbi8vIG1vbm9saXRoaWMgYnVpbGQgYXMgdGhleSBkZXBlbmQgb24gYF8uY29udGFpbnNgLlxuZXhwb3J0IHsgZGVmYXVsdCBhcyBwaWNrIH0gZnJvbSAnLi9waWNrLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb21pdCB9IGZyb20gJy4vb21pdC5qcyc7XG5cbi8vIEFycmF5IEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tXG4vLyBGdW5jdGlvbnMgdGhhdCBvcGVyYXRlIG9uIGFycmF5cyAoYW5kIGFycmF5LWxpa2VzKSBvbmx5LCBiZWNhdXNlIHRoZXlcdTIwMTlyZVxuLy8gZXhwcmVzc2VkIGluIHRlcm1zIG9mIG9wZXJhdGlvbnMgb24gYW4gb3JkZXJlZCBsaXN0IG9mIHZhbHVlcy5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmlyc3QsXG4gICAgICAgICBkZWZhdWx0IGFzIGhlYWQsXG4gICAgICAgICBkZWZhdWx0IGFzIHRha2UgIH0gZnJvbSAnLi9maXJzdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGluaXRpYWwgfSBmcm9tICcuL2luaXRpYWwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBsYXN0IH0gZnJvbSAnLi9sYXN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVzdCxcbiAgICAgICAgIGRlZmF1bHQgYXMgdGFpbCxcbiAgICAgICAgIGRlZmF1bHQgYXMgZHJvcCB9IGZyb20gJy4vcmVzdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNvbXBhY3QgfSBmcm9tICcuL2NvbXBhY3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmbGF0dGVuIH0gZnJvbSAnLi9mbGF0dGVuLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd2l0aG91dCB9IGZyb20gJy4vd2l0aG91dC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuaXEsXG4gICAgICAgICBkZWZhdWx0IGFzIHVuaXF1ZSB9IGZyb20gJy4vdW5pcS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuaW9uIH0gZnJvbSAnLi91bmlvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGludGVyc2VjdGlvbiB9IGZyb20gJy4vaW50ZXJzZWN0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGlmZmVyZW5jZSB9IGZyb20gJy4vZGlmZmVyZW5jZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuemlwLFxuICAgICAgICAgZGVmYXVsdCBhcyB0cmFuc3Bvc2UgfSBmcm9tICcuL3VuemlwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgemlwIH0gZnJvbSAnLi96aXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvYmplY3QgfSBmcm9tICcuL29iamVjdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJhbmdlIH0gZnJvbSAnLi9yYW5nZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNodW5rIH0gZnJvbSAnLi9jaHVuay5qcyc7XG5cbi8vIE9PUFxuLy8gLS0tXG4vLyBUaGVzZSBtb2R1bGVzIHN1cHBvcnQgdGhlIFwib2JqZWN0LW9yaWVudGVkXCIgY2FsbGluZyBzdHlsZS4gU2VlIGFsc29cbi8vIGB1bmRlcnNjb3JlLmpzYCBhbmQgYGluZGV4LWRlZmF1bHQuanNgLlxuZXhwb3J0IHsgZGVmYXVsdCBhcyBtaXhpbiB9IGZyb20gJy4vbWl4aW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vdW5kZXJzY29yZS1hcnJheS1tZXRob2RzLmpzJztcbiIsICIvLyBDdXJyZW50IHZlcnNpb24uXG5leHBvcnQgdmFyIFZFUlNJT04gPSAnMS4xMy42JztcblxuLy8gRXN0YWJsaXNoIHRoZSByb290IG9iamVjdCwgYHdpbmRvd2AgKGBzZWxmYCkgaW4gdGhlIGJyb3dzZXIsIGBnbG9iYWxgXG4vLyBvbiB0aGUgc2VydmVyLCBvciBgdGhpc2AgaW4gc29tZSB2aXJ0dWFsIG1hY2hpbmVzLiBXZSB1c2UgYHNlbGZgXG4vLyBpbnN0ZWFkIG9mIGB3aW5kb3dgIGZvciBgV2ViV29ya2VyYCBzdXBwb3J0LlxuZXhwb3J0IHZhciByb290ID0gKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYuc2VsZiA9PT0gc2VsZiAmJiBzZWxmKSB8fFxuICAgICAgICAgICh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbC5nbG9iYWwgPT09IGdsb2JhbCAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKSB8fFxuICAgICAgICAgIHt9O1xuXG4vLyBTYXZlIGJ5dGVzIGluIHRoZSBtaW5pZmllZCAoYnV0IG5vdCBnemlwcGVkKSB2ZXJzaW9uOlxuZXhwb3J0IHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5leHBvcnQgdmFyIFN5bWJvbFByb3RvID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2wucHJvdG90eXBlIDogbnVsbDtcblxuLy8gQ3JlYXRlIHF1aWNrIHJlZmVyZW5jZSB2YXJpYWJsZXMgZm9yIHNwZWVkIGFjY2VzcyB0byBjb3JlIHByb3RvdHlwZXMuXG5leHBvcnQgdmFyIHB1c2ggPSBBcnJheVByb3RvLnB1c2gsXG4gICAgc2xpY2UgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgIHRvU3RyaW5nID0gT2JqUHJvdG8udG9TdHJpbmcsXG4gICAgaGFzT3duUHJvcGVydHkgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLy8gTW9kZXJuIGZlYXR1cmUgZGV0ZWN0aW9uLlxuZXhwb3J0IHZhciBzdXBwb3J0c0FycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyxcbiAgICBzdXBwb3J0c0RhdGFWaWV3ID0gdHlwZW9mIERhdGFWaWV3ICE9PSAndW5kZWZpbmVkJztcblxuLy8gQWxsICoqRUNNQVNjcmlwdCA1KyoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZVxuLy8gYXJlIGRlY2xhcmVkIGhlcmUuXG5leHBvcnQgdmFyIG5hdGl2ZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgIG5hdGl2ZUtleXMgPSBPYmplY3Qua2V5cyxcbiAgICBuYXRpdmVDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgIG5hdGl2ZUlzVmlldyA9IHN1cHBvcnRzQXJyYXlCdWZmZXIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xuXG4vLyBDcmVhdGUgcmVmZXJlbmNlcyB0byB0aGVzZSBidWlsdGluIGZ1bmN0aW9ucyBiZWNhdXNlIHdlIG92ZXJyaWRlIHRoZW0uXG5leHBvcnQgdmFyIF9pc05hTiA9IGlzTmFOLFxuICAgIF9pc0Zpbml0ZSA9IGlzRmluaXRlO1xuXG4vLyBLZXlzIGluIElFIDwgOSB0aGF0IHdvbid0IGJlIGl0ZXJhdGVkIGJ5IGBmb3Iga2V5IGluIC4uLmAgYW5kIHRodXMgbWlzc2VkLlxuZXhwb3J0IHZhciBoYXNFbnVtQnVnID0gIXt0b1N0cmluZzogbnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyk7XG5leHBvcnQgdmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ2hhc093blByb3BlcnR5JywgJ3RvTG9jYWxlU3RyaW5nJ107XG5cbi8vIFRoZSBsYXJnZXN0IGludGVnZXIgdGhhdCBjYW4gYmUgcmVwcmVzZW50ZWQgZXhhY3RseS5cbmV4cG9ydCB2YXIgTUFYX0FSUkFZX0lOREVYID0gTWF0aC5wb3coMiwgNTMpIC0gMTtcbiIsICIvLyBTb21lIGZ1bmN0aW9ucyB0YWtlIGEgdmFyaWFibGUgbnVtYmVyIG9mIGFyZ3VtZW50cywgb3IgYSBmZXcgZXhwZWN0ZWRcbi8vIGFyZ3VtZW50cyBhdCB0aGUgYmVnaW5uaW5nIGFuZCB0aGVuIGEgdmFyaWFibGUgbnVtYmVyIG9mIHZhbHVlcyB0byBvcGVyYXRlXG4vLyBvbi4gVGhpcyBoZWxwZXIgYWNjdW11bGF0ZXMgYWxsIHJlbWFpbmluZyBhcmd1bWVudHMgcGFzdCB0aGUgZnVuY3Rpb25cdTIwMTlzXG4vLyBhcmd1bWVudCBsZW5ndGggKG9yIGFuIGV4cGxpY2l0IGBzdGFydEluZGV4YCksIGludG8gYW4gYXJyYXkgdGhhdCBiZWNvbWVzXG4vLyB0aGUgbGFzdCBhcmd1bWVudC4gU2ltaWxhciB0byBFUzZcdTIwMTlzIFwicmVzdCBwYXJhbWV0ZXJcIi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc3RBcmd1bWVudHMoZnVuYywgc3RhcnRJbmRleCkge1xuICBzdGFydEluZGV4ID0gc3RhcnRJbmRleCA9PSBudWxsID8gZnVuYy5sZW5ndGggLSAxIDogK3N0YXJ0SW5kZXg7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gTWF0aC5tYXgoYXJndW1lbnRzLmxlbmd0aCAtIHN0YXJ0SW5kZXgsIDApLFxuICAgICAgICByZXN0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgaW5kZXggPSAwO1xuICAgIGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXggKyBzdGFydEluZGV4XTtcbiAgICB9XG4gICAgc3dpdGNoIChzdGFydEluZGV4KSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpcywgcmVzdCk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpcywgYXJndW1lbnRzWzBdLCByZXN0KTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzLCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgcmVzdCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gQXJyYXkoc3RhcnRJbmRleCArIDEpO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHN0YXJ0SW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICB9XG4gICAgYXJnc1tzdGFydEluZGV4XSA9IHJlc3Q7XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gIH07XG59XG4iLCAiLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqO1xuICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmopO1xufVxuIiwgIi8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTnVsbChvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gbnVsbDtcbn1cbiIsICIvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIHVuZGVmaW5lZD9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKG9iaikge1xuICByZXR1cm4gb2JqID09PSB2b2lkIDA7XG59XG4iLCAiaW1wb3J0IHsgdG9TdHJpbmcgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5cbi8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuP1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNCb29sZWFuKG9iaikge1xuICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7XG59XG4iLCAiLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNFbGVtZW50KG9iaikge1xuICByZXR1cm4gISEob2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMSk7XG59XG4iLCAiaW1wb3J0IHsgdG9TdHJpbmcgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5cbi8vIEludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGB0b1N0cmluZ2AtYmFzZWQgdHlwZSB0ZXN0ZXIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0YWdUZXN0ZXIobmFtZSkge1xuICB2YXIgdGFnID0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSB0YWc7XG4gIH07XG59XG4iLCAiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB0YWdUZXN0ZXIoJ1N0cmluZycpO1xuIiwgImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgdGFnVGVzdGVyKCdOdW1iZXInKTtcbiIsICJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHRhZ1Rlc3RlcignRGF0ZScpO1xuIiwgImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgdGFnVGVzdGVyKCdSZWdFeHAnKTtcbiIsICJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHRhZ1Rlc3RlcignRXJyb3InKTtcbiIsICJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHRhZ1Rlc3RlcignU3ltYm9sJyk7XG4iLCAiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB0YWdUZXN0ZXIoJ0FycmF5QnVmZmVyJyk7XG4iLCAiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuaW1wb3J0IHsgcm9vdCB9IGZyb20gJy4vX3NldHVwLmpzJztcblxudmFyIGlzRnVuY3Rpb24gPSB0YWdUZXN0ZXIoJ0Z1bmN0aW9uJyk7XG5cbi8vIE9wdGltaXplIGBpc0Z1bmN0aW9uYCBpZiBhcHByb3ByaWF0ZS4gV29yayBhcm91bmQgc29tZSBgdHlwZW9mYCBidWdzIGluIG9sZFxuLy8gdjgsIElFIDExICgjMTYyMSksIFNhZmFyaSA4ICgjMTkyOSksIGFuZCBQaGFudG9tSlMgKCMyMjM2KS5cbnZhciBub2RlbGlzdCA9IHJvb3QuZG9jdW1lbnQgJiYgcm9vdC5kb2N1bWVudC5jaGlsZE5vZGVzO1xuaWYgKHR5cGVvZiAvLi8gIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSW50OEFycmF5ICE9ICdvYmplY3QnICYmIHR5cGVvZiBub2RlbGlzdCAhPSAnZnVuY3Rpb24nKSB7XG4gIGlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwgImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgdGFnVGVzdGVyKCdPYmplY3QnKTtcbiIsICJpbXBvcnQgeyBzdXBwb3J0c0RhdGFWaWV3IH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGhhc09iamVjdFRhZyBmcm9tICcuL19oYXNPYmplY3RUYWcuanMnO1xuXG4vLyBJbiBJRSAxMCAtIEVkZ2UgMTMsIGBEYXRhVmlld2AgaGFzIHN0cmluZyB0YWcgYCdbb2JqZWN0IE9iamVjdF0nYC5cbi8vIEluIElFIDExLCB0aGUgbW9zdCBjb21tb24gYW1vbmcgdGhlbSwgdGhpcyBwcm9ibGVtIGFsc28gYXBwbGllcyB0b1xuLy8gYE1hcGAsIGBXZWFrTWFwYCBhbmQgYFNldGAuXG5leHBvcnQgdmFyIGhhc1N0cmluZ1RhZ0J1ZyA9IChcbiAgICAgIHN1cHBvcnRzRGF0YVZpZXcgJiYgaGFzT2JqZWN0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoOCkpKVxuICAgICksXG4gICAgaXNJRTExID0gKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnICYmIGhhc09iamVjdFRhZyhuZXcgTWFwKSk7XG4iLCAiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc0FycmF5QnVmZmVyIGZyb20gJy4vaXNBcnJheUJ1ZmZlci5qcyc7XG5pbXBvcnQgeyBoYXNTdHJpbmdUYWdCdWcgfSBmcm9tICcuL19zdHJpbmdUYWdCdWcuanMnO1xuXG52YXIgaXNEYXRhVmlldyA9IHRhZ1Rlc3RlcignRGF0YVZpZXcnKTtcblxuLy8gSW4gSUUgMTAgLSBFZGdlIDEzLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGhldXJpc3RpY1xuLy8gdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYW4gb2JqZWN0IGlzIGEgYERhdGFWaWV3YC5cbmZ1bmN0aW9uIGllMTBJc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgaXNGdW5jdGlvbihvYmouZ2V0SW50OCkgJiYgaXNBcnJheUJ1ZmZlcihvYmouYnVmZmVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGhhc1N0cmluZ1RhZ0J1ZyA/IGllMTBJc0RhdGFWaWV3IDogaXNEYXRhVmlldyk7XG4iLCAiaW1wb3J0IHsgbmF0aXZlSXNBcnJheSB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcblxuLy8gSXMgYSBnaXZlbiB2YWx1ZSBhbiBhcnJheT9cbi8vIERlbGVnYXRlcyB0byBFQ01BNSdzIG5hdGl2ZSBgQXJyYXkuaXNBcnJheWAuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVJc0FycmF5IHx8IHRhZ1Rlc3RlcignQXJyYXknKTtcbiIsICJpbXBvcnQgeyBoYXNPd25Qcm9wZXJ0eSB9IGZyb20gJy4vX3NldHVwLmpzJztcblxuLy8gSW50ZXJuYWwgZnVuY3Rpb24gdG8gY2hlY2sgd2hldGhlciBga2V5YCBpcyBhbiBvd24gcHJvcGVydHkgbmFtZSBvZiBgb2JqYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhcyhvYmosIGtleSkge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG4iLCAiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuaW1wb3J0IGhhcyBmcm9tICcuL19oYXMuanMnO1xuXG52YXIgaXNBcmd1bWVudHMgPSB0YWdUZXN0ZXIoJ0FyZ3VtZW50cycpO1xuXG4vLyBEZWZpbmUgYSBmYWxsYmFjayB2ZXJzaW9uIG9mIHRoZSBtZXRob2QgaW4gYnJvd3NlcnMgKGFoZW0sIElFIDwgOSksIHdoZXJlXG4vLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuKGZ1bmN0aW9uKCkge1xuICBpZiAoIWlzQXJndW1lbnRzKGFyZ3VtZW50cykpIHtcbiAgICBpc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIGhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBpc0FyZ3VtZW50cztcbiIsICJpbXBvcnQgeyBfaXNGaW5pdGUgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8vIElzIGEgZ2l2ZW4gb2JqZWN0IGEgZmluaXRlIG51bWJlcj9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRmluaXRlKG9iaikge1xuICByZXR1cm4gIWlzU3ltYm9sKG9iaikgJiYgX2lzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7XG59XG4iLCAiaW1wb3J0IHsgX2lzTmFOIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGlzTnVtYmVyIGZyb20gJy4vaXNOdW1iZXIuanMnO1xuXG4vLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc05hTihvYmopIHtcbiAgcmV0dXJuIGlzTnVtYmVyKG9iaikgJiYgX2lzTmFOKG9iaik7XG59XG4iLCAiLy8gUHJlZGljYXRlLWdlbmVyYXRpbmcgZnVuY3Rpb24uIE9mdGVuIHVzZWZ1bCBvdXRzaWRlIG9mIFVuZGVyc2NvcmUuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuIiwgImltcG9ydCB7IE1BWF9BUlJBWV9JTkRFWCB9IGZyb20gJy4vX3NldHVwLmpzJztcblxuLy8gQ29tbW9uIGludGVybmFsIGxvZ2ljIGZvciBgaXNBcnJheUxpa2VgIGFuZCBgaXNCdWZmZXJMaWtlYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrKGdldFNpemVQcm9wZXJ0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgIHZhciBzaXplUHJvcGVydHkgPSBnZXRTaXplUHJvcGVydHkoY29sbGVjdGlvbik7XG4gICAgcmV0dXJuIHR5cGVvZiBzaXplUHJvcGVydHkgPT0gJ251bWJlcicgJiYgc2l6ZVByb3BlcnR5ID49IDAgJiYgc2l6ZVByb3BlcnR5IDw9IE1BWF9BUlJBWV9JTkRFWDtcbiAgfVxufVxuIiwgIi8vIEludGVybmFsIGhlbHBlciB0byBnZW5lcmF0ZSBhIGZ1bmN0aW9uIHRvIG9idGFpbiBwcm9wZXJ0eSBga2V5YCBmcm9tIGBvYmpgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd1Byb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PSBudWxsID8gdm9pZCAwIDogb2JqW2tleV07XG4gIH07XG59XG4iLCAiaW1wb3J0IHNoYWxsb3dQcm9wZXJ0eSBmcm9tICcuL19zaGFsbG93UHJvcGVydHkuanMnO1xuXG4vLyBJbnRlcm5hbCBoZWxwZXIgdG8gb2J0YWluIHRoZSBgYnl0ZUxlbmd0aGAgcHJvcGVydHkgb2YgYW4gb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgc2hhbGxvd1Byb3BlcnR5KCdieXRlTGVuZ3RoJyk7XG4iLCAiaW1wb3J0IGNyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrIGZyb20gJy4vX2NyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrLmpzJztcbmltcG9ydCBnZXRCeXRlTGVuZ3RoIGZyb20gJy4vX2dldEJ5dGVMZW5ndGguanMnO1xuXG4vLyBJbnRlcm5hbCBoZWxwZXIgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgd2Ugc2hvdWxkIHNwZW5kIGV4dGVuc2l2ZSBjaGVja3MgYWdhaW5zdFxuLy8gYEFycmF5QnVmZmVyYCBldCBhbC5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrKGdldEJ5dGVMZW5ndGgpO1xuIiwgImltcG9ydCB7IHN1cHBvcnRzQXJyYXlCdWZmZXIsIG5hdGl2ZUlzVmlldywgdG9TdHJpbmcgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5pbXBvcnQgaXNEYXRhVmlldyBmcm9tICcuL2lzRGF0YVZpZXcuanMnO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gJy4vY29uc3RhbnQuanMnO1xuaW1wb3J0IGlzQnVmZmVyTGlrZSBmcm9tICcuL19pc0J1ZmZlckxpa2UuanMnO1xuXG4vLyBJcyBhIGdpdmVuIHZhbHVlIGEgdHlwZWQgYXJyYXk/XG52YXIgdHlwZWRBcnJheVBhdHRlcm4gPSAvXFxbb2JqZWN0ICgoSXxVaSludCg4fDE2fDMyKXxGbG9hdCgzMnw2NCl8VWludDhDbGFtcGVkfEJpZyhJfFVpKW50NjQpQXJyYXlcXF0vO1xuZnVuY3Rpb24gaXNUeXBlZEFycmF5KG9iaikge1xuICAvLyBgQXJyYXlCdWZmZXIuaXNWaWV3YCBpcyB0aGUgbW9zdCBmdXR1cmUtcHJvb2YsIHNvIHVzZSBpdCB3aGVuIGF2YWlsYWJsZS5cbiAgLy8gT3RoZXJ3aXNlLCBmYWxsIGJhY2sgb24gdGhlIGFib3ZlIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgcmV0dXJuIG5hdGl2ZUlzVmlldyA/IChuYXRpdmVJc1ZpZXcob2JqKSAmJiAhaXNEYXRhVmlldyhvYmopKSA6XG4gICAgICAgICAgICAgICAgaXNCdWZmZXJMaWtlKG9iaikgJiYgdHlwZWRBcnJheVBhdHRlcm4udGVzdCh0b1N0cmluZy5jYWxsKG9iaikpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdXBwb3J0c0FycmF5QnVmZmVyID8gaXNUeXBlZEFycmF5IDogY29uc3RhbnQoZmFsc2UpO1xuIiwgImltcG9ydCBzaGFsbG93UHJvcGVydHkgZnJvbSAnLi9fc2hhbGxvd1Byb3BlcnR5LmpzJztcblxuLy8gSW50ZXJuYWwgaGVscGVyIHRvIG9idGFpbiB0aGUgYGxlbmd0aGAgcHJvcGVydHkgb2YgYW4gb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgc2hhbGxvd1Byb3BlcnR5KCdsZW5ndGgnKTtcbiIsICJpbXBvcnQgeyBub25FbnVtZXJhYmxlUHJvcHMsIE9ialByb3RvIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBoYXMgZnJvbSAnLi9faGFzLmpzJztcblxuLy8gSW50ZXJuYWwgaGVscGVyIHRvIGNyZWF0ZSBhIHNpbXBsZSBsb29rdXAgc3RydWN0dXJlLlxuLy8gYGNvbGxlY3ROb25FbnVtUHJvcHNgIHVzZWQgdG8gZGVwZW5kIG9uIGBfLmNvbnRhaW5zYCwgYnV0IHRoaXMgbGVkIHRvXG4vLyBjaXJjdWxhciBpbXBvcnRzLiBgZW11bGF0ZWRTZXRgIGlzIGEgb25lLW9mZiBzb2x1dGlvbiB0aGF0IG9ubHkgd29ya3MgZm9yXG4vLyBhcnJheXMgb2Ygc3RyaW5ncy5cbmZ1bmN0aW9uIGVtdWxhdGVkU2V0KGtleXMpIHtcbiAgdmFyIGhhc2ggPSB7fTtcbiAgZm9yICh2YXIgbCA9IGtleXMubGVuZ3RoLCBpID0gMDsgaSA8IGw7ICsraSkgaGFzaFtrZXlzW2ldXSA9IHRydWU7XG4gIHJldHVybiB7XG4gICAgY29udGFpbnM6IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaGFzaFtrZXldID09PSB0cnVlOyB9LFxuICAgIHB1c2g6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgaGFzaFtrZXldID0gdHJ1ZTtcbiAgICAgIHJldHVybiBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gIH07XG59XG5cbi8vIEludGVybmFsIGhlbHBlci4gQ2hlY2tzIGBrZXlzYCBmb3IgdGhlIHByZXNlbmNlIG9mIGtleXMgaW4gSUUgPCA5IHRoYXQgd29uJ3Rcbi8vIGJlIGl0ZXJhdGVkIGJ5IGBmb3Iga2V5IGluIC4uLmAgYW5kIHRodXMgbWlzc2VkLiBFeHRlbmRzIGBrZXlzYCBpbiBwbGFjZSBpZlxuLy8gbmVlZGVkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpIHtcbiAga2V5cyA9IGVtdWxhdGVkU2V0KGtleXMpO1xuICB2YXIgbm9uRW51bUlkeCA9IG5vbkVudW1lcmFibGVQcm9wcy5sZW5ndGg7XG4gIHZhciBjb25zdHJ1Y3RvciA9IG9iai5jb25zdHJ1Y3RvcjtcbiAgdmFyIHByb3RvID0gKGlzRnVuY3Rpb24oY29uc3RydWN0b3IpICYmIGNvbnN0cnVjdG9yLnByb3RvdHlwZSkgfHwgT2JqUHJvdG87XG5cbiAgLy8gQ29uc3RydWN0b3IgaXMgYSBzcGVjaWFsIGNhc2UuXG4gIHZhciBwcm9wID0gJ2NvbnN0cnVjdG9yJztcbiAgaWYgKGhhcyhvYmosIHByb3ApICYmICFrZXlzLmNvbnRhaW5zKHByb3ApKSBrZXlzLnB1c2gocHJvcCk7XG5cbiAgd2hpbGUgKG5vbkVudW1JZHgtLSkge1xuICAgIHByb3AgPSBub25FbnVtZXJhYmxlUHJvcHNbbm9uRW51bUlkeF07XG4gICAgaWYgKHByb3AgaW4gb2JqICYmIG9ialtwcm9wXSAhPT0gcHJvdG9bcHJvcF0gJiYgIWtleXMuY29udGFpbnMocHJvcCkpIHtcbiAgICAgIGtleXMucHVzaChwcm9wKTtcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgeyBuYXRpdmVLZXlzLCBoYXNFbnVtQnVnIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGhhcyBmcm9tICcuL19oYXMuanMnO1xuaW1wb3J0IGNvbGxlY3ROb25FbnVtUHJvcHMgZnJvbSAnLi9fY29sbGVjdE5vbkVudW1Qcm9wcy5qcyc7XG5cbi8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbi8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2AuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZXlzKG9iaikge1xuICBpZiAoIWlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgaWYgKG5hdGl2ZUtleXMpIHJldHVybiBuYXRpdmVLZXlzKG9iaik7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChoYXMob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgLy8gQWhlbSwgSUUgPCA5LlxuICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICByZXR1cm4ga2V5cztcbn1cbiIsICJpbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3RyaW5nIGZyb20gJy4vaXNTdHJpbmcuanMnO1xuaW1wb3J0IGlzQXJndW1lbnRzIGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gSXMgYSBnaXZlbiBhcnJheSwgc3RyaW5nLCBvciBvYmplY3QgZW1wdHk/XG4vLyBBbiBcImVtcHR5XCIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgLy8gU2tpcCB0aGUgbW9yZSBleHBlbnNpdmUgYHRvU3RyaW5nYC1iYXNlZCB0eXBlIGNoZWNrcyBpZiBgb2JqYCBoYXMgbm9cbiAgLy8gYC5sZW5ndGhgLlxuICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKG9iaik7XG4gIGlmICh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInICYmIChcbiAgICBpc0FycmF5KG9iaikgfHwgaXNTdHJpbmcob2JqKSB8fCBpc0FyZ3VtZW50cyhvYmopXG4gICkpIHJldHVybiBsZW5ndGggPT09IDA7XG4gIHJldHVybiBnZXRMZW5ndGgoa2V5cyhvYmopKSA9PT0gMDtcbn1cbiIsICJpbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBSZXR1cm5zIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZiBga2V5OnZhbHVlYCBwYWlycy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBhdHRycykge1xuICB2YXIgX2tleXMgPSBrZXlzKGF0dHJzKSwgbGVuZ3RoID0gX2tleXMubGVuZ3RoO1xuICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAhbGVuZ3RoO1xuICB2YXIgb2JqID0gT2JqZWN0KG9iamVjdCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gX2tleXNbaV07XG4gICAgaWYgKGF0dHJzW2tleV0gIT09IG9ialtrZXldIHx8ICEoa2V5IGluIG9iaikpIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbiIsICJpbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG4vLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdCBjYW5cbi8vIGJlIHVzZWQgT08tc3R5bGUuIFRoaXMgd3JhcHBlciBob2xkcyBhbHRlcmVkIHZlcnNpb25zIG9mIGFsbCBmdW5jdGlvbnMgYWRkZWRcbi8vIHRocm91Z2ggYF8ubWl4aW5gLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfKG9iaikge1xuICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgdGhpcy5fd3JhcHBlZCA9IG9iajtcbn1cblxuXy5WRVJTSU9OID0gVkVSU0lPTjtcblxuLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG5fLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fd3JhcHBlZDtcbn07XG5cbi8vIFByb3ZpZGUgdW53cmFwcGluZyBwcm94aWVzIGZvciBzb21lIG1ldGhvZHMgdXNlZCBpbiBlbmdpbmUgb3BlcmF0aW9uc1xuLy8gc3VjaCBhcyBhcml0aG1ldGljIGFuZCBKU09OIHN0cmluZ2lmaWNhdGlvbi5cbl8ucHJvdG90eXBlLnZhbHVlT2YgPSBfLnByb3RvdHlwZS50b0pTT04gPSBfLnByb3RvdHlwZS52YWx1ZTtcblxuXy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFN0cmluZyh0aGlzLl93cmFwcGVkKTtcbn07XG4iLCAiaW1wb3J0IGdldEJ5dGVMZW5ndGggZnJvbSAnLi9fZ2V0Qnl0ZUxlbmd0aC5qcyc7XG5cbi8vIEludGVybmFsIGZ1bmN0aW9uIHRvIHdyYXAgb3Igc2hhbGxvdy1jb3B5IGFuIEFycmF5QnVmZmVyLFxuLy8gdHlwZWQgYXJyYXkgb3IgRGF0YVZpZXcgdG8gYSBuZXcgdmlldywgcmV1c2luZyB0aGUgYnVmZmVyLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9CdWZmZXJWaWV3KGJ1ZmZlclNvdXJjZSkge1xuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoXG4gICAgYnVmZmVyU291cmNlLmJ1ZmZlciB8fCBidWZmZXJTb3VyY2UsXG4gICAgYnVmZmVyU291cmNlLmJ5dGVPZmZzZXQgfHwgMCxcbiAgICBnZXRCeXRlTGVuZ3RoKGJ1ZmZlclNvdXJjZSlcbiAgKTtcbn1cbiIsICJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuaW1wb3J0IHsgdG9TdHJpbmcsIFN5bWJvbFByb3RvIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGdldEJ5dGVMZW5ndGggZnJvbSAnLi9fZ2V0Qnl0ZUxlbmd0aC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBoYXNTdHJpbmdUYWdCdWcgfSAgZnJvbSAnLi9fc3RyaW5nVGFnQnVnLmpzJztcbmltcG9ydCBpc0RhdGFWaWV3IGZyb20gJy4vaXNEYXRhVmlldy5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuaW1wb3J0IGhhcyBmcm9tICcuL19oYXMuanMnO1xuaW1wb3J0IHRvQnVmZmVyVmlldyBmcm9tICcuL190b0J1ZmZlclZpZXcuanMnO1xuXG4vLyBXZSB1c2UgdGhpcyBzdHJpbmcgdHdpY2UsIHNvIGdpdmUgaXQgYSBuYW1lIGZvciBtaW5pZmljYXRpb24uXG52YXIgdGFnRGF0YVZpZXcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYF8uaXNFcXVhbGAuXG5mdW5jdGlvbiBlcShhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gIC8vIFNlZSB0aGUgW0hhcm1vbnkgYGVnYWxgIHByb3Bvc2FsXShodHRwczovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cbiAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYjtcbiAgLy8gYG51bGxgIG9yIGB1bmRlZmluZWRgIG9ubHkgZXF1YWwgdG8gaXRzZWxmIChzdHJpY3QgY29tcGFyaXNvbikuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gIGlmIChhICE9PSBhKSByZXR1cm4gYiAhPT0gYjtcbiAgLy8gRXhoYXVzdCBwcmltaXRpdmUgY2hlY2tzXG4gIHZhciB0eXBlID0gdHlwZW9mIGE7XG4gIGlmICh0eXBlICE9PSAnZnVuY3Rpb24nICYmIHR5cGUgIT09ICdvYmplY3QnICYmIHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBkZWVwRXEoYSwgYiwgYVN0YWNrLCBiU3RhY2spO1xufVxuXG4vLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYF8uaXNFcXVhbGAuXG5mdW5jdGlvbiBkZWVwRXEoYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7XG4gIGlmIChiIGluc3RhbmNlb2YgXykgYiA9IGIuX3dyYXBwZWQ7XG4gIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXG4gIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xuICBpZiAoY2xhc3NOYW1lICE9PSB0b1N0cmluZy5jYWxsKGIpKSByZXR1cm4gZmFsc2U7XG4gIC8vIFdvcmsgYXJvdW5kIGEgYnVnIGluIElFIDEwIC0gRWRnZSAxMy5cbiAgaWYgKGhhc1N0cmluZ1RhZ0J1ZyAmJiBjbGFzc05hbWUgPT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgaXNEYXRhVmlldyhhKSkge1xuICAgIGlmICghaXNEYXRhVmlldyhiKSkgcmV0dXJuIGZhbHNlO1xuICAgIGNsYXNzTmFtZSA9IHRhZ0RhdGFWaWV3O1xuICB9XG4gIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgLy8gVGhlc2UgdHlwZXMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxuICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6XG4gICAgICAvLyBSZWdFeHBzIGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MgZm9yIGNvbXBhcmlzb24gKE5vdGU6ICcnICsgL2EvaSA9PT0gJy9hL2knKVxuICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAvLyBQcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCB3cmFwcGVycyBhcmUgZXF1aXZhbGVudDsgdGh1cywgYFwiNVwiYCBpc1xuICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZyhcIjVcIilgLlxuICAgICAgcmV0dXJuICcnICsgYSA9PT0gJycgKyBiO1xuICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU4uXG4gICAgICBpZiAoK2EgIT09ICthKSByZXR1cm4gK2IgIT09ICtiO1xuICAgICAgLy8gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvciBvdGhlciBudW1lcmljIHZhbHVlcy5cbiAgICAgIHJldHVybiArYSA9PT0gMCA/IDEgLyArYSA9PT0gMSAvIGIgOiArYSA9PT0gK2I7XG4gICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuXG4gICAgICByZXR1cm4gK2EgPT09ICtiO1xuICAgIGNhc2UgJ1tvYmplY3QgU3ltYm9sXSc6XG4gICAgICByZXR1cm4gU3ltYm9sUHJvdG8udmFsdWVPZi5jYWxsKGEpID09PSBTeW1ib2xQcm90by52YWx1ZU9mLmNhbGwoYik7XG4gICAgY2FzZSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nOlxuICAgIGNhc2UgdGFnRGF0YVZpZXc6XG4gICAgICAvLyBDb2VyY2UgdG8gdHlwZWQgYXJyYXkgc28gd2UgY2FuIGZhbGwgdGhyb3VnaC5cbiAgICAgIHJldHVybiBkZWVwRXEodG9CdWZmZXJWaWV3KGEpLCB0b0J1ZmZlclZpZXcoYiksIGFTdGFjaywgYlN0YWNrKTtcbiAgfVxuXG4gIHZhciBhcmVBcnJheXMgPSBjbGFzc05hbWUgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIGlmICghYXJlQXJyYXlzICYmIGlzVHlwZWRBcnJheShhKSkge1xuICAgICAgdmFyIGJ5dGVMZW5ndGggPSBnZXRCeXRlTGVuZ3RoKGEpO1xuICAgICAgaWYgKGJ5dGVMZW5ndGggIT09IGdldEJ5dGVMZW5ndGgoYikpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChhLmJ1ZmZlciA9PT0gYi5idWZmZXIgJiYgYS5ieXRlT2Zmc2V0ID09PSBiLmJ5dGVPZmZzZXQpIHJldHVybiB0cnVlO1xuICAgICAgYXJlQXJyYXlzID0gdHJ1ZTtcbiAgfVxuICBpZiAoIWFyZUFycmF5cykge1xuICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXG4gICAgLy8gZnJvbSBkaWZmZXJlbnQgZnJhbWVzIGFyZS5cbiAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7XG4gICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKGlzRnVuY3Rpb24oYUN0b3IpICYmIGFDdG9yIGluc3RhbmNlb2YgYUN0b3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNGdW5jdGlvbihiQ3RvcikgJiYgYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICgnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljXG4gIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuXG4gIC8vIEluaXRpYWxpemluZyBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgLy8gSXQncyBkb25lIGhlcmUgc2luY2Ugd2Ugb25seSBuZWVkIHRoZW0gZm9yIG9iamVjdHMgYW5kIGFycmF5cyBjb21wYXJpc29uLlxuICBhU3RhY2sgPSBhU3RhY2sgfHwgW107XG4gIGJTdGFjayA9IGJTdGFjayB8fCBbXTtcbiAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZlxuICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy5cbiAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgfVxuXG4gIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgYVN0YWNrLnB1c2goYSk7XG4gIGJTdGFjay5wdXNoKGIpO1xuXG4gIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICBpZiAoYXJlQXJyYXlzKSB7XG4gICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKCFlcShhW2xlbmd0aF0sIGJbbGVuZ3RoXSwgYVN0YWNrLCBiU3RhY2spKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgIHZhciBfa2V5cyA9IGtleXMoYSksIGtleTtcbiAgICBsZW5ndGggPSBfa2V5cy5sZW5ndGg7XG4gICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgIGlmIChrZXlzKGIpLmxlbmd0aCAhPT0gbGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAvLyBEZWVwIGNvbXBhcmUgZWFjaCBtZW1iZXJcbiAgICAgIGtleSA9IF9rZXlzW2xlbmd0aF07XG4gICAgICBpZiAoIShoYXMoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgYVN0YWNrLnBvcCgpO1xuICBiU3RhY2sucG9wKCk7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRXF1YWwoYSwgYikge1xuICByZXR1cm4gZXEoYSwgYik7XG59XG4iLCAiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHsgaGFzRW51bUJ1ZyB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBjb2xsZWN0Tm9uRW51bVByb3BzIGZyb20gJy4vX2NvbGxlY3ROb25FbnVtUHJvcHMuanMnO1xuXG4vLyBSZXRyaWV2ZSBhbGwgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWxsS2V5cyhvYmopIHtcbiAgaWYgKCFpc09iamVjdChvYmopKSByZXR1cm4gW107XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICAvLyBBaGVtLCBJRSA8IDkuXG4gIGlmIChoYXNFbnVtQnVnKSBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cyk7XG4gIHJldHVybiBrZXlzO1xufVxuIiwgImltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgYWxsS2V5cyBmcm9tICcuL2FsbEtleXMuanMnO1xuXG4vLyBTaW5jZSB0aGUgcmVndWxhciBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgdHlwZSB0ZXN0cyBkb24ndCB3b3JrIGZvclxuLy8gc29tZSB0eXBlcyBpbiBJRSAxMSwgd2UgdXNlIGEgZmluZ2VycHJpbnRpbmcgaGV1cmlzdGljIGluc3RlYWQsIGJhc2VkXG4vLyBvbiB0aGUgbWV0aG9kcy4gSXQncyBub3QgZ3JlYXQsIGJ1dCBpdCdzIHRoZSBiZXN0IHdlIGdvdC5cbi8vIFRoZSBmaW5nZXJwcmludCBtZXRob2QgbGlzdHMgYXJlIGRlZmluZWQgYmVsb3cuXG5leHBvcnQgZnVuY3Rpb24gaWUxMWZpbmdlcnByaW50KG1ldGhvZHMpIHtcbiAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChtZXRob2RzKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGBNYXBgLCBgV2Vha01hcGAgYW5kIGBTZXRgIGhhdmUgbm8gZW51bWVyYWJsZSBrZXlzLlxuICAgIHZhciBrZXlzID0gYWxsS2V5cyhvYmopO1xuICAgIGlmIChnZXRMZW5ndGgoa2V5cykpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWlzRnVuY3Rpb24ob2JqW21ldGhvZHNbaV1dKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBhcmUgdGVzdGluZyBhZ2FpbnN0IGBXZWFrTWFwYCwgd2UgbmVlZCB0byBlbnN1cmUgdGhhdFxuICAgIC8vIGBvYmpgIGRvZXNuJ3QgaGF2ZSBhIGBmb3JFYWNoYCBtZXRob2QgaW4gb3JkZXIgdG8gZGlzdGluZ3Vpc2hcbiAgICAvLyBpdCBmcm9tIGEgcmVndWxhciBgTWFwYC5cbiAgICByZXR1cm4gbWV0aG9kcyAhPT0gd2Vha01hcE1ldGhvZHMgfHwgIWlzRnVuY3Rpb24ob2JqW2ZvckVhY2hOYW1lXSk7XG4gIH07XG59XG5cbi8vIEluIHRoZSBpbnRlcmVzdCBvZiBjb21wYWN0IG1pbmlmaWNhdGlvbiwgd2Ugd3JpdGVcbi8vIGVhY2ggc3RyaW5nIGluIHRoZSBmaW5nZXJwcmludHMgb25seSBvbmNlLlxudmFyIGZvckVhY2hOYW1lID0gJ2ZvckVhY2gnLFxuICAgIGhhc05hbWUgPSAnaGFzJyxcbiAgICBjb21tb25Jbml0ID0gWydjbGVhcicsICdkZWxldGUnXSxcbiAgICBtYXBUYWlsID0gWydnZXQnLCBoYXNOYW1lLCAnc2V0J107XG5cbi8vIGBNYXBgLCBgV2Vha01hcGAgYW5kIGBTZXRgIGVhY2ggaGF2ZSBzbGlnaHRseSBkaWZmZXJlbnRcbi8vIGNvbWJpbmF0aW9ucyBvZiB0aGUgYWJvdmUgc3VibGlzdHMuXG5leHBvcnQgdmFyIG1hcE1ldGhvZHMgPSBjb21tb25Jbml0LmNvbmNhdChmb3JFYWNoTmFtZSwgbWFwVGFpbCksXG4gICAgd2Vha01hcE1ldGhvZHMgPSBjb21tb25Jbml0LmNvbmNhdChtYXBUYWlsKSxcbiAgICBzZXRNZXRob2RzID0gWydhZGQnXS5jb25jYXQoY29tbW9uSW5pdCwgZm9yRWFjaE5hbWUsIGhhc05hbWUpO1xuIiwgImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcbmltcG9ydCB7IGlzSUUxMSB9IGZyb20gJy4vX3N0cmluZ1RhZ0J1Zy5qcyc7XG5pbXBvcnQgeyBpZTExZmluZ2VycHJpbnQsIG1hcE1ldGhvZHMgfSAgZnJvbSAnLi9fbWV0aG9kRmluZ2VycHJpbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBpc0lFMTEgPyBpZTExZmluZ2VycHJpbnQobWFwTWV0aG9kcykgOiB0YWdUZXN0ZXIoJ01hcCcpO1xuIiwgImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcbmltcG9ydCB7IGlzSUUxMSB9IGZyb20gJy4vX3N0cmluZ1RhZ0J1Zy5qcyc7XG5pbXBvcnQgeyBpZTExZmluZ2VycHJpbnQsIHdlYWtNYXBNZXRob2RzIH0gIGZyb20gJy4vX21ldGhvZEZpbmdlcnByaW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgaXNJRTExID8gaWUxMWZpbmdlcnByaW50KHdlYWtNYXBNZXRob2RzKSA6IHRhZ1Rlc3RlcignV2Vha01hcCcpO1xuIiwgImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcbmltcG9ydCB7IGlzSUUxMSB9IGZyb20gJy4vX3N0cmluZ1RhZ0J1Zy5qcyc7XG5pbXBvcnQgeyBpZTExZmluZ2VycHJpbnQsIHNldE1ldGhvZHMgfSAgZnJvbSAnLi9fbWV0aG9kRmluZ2VycHJpbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBpc0lFMTEgPyBpZTExZmluZ2VycHJpbnQoc2V0TWV0aG9kcykgOiB0YWdUZXN0ZXIoJ1NldCcpO1xuIiwgImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgdGFnVGVzdGVyKCdXZWFrU2V0Jyk7XG4iLCAiaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsdWVzKG9iaikge1xuICB2YXIgX2tleXMgPSBrZXlzKG9iaik7XG4gIHZhciBsZW5ndGggPSBfa2V5cy5sZW5ndGg7XG4gIHZhciB2YWx1ZXMgPSBBcnJheShsZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFsdWVzW2ldID0gb2JqW19rZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gdmFsdWVzO1xufVxuIiwgImltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8vIENvbnZlcnQgYW4gb2JqZWN0IGludG8gYSBsaXN0IG9mIGBba2V5LCB2YWx1ZV1gIHBhaXJzLlxuLy8gVGhlIG9wcG9zaXRlIG9mIGBfLm9iamVjdGAgd2l0aCBvbmUgYXJndW1lbnQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYWlycyhvYmopIHtcbiAgdmFyIF9rZXlzID0ga2V5cyhvYmopO1xuICB2YXIgbGVuZ3RoID0gX2tleXMubGVuZ3RoO1xuICB2YXIgcGFpcnMgPSBBcnJheShsZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgcGFpcnNbaV0gPSBbX2tleXNbaV0sIG9ialtfa2V5c1tpXV1dO1xuICB9XG4gIHJldHVybiBwYWlycztcbn1cbiIsICJpbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbnZlcnQob2JqKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgdmFyIF9rZXlzID0ga2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gX2tleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbb2JqW19rZXlzW2ldXV0gPSBfa2V5c1tpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwgImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5cbi8vIFJldHVybiBhIHNvcnRlZCBsaXN0IG9mIHRoZSBmdW5jdGlvbiBuYW1lcyBhdmFpbGFibGUgb24gdGhlIG9iamVjdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmopIHtcbiAgdmFyIG5hbWVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gbmFtZXMuc29ydCgpO1xufVxuIiwgIi8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhc3NpZ25lciBmdW5jdGlvbnMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihrZXlzRnVuYywgZGVmYXVsdHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChkZWZhdWx0cykgb2JqID0gT2JqZWN0KG9iaik7XG4gICAgaWYgKGxlbmd0aCA8IDIgfHwgb2JqID09IG51bGwpIHJldHVybiBvYmo7XG4gICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF0sXG4gICAgICAgICAga2V5cyA9IGtleXNGdW5jKHNvdXJjZSksXG4gICAgICAgICAgbCA9IGtleXMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmICghZGVmYXVsdHMgfHwgb2JqW2tleV0gPT09IHZvaWQgMCkgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbn1cbiIsICJpbXBvcnQgY3JlYXRlQXNzaWduZXIgZnJvbSAnLi9fY3JlYXRlQXNzaWduZXIuanMnO1xuaW1wb3J0IGFsbEtleXMgZnJvbSAnLi9hbGxLZXlzLmpzJztcblxuLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBc3NpZ25lcihhbGxLZXlzKTtcbiIsICJpbXBvcnQgY3JlYXRlQXNzaWduZXIgZnJvbSAnLi9fY3JlYXRlQXNzaWduZXIuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gQXNzaWducyBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgb3duIHByb3BlcnRpZXMgaW4gdGhlIHBhc3NlZC1pblxuLy8gb2JqZWN0KHMpLlxuLy8gKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ24pXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBc3NpZ25lcihrZXlzKTtcbiIsICJpbXBvcnQgY3JlYXRlQXNzaWduZXIgZnJvbSAnLi9fY3JlYXRlQXNzaWduZXIuanMnO1xuaW1wb3J0IGFsbEtleXMgZnJvbSAnLi9hbGxLZXlzLmpzJztcblxuLy8gRmlsbCBpbiBhIGdpdmVuIG9iamVjdCB3aXRoIGRlZmF1bHQgcHJvcGVydGllcy5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUFzc2lnbmVyKGFsbEtleXMsIHRydWUpO1xuIiwgImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCB7IG5hdGl2ZUNyZWF0ZSB9IGZyb20gJy4vX3NldHVwLmpzJztcblxuLy8gQ3JlYXRlIGEgbmFrZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGZvciBzdXJyb2dhdGUtcHJvdG90eXBlLXN3YXBwaW5nLlxuZnVuY3Rpb24gY3RvcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCl7fTtcbn1cblxuLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gYW5vdGhlci5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhc2VDcmVhdGUocHJvdG90eXBlKSB7XG4gIGlmICghaXNPYmplY3QocHJvdG90eXBlKSkgcmV0dXJuIHt9O1xuICBpZiAobmF0aXZlQ3JlYXRlKSByZXR1cm4gbmF0aXZlQ3JlYXRlKHByb3RvdHlwZSk7XG4gIHZhciBDdG9yID0gY3RvcigpO1xuICBDdG9yLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDdG9yO1xuICBDdG9yLnByb3RvdHlwZSA9IG51bGw7XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCAiaW1wb3J0IGJhc2VDcmVhdGUgZnJvbSAnLi9fYmFzZUNyZWF0ZS5qcyc7XG5pbXBvcnQgZXh0ZW5kT3duIGZyb20gJy4vZXh0ZW5kT3duLmpzJztcblxuLy8gQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBnaXZlbiBwcm90b3R5cGUgb2JqZWN0LlxuLy8gSWYgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGFyZSBwcm92aWRlZCB0aGVuIHRoZXkgd2lsbCBiZSBhZGRlZCB0byB0aGVcbi8vIGNyZWF0ZWQgb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcHMpIHtcbiAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgaWYgKHByb3BzKSBleHRlbmRPd24ocmVzdWx0LCBwcm9wcyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCAiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBleHRlbmQgZnJvbSAnLi9leHRlbmQuanMnO1xuXG4vLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgaWYgKCFpc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICByZXR1cm4gaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBleHRlbmQoe30sIG9iaik7XG59XG4iLCAiLy8gSW52b2tlcyBgaW50ZXJjZXB0b3JgIHdpdGggdGhlIGBvYmpgIGFuZCB0aGVuIHJldHVybnMgYG9iamAuXG4vLyBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiwgaW5cbi8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGFwKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgaW50ZXJjZXB0b3Iob2JqKTtcbiAgcmV0dXJuIG9iajtcbn1cbiIsICJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcblxuLy8gTm9ybWFsaXplIGEgKGRlZXApIHByb3BlcnR5IGBwYXRoYCB0byBhcnJheS5cbi8vIExpa2UgYF8uaXRlcmF0ZWVgLCB0aGlzIGZ1bmN0aW9uIGNhbiBiZSBjdXN0b21pemVkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9QYXRoKHBhdGgpIHtcbiAgcmV0dXJuIGlzQXJyYXkocGF0aCkgPyBwYXRoIDogW3BhdGhdO1xufVxuXy50b1BhdGggPSB0b1BhdGg7XG4iLCAiaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcbmltcG9ydCAnLi90b1BhdGguanMnO1xuXG4vLyBJbnRlcm5hbCB3cmFwcGVyIGZvciBgXy50b1BhdGhgIHRvIGVuYWJsZSBtaW5pZmljYXRpb24uXG4vLyBTaW1pbGFyIHRvIGBjYmAgZm9yIGBfLml0ZXJhdGVlYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvUGF0aChwYXRoKSB7XG4gIHJldHVybiBfLnRvUGF0aChwYXRoKTtcbn1cbiIsICIvLyBJbnRlcm5hbCBmdW5jdGlvbiB0byBvYnRhaW4gYSBuZXN0ZWQgcHJvcGVydHkgaW4gYG9iamAgYWxvbmcgYHBhdGhgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcEdldChvYmosIHBhdGgpIHtcbiAgdmFyIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIG9iaiA9IG9ialtwYXRoW2ldXTtcbiAgfVxuICByZXR1cm4gbGVuZ3RoID8gb2JqIDogdm9pZCAwO1xufVxuIiwgImltcG9ydCB0b1BhdGggZnJvbSAnLi9fdG9QYXRoLmpzJztcbmltcG9ydCBkZWVwR2V0IGZyb20gJy4vX2RlZXBHZXQuanMnO1xuaW1wb3J0IGlzVW5kZWZpbmVkIGZyb20gJy4vaXNVbmRlZmluZWQuanMnO1xuXG4vLyBHZXQgdGhlIHZhbHVlIG9mIHRoZSAoZGVlcCkgcHJvcGVydHkgb24gYHBhdGhgIGZyb20gYG9iamVjdGAuXG4vLyBJZiBhbnkgcHJvcGVydHkgaW4gYHBhdGhgIGRvZXMgbm90IGV4aXN0IG9yIGlmIHRoZSB2YWx1ZSBpc1xuLy8gYHVuZGVmaW5lZGAsIHJldHVybiBgZGVmYXVsdFZhbHVlYCBpbnN0ZWFkLlxuLy8gVGhlIGBwYXRoYCBpcyBub3JtYWxpemVkIHRocm91Z2ggYF8udG9QYXRoYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgdmFsdWUgPSBkZWVwR2V0KG9iamVjdCwgdG9QYXRoKHBhdGgpKTtcbiAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xufVxuIiwgImltcG9ydCBfaGFzIGZyb20gJy4vX2hhcy5qcyc7XG5pbXBvcnQgdG9QYXRoIGZyb20gJy4vX3RvUGF0aC5qcyc7XG5cbi8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHkgb25cbi8vIGl0c2VsZiAoaW4gb3RoZXIgd29yZHMsIG5vdCBvbiBhIHByb3RvdHlwZSkuIFVubGlrZSB0aGUgaW50ZXJuYWwgYGhhc2Bcbi8vIGZ1bmN0aW9uLCB0aGlzIHB1YmxpYyB2ZXJzaW9uIGNhbiBhbHNvIHRyYXZlcnNlIG5lc3RlZCBwcm9wZXJ0aWVzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFzKG9iaiwgcGF0aCkge1xuICBwYXRoID0gdG9QYXRoKHBhdGgpO1xuICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcGF0aFtpXTtcbiAgICBpZiAoIV9oYXMob2JqLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgb2JqID0gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuICEhbGVuZ3RoO1xufVxuIiwgIi8vIEtlZXAgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIGFyb3VuZCBmb3IgZGVmYXVsdCBpdGVyYXRlZXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG4iLCAiaW1wb3J0IGV4dGVuZE93biBmcm9tICcuL2V4dGVuZE93bi5qcyc7XG5pbXBvcnQgaXNNYXRjaCBmcm9tICcuL2lzTWF0Y2guanMnO1xuXG4vLyBSZXR1cm5zIGEgcHJlZGljYXRlIGZvciBjaGVja2luZyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2Zcbi8vIGBrZXk6dmFsdWVgIHBhaXJzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF0Y2hlcihhdHRycykge1xuICBhdHRycyA9IGV4dGVuZE93bih7fSwgYXR0cnMpO1xuICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIGlzTWF0Y2gob2JqLCBhdHRycyk7XG4gIH07XG59XG4iLCAiaW1wb3J0IGRlZXBHZXQgZnJvbSAnLi9fZGVlcEdldC5qcyc7XG5pbXBvcnQgdG9QYXRoIGZyb20gJy4vX3RvUGF0aC5qcyc7XG5cbi8vIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIHBhc3NlZCBhbiBvYmplY3QsIHdpbGwgdHJhdmVyc2UgdGhhdCBvYmplY3RcdTIwMTlzXG4vLyBwcm9wZXJ0aWVzIGRvd24gdGhlIGdpdmVuIGBwYXRoYCwgc3BlY2lmaWVkIGFzIGFuIGFycmF5IG9mIGtleXMgb3IgaW5kaWNlcy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcGF0aCA9IHRvUGF0aChwYXRoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBkZWVwR2V0KG9iaiwgcGF0aCk7XG4gIH07XG59XG4iLCAiLy8gSW50ZXJuYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGVmZmljaWVudCAoZm9yIGN1cnJlbnQgZW5naW5lcykgdmVyc2lvblxuLy8gb2YgdGhlIHBhc3NlZC1pbiBjYWxsYmFjaywgdG8gYmUgcmVwZWF0ZWRseSBhcHBsaWVkIGluIG90aGVyIFVuZGVyc2NvcmVcbi8vIGZ1bmN0aW9ucy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9wdGltaXplQ2IoZnVuYywgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgcmV0dXJuIGZ1bmM7XG4gIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlKTtcbiAgICB9O1xuICAgIC8vIFRoZSAyLWFyZ3VtZW50IGNhc2UgaXMgb21pdHRlZCBiZWNhdXNlIHdlXHUyMDE5cmUgbm90IHVzaW5nIGl0LlxuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH07XG4gICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwgImltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSAnLi9tYXRjaGVyLmpzJztcbmltcG9ydCBwcm9wZXJ0eSBmcm9tICcuL3Byb3BlcnR5LmpzJztcbmltcG9ydCBvcHRpbWl6ZUNiIGZyb20gJy4vX29wdGltaXplQ2IuanMnO1xuXG4vLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZCB0byBlYWNoXG4vLyBlbGVtZW50IGluIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRoZSBkZXNpcmVkIHJlc3VsdCBcdTIwMTQgZWl0aGVyIGBfLmlkZW50aXR5YCxcbi8vIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gIGlmIChpc09iamVjdCh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpKSByZXR1cm4gbWF0Y2hlcih2YWx1ZSk7XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG4iLCAiaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcbmltcG9ydCBiYXNlSXRlcmF0ZWUgZnJvbSAnLi9fYmFzZUl0ZXJhdGVlLmpzJztcblxuLy8gRXh0ZXJuYWwgd3JhcHBlciBmb3Igb3VyIGNhbGxiYWNrIGdlbmVyYXRvci4gVXNlcnMgbWF5IGN1c3RvbWl6ZVxuLy8gYF8uaXRlcmF0ZWVgIGlmIHRoZXkgd2FudCBhZGRpdGlvbmFsIHByZWRpY2F0ZS9pdGVyYXRlZSBzaG9ydGhhbmQgc3R5bGVzLlxuLy8gVGhpcyBhYnN0cmFjdGlvbiBoaWRlcyB0aGUgaW50ZXJuYWwtb25seSBgYXJnQ291bnRgIGFyZ3VtZW50LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXRlcmF0ZWUodmFsdWUsIGNvbnRleHQpIHtcbiAgcmV0dXJuIGJhc2VJdGVyYXRlZSh2YWx1ZSwgY29udGV4dCwgSW5maW5pdHkpO1xufVxuXy5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuIiwgImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5pbXBvcnQgYmFzZUl0ZXJhdGVlIGZyb20gJy4vX2Jhc2VJdGVyYXRlZS5qcyc7XG5pbXBvcnQgaXRlcmF0ZWUgZnJvbSAnLi9pdGVyYXRlZS5qcyc7XG5cbi8vIFRoZSBmdW5jdGlvbiB3ZSBjYWxsIGludGVybmFsbHkgdG8gZ2VuZXJhdGUgYSBjYWxsYmFjay4gSXQgaW52b2tlc1xuLy8gYF8uaXRlcmF0ZWVgIGlmIG92ZXJyaWRkZW4sIG90aGVyd2lzZSBgYmFzZUl0ZXJhdGVlYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICBpZiAoXy5pdGVyYXRlZSAhPT0gaXRlcmF0ZWUpIHJldHVybiBfLml0ZXJhdGVlKHZhbHVlLCBjb250ZXh0KTtcbiAgcmV0dXJuIGJhc2VJdGVyYXRlZSh2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpO1xufVxuIiwgImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBgaXRlcmF0ZWVgIHRvIGVhY2ggZWxlbWVudCBvZiBgb2JqYC5cbi8vIEluIGNvbnRyYXN0IHRvIGBfLm1hcGAgaXQgcmV0dXJucyBhbiBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXBPYmplY3Qob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgdmFyIF9rZXlzID0ga2V5cyhvYmopLFxuICAgICAgbGVuZ3RoID0gX2tleXMubGVuZ3RoLFxuICAgICAgcmVzdWx0cyA9IHt9O1xuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBfa2V5c1tpbmRleF07XG4gICAgcmVzdWx0c1tjdXJyZW50S2V5XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn1cbiIsICIvLyBQcmVkaWNhdGUtZ2VuZXJhdGluZyBmdW5jdGlvbi4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vb3AoKXt9XG4iLCAiaW1wb3J0IG5vb3AgZnJvbSAnLi9ub29wLmpzJztcbmltcG9ydCBnZXQgZnJvbSAnLi9nZXQuanMnO1xuXG4vLyBHZW5lcmF0ZXMgYSBmdW5jdGlvbiBmb3IgYSBnaXZlbiBvYmplY3QgdGhhdCByZXR1cm5zIGEgZ2l2ZW4gcHJvcGVydHkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iaikge1xuICBpZiAob2JqID09IG51bGwpIHJldHVybiBub29wO1xuICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgIHJldHVybiBnZXQob2JqLCBwYXRoKTtcbiAgfTtcbn1cbiIsICJpbXBvcnQgb3B0aW1pemVDYiBmcm9tICcuL19vcHRpbWl6ZUNiLmpzJztcblxuLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7XG4gIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBhY2N1bVtpXSA9IGl0ZXJhdGVlKGkpO1xuICByZXR1cm4gYWNjdW07XG59XG4iLCAiLy8gUmV0dXJuIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBgbWluYCBhbmQgYG1heGAgKGluY2x1c2l2ZSkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb20obWluLCBtYXgpIHtcbiAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgbWF4ID0gbWluO1xuICAgIG1pbiA9IDA7XG4gIH1cbiAgcmV0dXJuIG1pbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG59XG4iLCAiLy8gQSAocG9zc2libHkgZmFzdGVyKSB3YXkgdG8gZ2V0IHRoZSBjdXJyZW50IHRpbWVzdGFtcCBhcyBhbiBpbnRlZ2VyLlxuZXhwb3J0IGRlZmF1bHQgRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbn07XG4iLCAiaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gSW50ZXJuYWwgaGVscGVyIHRvIGdlbmVyYXRlIGZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5nc1xuLy8gdG8vZnJvbSBIVE1MIGludGVycG9sYXRpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVFc2NhcGVyKG1hcCkge1xuICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuIG1hcFttYXRjaF07XG4gIH07XG4gIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZC5cbiAgdmFyIHNvdXJjZSA9ICcoPzonICsga2V5cyhtYXApLmpvaW4oJ3wnKSArICcpJztcbiAgdmFyIHRlc3RSZWdleHAgPSBSZWdFeHAoc291cmNlKTtcbiAgdmFyIHJlcGxhY2VSZWdleHAgPSBSZWdFeHAoc291cmNlLCAnZycpO1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgc3RyaW5nID0gc3RyaW5nID09IG51bGwgPyAnJyA6ICcnICsgc3RyaW5nO1xuICAgIHJldHVybiB0ZXN0UmVnZXhwLnRlc3Qoc3RyaW5nKSA/IHN0cmluZy5yZXBsYWNlKHJlcGxhY2VSZWdleHAsIGVzY2FwZXIpIDogc3RyaW5nO1xuICB9O1xufVxuIiwgIi8vIEludGVybmFsIGxpc3Qgb2YgSFRNTCBlbnRpdGllcyBmb3IgZXNjYXBpbmcuXG5leHBvcnQgZGVmYXVsdCB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnXG59O1xuIiwgImltcG9ydCBjcmVhdGVFc2NhcGVyIGZyb20gJy4vX2NyZWF0ZUVzY2FwZXIuanMnO1xuaW1wb3J0IGVzY2FwZU1hcCBmcm9tICcuL19lc2NhcGVNYXAuanMnO1xuXG4vLyBGdW5jdGlvbiBmb3IgZXNjYXBpbmcgc3RyaW5ncyB0byBIVE1MIGludGVycG9sYXRpb24uXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVFc2NhcGVyKGVzY2FwZU1hcCk7XG4iLCAiaW1wb3J0IGludmVydCBmcm9tICcuL2ludmVydC5qcyc7XG5pbXBvcnQgZXNjYXBlTWFwIGZyb20gJy4vX2VzY2FwZU1hcC5qcyc7XG5cbi8vIEludGVybmFsIGxpc3Qgb2YgSFRNTCBlbnRpdGllcyBmb3IgdW5lc2NhcGluZy5cbmV4cG9ydCBkZWZhdWx0IGludmVydChlc2NhcGVNYXApO1xuIiwgImltcG9ydCBjcmVhdGVFc2NhcGVyIGZyb20gJy4vX2NyZWF0ZUVzY2FwZXIuanMnO1xuaW1wb3J0IHVuZXNjYXBlTWFwIGZyb20gJy4vX3VuZXNjYXBlTWFwLmpzJztcblxuLy8gRnVuY3Rpb24gZm9yIHVuZXNjYXBpbmcgc3RyaW5ncyBmcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVzY2FwZXIodW5lc2NhcGVNYXApO1xuIiwgImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5cbi8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycy4gQ2hhbmdlIHRoZVxuLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuZXhwb3J0IGRlZmF1bHQgXy50ZW1wbGF0ZVNldHRpbmdzID0ge1xuICBldmFsdWF0ZTogLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgaW50ZXJwb2xhdGU6IC88JT0oW1xcc1xcU10rPyklPi9nLFxuICBlc2NhcGU6IC88JS0oW1xcc1xcU10rPyklPi9nXG59O1xuIiwgImltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzLmpzJztcbmltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5pbXBvcnQgJy4vdGVtcGxhdGVTZXR0aW5ncy5qcyc7XG5cbi8vIFdoZW4gY3VzdG9taXppbmcgYF8udGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guXG52YXIgbm9NYXRjaCA9IC8oLileLztcblxuLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbi8vIHN0cmluZyBsaXRlcmFsLlxudmFyIGVzY2FwZXMgPSB7XG4gIFwiJ1wiOiBcIidcIixcbiAgJ1xcXFwnOiAnXFxcXCcsXG4gICdcXHInOiAncicsXG4gICdcXG4nOiAnbicsXG4gICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgJ1xcdTIwMjknOiAndTIwMjknXG59O1xuXG52YXIgZXNjYXBlUmVnRXhwID0gL1xcXFx8J3xcXHJ8XFxufFxcdTIwMjh8XFx1MjAyOS9nO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKG1hdGNoKSB7XG4gIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbn1cblxuLy8gSW4gb3JkZXIgdG8gcHJldmVudCB0aGlyZC1wYXJ0eSBjb2RlIGluamVjdGlvbiB0aHJvdWdoXG4vLyBgXy50ZW1wbGF0ZVNldHRpbmdzLnZhcmlhYmxlYCwgd2UgdGVzdCBpdCBhZ2FpbnN0IHRoZSBmb2xsb3dpbmcgcmVndWxhclxuLy8gZXhwcmVzc2lvbi4gSXQgaXMgaW50ZW50aW9uYWxseSBhIGJpdCBtb3JlIGxpYmVyYWwgdGhhbiBqdXN0IG1hdGNoaW5nIHZhbGlkXG4vLyBpZGVudGlmaWVycywgYnV0IHN0aWxsIHByZXZlbnRzIHBvc3NpYmxlIGxvb3Bob2xlcyB0aHJvdWdoIGRlZmF1bHRzIG9yXG4vLyBkZXN0cnVjdHVyaW5nIGFzc2lnbm1lbnQuXG52YXIgYmFyZUlkZW50aWZpZXIgPSAvXlxccyooXFx3fFxcJCkrXFxzKiQvO1xuXG4vLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLFxuLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuXG4vLyBOQjogYG9sZFNldHRpbmdzYCBvbmx5IGV4aXN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZW1wbGF0ZSh0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgaWYgKCFzZXR0aW5ncyAmJiBvbGRTZXR0aW5ncykgc2V0dGluZ3MgPSBvbGRTZXR0aW5ncztcbiAgc2V0dGluZ3MgPSBkZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uXG4gIHZhciBtYXRjaGVyID0gUmVnRXhwKFtcbiAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAoc2V0dGluZ3MuaW50ZXJwb2xhdGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gIC8vIENvbXBpbGUgdGhlIHRlbXBsYXRlIHNvdXJjZSwgZXNjYXBpbmcgc3RyaW5nIGxpdGVyYWxzIGFwcHJvcHJpYXRlbHkuXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICB0ZXh0LnJlcGxhY2UobWF0Y2hlciwgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZSwgaW50ZXJwb2xhdGUsIGV2YWx1YXRlLCBvZmZzZXQpIHtcbiAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKGVzY2FwZVJlZ0V4cCwgZXNjYXBlQ2hhcik7XG4gICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICBpZiAoZXNjYXBlKSB7XG4gICAgICBzb3VyY2UgKz0gXCInK1xcbigoX190PShcIiArIGVzY2FwZSArIFwiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXFxuJ1wiO1xuICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgIH0gZWxzZSBpZiAoZXZhbHVhdGUpIHtcbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZSArIFwiXFxuX19wKz0nXCI7XG4gICAgfVxuXG4gICAgLy8gQWRvYmUgVk1zIG5lZWQgdGhlIG1hdGNoIHJldHVybmVkIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3Qgb2Zmc2V0LlxuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG4gIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGU7XG4gIGlmIChhcmd1bWVudCkge1xuICAgIC8vIEluc3VyZSBhZ2FpbnN0IHRoaXJkLXBhcnR5IGNvZGUgaW5qZWN0aW9uLiAoQ1ZFLTIwMjEtMjMzNTgpXG4gICAgaWYgKCFiYXJlSWRlbnRpZmllci50ZXN0KGFyZ3VtZW50KSkgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ3ZhcmlhYmxlIGlzIG5vdCBhIGJhcmUgaWRlbnRpZmllcjogJyArIGFyZ3VtZW50XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxuICAgIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xcbicgKyBzb3VyY2UgKyAnfVxcbic7XG4gICAgYXJndW1lbnQgPSAnb2JqJztcbiAgfVxuXG4gIHNvdXJjZSA9IFwidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLFwiICtcbiAgICBcInByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XFxuXCIgK1xuICAgIHNvdXJjZSArICdyZXR1cm4gX19wO1xcbic7XG5cbiAgdmFyIHJlbmRlcjtcbiAgdHJ5IHtcbiAgICByZW5kZXIgPSBuZXcgRnVuY3Rpb24oYXJndW1lbnQsICdfJywgc291cmNlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGUuc291cmNlID0gc291cmNlO1xuICAgIHRocm93IGU7XG4gIH1cblxuICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICB9O1xuXG4gIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyBhcmd1bWVudCArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufVxuIiwgImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgdG9QYXRoIGZyb20gJy4vX3RvUGF0aC5qcyc7XG5cbi8vIFRyYXZlcnNlcyB0aGUgY2hpbGRyZW4gb2YgYG9iamAgYWxvbmcgYHBhdGhgLiBJZiBhIGNoaWxkIGlzIGEgZnVuY3Rpb24sIGl0XG4vLyBpcyBpbnZva2VkIHdpdGggaXRzIHBhcmVudCBhcyBjb250ZXh0LiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZmluYWxcbi8vIGNoaWxkLCBvciBgZmFsbGJhY2tgIGlmIGFueSBjaGlsZCBpcyB1bmRlZmluZWQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXN1bHQob2JqLCBwYXRoLCBmYWxsYmFjaykge1xuICBwYXRoID0gdG9QYXRoKHBhdGgpO1xuICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oZmFsbGJhY2spID8gZmFsbGJhY2suY2FsbChvYmopIDogZmFsbGJhY2s7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBwcm9wID0gb2JqID09IG51bGwgPyB2b2lkIDAgOiBvYmpbcGF0aFtpXV07XG4gICAgaWYgKHByb3AgPT09IHZvaWQgMCkge1xuICAgICAgcHJvcCA9IGZhbGxiYWNrO1xuICAgICAgaSA9IGxlbmd0aDsgLy8gRW5zdXJlIHdlIGRvbid0IGNvbnRpbnVlIGl0ZXJhdGluZy5cbiAgICB9XG4gICAgb2JqID0gaXNGdW5jdGlvbihwcm9wKSA/IHByb3AuY2FsbChvYmopIDogcHJvcDtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuIiwgIi8vIEdlbmVyYXRlIGEgdW5pcXVlIGludGVnZXIgaWQgKHVuaXF1ZSB3aXRoaW4gdGhlIGVudGlyZSBjbGllbnQgc2Vzc2lvbikuXG4vLyBVc2VmdWwgZm9yIHRlbXBvcmFyeSBET00gaWRzLlxudmFyIGlkQ291bnRlciA9IDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJztcbiAgcmV0dXJuIHByZWZpeCA/IHByZWZpeCArIGlkIDogaWQ7XG59XG4iLCAiaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcblxuLy8gU3RhcnQgY2hhaW5pbmcgYSB3cmFwcGVkIFVuZGVyc2NvcmUgb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hhaW4ob2JqKSB7XG4gIHZhciBpbnN0YW5jZSA9IF8ob2JqKTtcbiAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuIiwgImltcG9ydCBiYXNlQ3JlYXRlIGZyb20gJy4vX2Jhc2VDcmVhdGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vLyBJbnRlcm5hbCBmdW5jdGlvbiB0byBleGVjdXRlIGBzb3VyY2VGdW5jYCBib3VuZCB0byBgY29udGV4dGAgd2l0aCBvcHRpb25hbFxuLy8gYGFyZ3NgLiBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZXhlY3V0ZSBhIGZ1bmN0aW9uIGFzIGEgY29uc3RydWN0b3Igb3IgYXMgYVxuLy8gbm9ybWFsIGZ1bmN0aW9uLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhlY3V0ZUJvdW5kKHNvdXJjZUZ1bmMsIGJvdW5kRnVuYywgY29udGV4dCwgY2FsbGluZ0NvbnRleHQsIGFyZ3MpIHtcbiAgaWYgKCEoY2FsbGluZ0NvbnRleHQgaW5zdGFuY2VvZiBib3VuZEZ1bmMpKSByZXR1cm4gc291cmNlRnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgdmFyIHNlbGYgPSBiYXNlQ3JlYXRlKHNvdXJjZUZ1bmMucHJvdG90eXBlKTtcbiAgdmFyIHJlc3VsdCA9IHNvdXJjZUZ1bmMuYXBwbHkoc2VsZiwgYXJncyk7XG4gIGlmIChpc09iamVjdChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICByZXR1cm4gc2VsZjtcbn1cbiIsICJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IGV4ZWN1dGVCb3VuZCBmcm9tICcuL19leGVjdXRlQm91bmQuanMnO1xuaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcblxuLy8gUGFydGlhbGx5IGFwcGx5IGEgZnVuY3Rpb24gYnkgY3JlYXRpbmcgYSB2ZXJzaW9uIHRoYXQgaGFzIGhhZCBzb21lIG9mIGl0c1xuLy8gYXJndW1lbnRzIHByZS1maWxsZWQsIHdpdGhvdXQgY2hhbmdpbmcgaXRzIGR5bmFtaWMgYHRoaXNgIGNvbnRleHQuIGBfYCBhY3RzXG4vLyBhcyBhIHBsYWNlaG9sZGVyIGJ5IGRlZmF1bHQsIGFsbG93aW5nIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgdG8gYmVcbi8vIHByZS1maWxsZWQuIFNldCBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCBmb3IgYSBjdXN0b20gcGxhY2Vob2xkZXIgYXJndW1lbnQuXG52YXIgcGFydGlhbCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgYm91bmRBcmdzKSB7XG4gIHZhciBwbGFjZWhvbGRlciA9IHBhcnRpYWwucGxhY2Vob2xkZXI7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwb3NpdGlvbiA9IDAsIGxlbmd0aCA9IGJvdW5kQXJncy5sZW5ndGg7XG4gICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBib3VuZEFyZ3NbaV0gPT09IHBsYWNlaG9sZGVyID8gYXJndW1lbnRzW3Bvc2l0aW9uKytdIDogYm91bmRBcmdzW2ldO1xuICAgIH1cbiAgICB3aGlsZSAocG9zaXRpb24gPCBhcmd1bWVudHMubGVuZ3RoKSBhcmdzLnB1c2goYXJndW1lbnRzW3Bvc2l0aW9uKytdKTtcbiAgICByZXR1cm4gZXhlY3V0ZUJvdW5kKGZ1bmMsIGJvdW5kLCB0aGlzLCB0aGlzLCBhcmdzKTtcbiAgfTtcbiAgcmV0dXJuIGJvdW5kO1xufSk7XG5cbnBhcnRpYWwucGxhY2Vob2xkZXIgPSBfO1xuZXhwb3J0IGRlZmF1bHQgcGFydGlhbDtcbiIsICJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBleGVjdXRlQm91bmQgZnJvbSAnLi9fZXhlY3V0ZUJvdW5kLmpzJztcblxuLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsXG4vLyBvcHRpb25hbGx5KS5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgY29udGV4dCwgYXJncykge1xuICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbicpO1xuICB2YXIgYm91bmQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGNhbGxBcmdzKSB7XG4gICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgY29udGV4dCwgdGhpcywgYXJncy5jb25jYXQoY2FsbEFyZ3MpKTtcbiAgfSk7XG4gIHJldHVybiBib3VuZDtcbn0pO1xuIiwgImltcG9ydCBjcmVhdGVTaXplUHJvcGVydHlDaGVjayBmcm9tICcuL19jcmVhdGVTaXplUHJvcGVydHlDaGVjay5qcyc7XG5pbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5cbi8vIEludGVybmFsIGhlbHBlciBmb3IgY29sbGVjdGlvbiBtZXRob2RzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgY29sbGVjdGlvblxuLy8gc2hvdWxkIGJlIGl0ZXJhdGVkIGFzIGFuIGFycmF5IG9yIGFzIGFuIG9iamVjdC5cbi8vIFJlbGF0ZWQ6IGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2xlbmd0aFxuLy8gQXZvaWRzIGEgdmVyeSBuYXN0eSBpT1MgOCBKSVQgYnVnIG9uIEFSTS02NC4gIzIwOTRcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrKGdldExlbmd0aCk7XG4iLCAiaW1wb3J0IGdldExlbmd0aCBmcm9tICcuL19nZXRMZW5ndGguanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vX2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5cbi8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZsYXR0ZW4oaW5wdXQsIGRlcHRoLCBzdHJpY3QsIG91dHB1dCkge1xuICBvdXRwdXQgPSBvdXRwdXQgfHwgW107XG4gIGlmICghZGVwdGggJiYgZGVwdGggIT09IDApIHtcbiAgICBkZXB0aCA9IEluZmluaXR5O1xuICB9IGVsc2UgaWYgKGRlcHRoIDw9IDApIHtcbiAgICByZXR1cm4gb3V0cHV0LmNvbmNhdChpbnB1dCk7XG4gIH1cbiAgdmFyIGlkeCA9IG91dHB1dC5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoaW5wdXQpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsdWUgPSBpbnB1dFtpXTtcbiAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmIChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAvLyBGbGF0dGVuIGN1cnJlbnQgbGV2ZWwgb2YgYXJyYXkgb3IgYXJndW1lbnRzIG9iamVjdC5cbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgZmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBzdHJpY3QsIG91dHB1dCk7XG4gICAgICAgIGlkeCA9IG91dHB1dC5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaiA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGogPCBsZW4pIG91dHB1dFtpZHgrK10gPSB2YWx1ZVtqKytdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXN0cmljdCkge1xuICAgICAgb3V0cHV0W2lkeCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuIiwgImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgZmxhdHRlbiBmcm9tICcuL19mbGF0dGVuLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vYmluZC5qcyc7XG5cbi8vIEJpbmQgYSBudW1iZXIgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gUmVtYWluaW5nIGFyZ3VtZW50c1xuLy8gYXJlIHRoZSBtZXRob2QgbmFtZXMgdG8gYmUgYm91bmQuIFVzZWZ1bCBmb3IgZW5zdXJpbmcgdGhhdCBhbGwgY2FsbGJhY2tzXG4vLyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICBrZXlzID0gZmxhdHRlbihrZXlzLCBmYWxzZSwgZmFsc2UpO1xuICB2YXIgaW5kZXggPSBrZXlzLmxlbmd0aDtcbiAgaWYgKGluZGV4IDwgMSkgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzJyk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgIG9ialtrZXldID0gYmluZChvYmpba2V5XSwgb2JqKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufSk7XG4iLCAiaW1wb3J0IGhhcyBmcm9tICcuL19oYXMuanMnO1xuXG4vLyBNZW1vaXplIGFuIGV4cGVuc2l2ZSBmdW5jdGlvbiBieSBzdG9yaW5nIGl0cyByZXN1bHRzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCBoYXNoZXIpIHtcbiAgdmFyIG1lbW9pemUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgY2FjaGUgPSBtZW1vaXplLmNhY2hlO1xuICAgIHZhciBhZGRyZXNzID0gJycgKyAoaGFzaGVyID8gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrZXkpO1xuICAgIGlmICghaGFzKGNhY2hlLCBhZGRyZXNzKSkgY2FjaGVbYWRkcmVzc10gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGNhY2hlW2FkZHJlc3NdO1xuICB9O1xuICBtZW1vaXplLmNhY2hlID0ge307XG4gIHJldHVybiBtZW1vaXplO1xufVxuIiwgImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5cbi8vIERlbGF5cyBhIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYW5kIHRoZW4gY2FsbHNcbi8vIGl0IHdpdGggdGhlIGFyZ3VtZW50cyBzdXBwbGllZC5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzKTtcbiAgfSwgd2FpdCk7XG59KTtcbiIsICJpbXBvcnQgcGFydGlhbCBmcm9tICcuL3BhcnRpYWwuanMnO1xuaW1wb3J0IGRlbGF5IGZyb20gJy4vZGVsYXkuanMnO1xuaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcblxuLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4vLyBjbGVhcmVkLlxuZXhwb3J0IGRlZmF1bHQgcGFydGlhbChkZWxheSwgXywgMSk7XG4iLCAiaW1wb3J0IG5vdyBmcm9tICcuL25vdy5qcyc7XG5cbi8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZVxuLy8gZHVyaW5nIGEgZ2l2ZW4gd2luZG93IG9mIHRpbWUuIE5vcm1hbGx5LCB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgcnVuXG4vLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4vLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzc1xuLy8gYHtsZWFkaW5nOiBmYWxzZX1gLiBUbyBkaXNhYmxlIGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSwgZGl0dG8uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciB0aW1lb3V0LCBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXG4gIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBub3coKTtcbiAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICB9O1xuXG4gIHZhciB0aHJvdHRsZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgX25vdyA9IG5vdygpO1xuICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBfbm93O1xuICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKF9ub3cgLSBwcmV2aW91cyk7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzID0gX25vdztcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB0aHJvdHRsZWQuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHByZXZpb3VzID0gMDtcbiAgICB0aW1lb3V0ID0gY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICB9O1xuXG4gIHJldHVybiB0aHJvdHRsZWQ7XG59XG4iLCAiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCBub3cgZnJvbSAnLi9ub3cuanMnO1xuXG4vLyBXaGVuIGEgc2VxdWVuY2Ugb2YgY2FsbHMgb2YgdGhlIHJldHVybmVkIGZ1bmN0aW9uIGVuZHMsIHRoZSBhcmd1bWVudFxuLy8gZnVuY3Rpb24gaXMgdHJpZ2dlcmVkLiBUaGUgZW5kIG9mIGEgc2VxdWVuY2UgaXMgZGVmaW5lZCBieSB0aGUgYHdhaXRgXG4vLyBwYXJhbWV0ZXIuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uIHdpbGwgYmVcbi8vIHRyaWdnZXJlZCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZXF1ZW5jZSBpbnN0ZWFkIG9mIGF0IHRoZSBlbmQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgdmFyIHRpbWVvdXQsIHByZXZpb3VzLCBhcmdzLCByZXN1bHQsIGNvbnRleHQ7XG5cbiAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhc3NlZCA9IG5vdygpIC0gcHJldmlvdXM7XG4gICAgaWYgKHdhaXQgPiBwYXNzZWQpIHtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gcGFzc2VkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICBpZiAoIWltbWVkaWF0ZSkgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIGJlY2F1c2UgYGZ1bmNgIGNhbiByZWN1cnNpdmVseSBpbnZva2UgYGRlYm91bmNlZGAuXG4gICAgICBpZiAoIXRpbWVvdXQpIGFyZ3MgPSBjb250ZXh0ID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGRlYm91bmNlZCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oX2FyZ3MpIHtcbiAgICBjb250ZXh0ID0gdGhpcztcbiAgICBhcmdzID0gX2FyZ3M7XG4gICAgcHJldmlvdXMgPSBub3coKTtcbiAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgIGlmIChpbW1lZGlhdGUpIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuXG4gIGRlYm91bmNlZC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IGFyZ3MgPSBjb250ZXh0ID0gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gZGVib3VuY2VkO1xufVxuIiwgImltcG9ydCBwYXJ0aWFsIGZyb20gJy4vcGFydGlhbC5qcyc7XG5cbi8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLFxuLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZFxuLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdyYXAoZnVuYywgd3JhcHBlcikge1xuICByZXR1cm4gcGFydGlhbCh3cmFwcGVyLCBmdW5jKTtcbn1cbiIsICIvLyBSZXR1cm5zIGEgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBwYXNzZWQtaW4gcHJlZGljYXRlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsICIvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuLy8gY29uc3VtaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgZm9sbG93cy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgc3RhcnQgPSBhcmdzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSBhcmdzW3N0YXJ0XS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHdoaWxlIChpLS0pIHJlc3VsdCA9IGFyZ3NbaV0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG4iLCAiLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIG9uIGFuZCBhZnRlciB0aGUgTnRoIGNhbGwuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZnRlcih0aW1lcywgZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcbn1cbiIsICIvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgdXAgdG8gKGJ1dCBub3QgaW5jbHVkaW5nKSB0aGVcbi8vIE50aCBjYWxsLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmVmb3JlKHRpbWVzLCBmdW5jKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaWYgKC0tdGltZXMgPiAwKSB7XG4gICAgICBtZW1vID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpZiAodGltZXMgPD0gMSkgZnVuYyA9IG51bGw7XG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59XG4iLCAiaW1wb3J0IHBhcnRpYWwgZnJvbSAnLi9wYXJ0aWFsLmpzJztcbmltcG9ydCBiZWZvcmUgZnJvbSAnLi9iZWZvcmUuanMnO1xuXG4vLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGF0IG1vc3Qgb25lIHRpbWUsIG5vIG1hdHRlciBob3dcbi8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG5leHBvcnQgZGVmYXVsdCBwYXJ0aWFsKGJlZm9yZSwgMik7XG4iLCAiaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8vIFJldHVybnMgdGhlIGZpcnN0IGtleSBvbiBhbiBvYmplY3QgdGhhdCBwYXNzZXMgYSB0cnV0aCB0ZXN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZEtleShvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICB2YXIgX2tleXMgPSBrZXlzKG9iaiksIGtleTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IF9rZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gX2tleXNbaV07XG4gICAgaWYgKHByZWRpY2F0ZShvYmpba2V5XSwga2V5LCBvYmopKSByZXR1cm4ga2V5O1xuICB9XG59XG4iLCAiaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcblxuLy8gSW50ZXJuYWwgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlcihkaXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpO1xuICAgIHZhciBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH07XG59XG4iLCAiaW1wb3J0IGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyIGZyb20gJy4vX2NyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyLmpzJztcblxuLy8gUmV0dXJucyB0aGUgZmlyc3QgaW5kZXggb24gYW4gYXJyYXktbGlrZSB0aGF0IHBhc3NlcyBhIHRydXRoIHRlc3QuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlcigxKTtcbiIsICJpbXBvcnQgY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIgZnJvbSAnLi9fY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIuanMnO1xuXG4vLyBSZXR1cm5zIHRoZSBsYXN0IGluZGV4IG9uIGFuIGFycmF5LWxpa2UgdGhhdCBwYXNzZXMgYSB0cnV0aCB0ZXN0LlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoLTEpO1xuIiwgImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5cbi8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2hcbi8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCBvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQsIDEpO1xuICB2YXIgdmFsdWUgPSBpdGVyYXRlZShvYmopO1xuICB2YXIgbG93ID0gMCwgaGlnaCA9IGdldExlbmd0aChhcnJheSk7XG4gIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W21pZF0pIDwgdmFsdWUpIGxvdyA9IG1pZCArIDE7IGVsc2UgaGlnaCA9IG1pZDtcbiAgfVxuICByZXR1cm4gbG93O1xufVxuIiwgImltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcbmltcG9ydCB7IHNsaWNlIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGlzTmFOIGZyb20gJy4vaXNOYU4uanMnO1xuXG4vLyBJbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSB0aGUgYF8uaW5kZXhPZmAgYW5kIGBfLmxhc3RJbmRleE9mYCBmdW5jdGlvbnMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVJbmRleEZpbmRlcihkaXIsIHByZWRpY2F0ZUZpbmQsIHNvcnRlZEluZGV4KSB7XG4gIHJldHVybiBmdW5jdGlvbihhcnJheSwgaXRlbSwgaWR4KSB7XG4gICAgdmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpO1xuICAgIGlmICh0eXBlb2YgaWR4ID09ICdudW1iZXInKSB7XG4gICAgICBpZiAoZGlyID4gMCkge1xuICAgICAgICBpID0gaWR4ID49IDAgPyBpZHggOiBNYXRoLm1heChpZHggKyBsZW5ndGgsIGkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVuZ3RoID0gaWR4ID49IDAgPyBNYXRoLm1pbihpZHggKyAxLCBsZW5ndGgpIDogaWR4ICsgbGVuZ3RoICsgMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNvcnRlZEluZGV4ICYmIGlkeCAmJiBsZW5ndGgpIHtcbiAgICAgIGlkeCA9IHNvcnRlZEluZGV4KGFycmF5LCBpdGVtKTtcbiAgICAgIHJldHVybiBhcnJheVtpZHhdID09PSBpdGVtID8gaWR4IDogLTE7XG4gICAgfVxuICAgIGlmIChpdGVtICE9PSBpdGVtKSB7XG4gICAgICBpZHggPSBwcmVkaWNhdGVGaW5kKHNsaWNlLmNhbGwoYXJyYXksIGksIGxlbmd0aCksIGlzTmFOKTtcbiAgICAgIHJldHVybiBpZHggPj0gMCA/IGlkeCArIGkgOiAtMTtcbiAgICB9XG4gICAgZm9yIChpZHggPSBkaXIgPiAwID8gaSA6IGxlbmd0aCAtIDE7IGlkeCA+PSAwICYmIGlkeCA8IGxlbmd0aDsgaWR4ICs9IGRpcikge1xuICAgICAgaWYgKGFycmF5W2lkeF0gPT09IGl0ZW0pIHJldHVybiBpZHg7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfTtcbn1cbiIsICJpbXBvcnQgc29ydGVkSW5kZXggZnJvbSAnLi9zb3J0ZWRJbmRleC5qcyc7XG5pbXBvcnQgZmluZEluZGV4IGZyb20gJy4vZmluZEluZGV4LmpzJztcbmltcG9ydCBjcmVhdGVJbmRleEZpbmRlciBmcm9tICcuL19jcmVhdGVJbmRleEZpbmRlci5qcyc7XG5cbi8vIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW4gaXRlbSBpbiBhbiBhcnJheSxcbi8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4vLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbi8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVJbmRleEZpbmRlcigxLCBmaW5kSW5kZXgsIHNvcnRlZEluZGV4KTtcbiIsICJpbXBvcnQgZmluZExhc3RJbmRleCBmcm9tICcuL2ZpbmRMYXN0SW5kZXguanMnO1xuaW1wb3J0IGNyZWF0ZUluZGV4RmluZGVyIGZyb20gJy4vX2NyZWF0ZUluZGV4RmluZGVyLmpzJztcblxuLy8gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgbGFzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYW4gYXJyYXksXG4vLyBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSW5kZXhGaW5kZXIoLTEsIGZpbmRMYXN0SW5kZXgpO1xuIiwgImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgZmluZEluZGV4IGZyb20gJy4vZmluZEluZGV4LmpzJztcbmltcG9ydCBmaW5kS2V5IGZyb20gJy4vZmluZEtleS5qcyc7XG5cbi8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmQob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgdmFyIGtleUZpbmRlciA9IGlzQXJyYXlMaWtlKG9iaikgPyBmaW5kSW5kZXggOiBmaW5kS2V5O1xuICB2YXIga2V5ID0ga2V5RmluZGVyKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgaWYgKGtleSAhPT0gdm9pZCAwICYmIGtleSAhPT0gLTEpIHJldHVybiBvYmpba2V5XTtcbn1cbiIsICJpbXBvcnQgZmluZCBmcm9tICcuL2ZpbmQuanMnO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSAnLi9tYXRjaGVyLmpzJztcblxuLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgXy5maW5kYDogZ2V0dGluZyB0aGUgZmlyc3Rcbi8vIG9iamVjdCBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZFdoZXJlKG9iaiwgYXR0cnMpIHtcbiAgcmV0dXJuIGZpbmQob2JqLCBtYXRjaGVyKGF0dHJzKSk7XG59XG4iLCAiaW1wb3J0IG9wdGltaXplQ2IgZnJvbSAnLi9fb3B0aW1pemVDYi5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gVGhlIGNvcm5lcnN0b25lIGZvciBjb2xsZWN0aW9uIGZ1bmN0aW9ucywgYW4gYGVhY2hgXG4vLyBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC5cbi8vIEhhbmRsZXMgcmF3IG9iamVjdHMgaW4gYWRkaXRpb24gdG8gYXJyYXktbGlrZXMuIFRyZWF0cyBhbGxcbi8vIHNwYXJzZSBhcnJheS1saWtlcyBhcyBpZiB0aGV5IHdlcmUgZGVuc2UuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlYWNoKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgdmFyIGksIGxlbmd0aDtcbiAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGl0ZXJhdGVlKG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9rZXlzID0ga2V5cyhvYmopO1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IF9rZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpdGVyYXRlZShvYmpbX2tleXNbaV1dLCBfa2V5c1tpXSwgb2JqKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbiIsICJpbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vX2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFwKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gIHZhciBfa2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIGtleXMob2JqKSxcbiAgICAgIGxlbmd0aCA9IChfa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgIHJlc3VsdHMgPSBBcnJheShsZW5ndGgpO1xuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBfa2V5cyA/IF9rZXlzW2luZGV4XSA6IGluZGV4O1xuICAgIHJlc3VsdHNbaW5kZXhdID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICB9XG4gIHJldHVybiByZXN1bHRzO1xufVxuIiwgImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuaW1wb3J0IG9wdGltaXplQ2IgZnJvbSAnLi9fb3B0aW1pemVDYi5qcyc7XG5cbi8vIEludGVybmFsIGhlbHBlciB0byBjcmVhdGUgYSByZWR1Y2luZyBmdW5jdGlvbiwgaXRlcmF0aW5nIGxlZnQgb3IgcmlnaHQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZWR1Y2UoZGlyKSB7XG4gIC8vIFdyYXAgY29kZSB0aGF0IHJlYXNzaWducyBhcmd1bWVudCB2YXJpYWJsZXMgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbiB0aGFuXG4gIC8vIHRoZSBvbmUgdGhhdCBhY2Nlc3NlcyBgYXJndW1lbnRzLmxlbmd0aGAgdG8gYXZvaWQgYSBwZXJmIGhpdC4gKCMxOTkxKVxuICB2YXIgcmVkdWNlciA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGluaXRpYWwpIHtcbiAgICB2YXIgX2tleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBrZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChfa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgaWYgKCFpbml0aWFsKSB7XG4gICAgICBtZW1vID0gb2JqW19rZXlzID8gX2tleXNbaW5kZXhdIDogaW5kZXhdO1xuICAgICAgaW5kZXggKz0gZGlyO1xuICAgIH1cbiAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IF9rZXlzID8gX2tleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgY29udGV4dCkge1xuICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+PSAzO1xuICAgIHJldHVybiByZWR1Y2VyKG9iaiwgb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCksIG1lbW8sIGluaXRpYWwpO1xuICB9O1xufVxuIiwgImltcG9ydCBjcmVhdGVSZWR1Y2UgZnJvbSAnLi9fY3JlYXRlUmVkdWNlLmpzJztcblxuLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLFxuLy8gb3IgYGZvbGRsYC5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVJlZHVjZSgxKTtcbiIsICJpbXBvcnQgY3JlYXRlUmVkdWNlIGZyb20gJy4vX2NyZWF0ZVJlZHVjZS5qcyc7XG5cbi8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUmVkdWNlKC0xKTtcbiIsICJpbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGVhY2ggZnJvbSAnLi9lYWNoLmpzJztcblxuLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgdGhhdCBwYXNzIGEgdHJ1dGggdGVzdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbHRlcihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzLnB1c2godmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdHM7XG59XG4iLCAiaW1wb3J0IGZpbHRlciBmcm9tICcuL2ZpbHRlci5qcyc7XG5pbXBvcnQgbmVnYXRlIGZyb20gJy4vbmVnYXRlLmpzJztcbmltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5cbi8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGZvciB3aGljaCBhIHRydXRoIHRlc3QgZmFpbHMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWplY3Qob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgcmV0dXJuIGZpbHRlcihvYmosIG5lZ2F0ZShjYihwcmVkaWNhdGUpKSwgY29udGV4dCk7XG59XG4iLCAiaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIHBhc3MgYSB0cnV0aCB0ZXN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXZlcnkob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgdmFyIF9rZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYga2V5cyhvYmopLFxuICAgICAgbGVuZ3RoID0gKF9rZXlzIHx8IG9iaikubGVuZ3RoO1xuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBfa2V5cyA/IF9rZXlzW2luZGV4XSA6IGluZGV4O1xuICAgIGlmICghcHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIiwgImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgcGFzc2VzIGEgdHJ1dGggdGVzdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNvbWUob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgdmFyIF9rZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYga2V5cyhvYmopLFxuICAgICAgbGVuZ3RoID0gKF9rZXlzIHx8IG9iaikubGVuZ3RoO1xuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBfa2V5cyA/IF9rZXlzW2luZGV4XSA6IGluZGV4O1xuICAgIGlmIChwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iLCAiaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vX2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCB2YWx1ZXMgZnJvbSAnLi92YWx1ZXMuanMnO1xuaW1wb3J0IGluZGV4T2YgZnJvbSAnLi9pbmRleE9mLmpzJztcblxuLy8gRGV0ZXJtaW5lIGlmIHRoZSBhcnJheSBvciBvYmplY3QgY29udGFpbnMgYSBnaXZlbiBpdGVtICh1c2luZyBgPT09YCkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhvYmosIGl0ZW0sIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSB2YWx1ZXMob2JqKTtcbiAgaWYgKHR5cGVvZiBmcm9tSW5kZXggIT0gJ251bWJlcicgfHwgZ3VhcmQpIGZyb21JbmRleCA9IDA7XG4gIHJldHVybiBpbmRleE9mKG9iaiwgaXRlbSwgZnJvbUluZGV4KSA+PSAwO1xufVxuIiwgImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IG1hcCBmcm9tICcuL21hcC5qcyc7XG5pbXBvcnQgZGVlcEdldCBmcm9tICcuL19kZWVwR2V0LmpzJztcbmltcG9ydCB0b1BhdGggZnJvbSAnLi9fdG9QYXRoLmpzJztcblxuLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwgcGF0aCwgYXJncykge1xuICB2YXIgY29udGV4dFBhdGgsIGZ1bmM7XG4gIGlmIChpc0Z1bmN0aW9uKHBhdGgpKSB7XG4gICAgZnVuYyA9IHBhdGg7XG4gIH0gZWxzZSB7XG4gICAgcGF0aCA9IHRvUGF0aChwYXRoKTtcbiAgICBjb250ZXh0UGF0aCA9IHBhdGguc2xpY2UoMCwgLTEpO1xuICAgIHBhdGggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIG1hcChvYmosIGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZnVuYztcbiAgICBpZiAoIW1ldGhvZCkge1xuICAgICAgaWYgKGNvbnRleHRQYXRoICYmIGNvbnRleHRQYXRoLmxlbmd0aCkge1xuICAgICAgICBjb250ZXh0ID0gZGVlcEdldChjb250ZXh0LCBjb250ZXh0UGF0aCk7XG4gICAgICB9XG4gICAgICBpZiAoY29udGV4dCA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgICAgbWV0aG9kID0gY29udGV4dFtwYXRoXTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGhvZCA9PSBudWxsID8gbWV0aG9kIDogbWV0aG9kLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9KTtcbn0pO1xuIiwgImltcG9ydCBtYXAgZnJvbSAnLi9tYXAuanMnO1xuaW1wb3J0IHByb3BlcnR5IGZyb20gJy4vcHJvcGVydHkuanMnO1xuXG4vLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBfLm1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwbHVjayhvYmosIGtleSkge1xuICByZXR1cm4gbWFwKG9iaiwgcHJvcGVydHkoa2V5KSk7XG59XG4iLCAiaW1wb3J0IGZpbHRlciBmcm9tICcuL2ZpbHRlci5qcyc7XG5pbXBvcnQgbWF0Y2hlciBmcm9tICcuL21hdGNoZXIuanMnO1xuXG4vLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBfLmZpbHRlcmA6IHNlbGVjdGluZyBvbmx5XG4vLyBvYmplY3RzIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aGVyZShvYmosIGF0dHJzKSB7XG4gIHJldHVybiBmaWx0ZXIob2JqLCBtYXRjaGVyKGF0dHJzKSk7XG59XG4iLCAiaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vX2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCB2YWx1ZXMgZnJvbSAnLi92YWx1ZXMuanMnO1xuaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBlYWNoIGZyb20gJy4vZWFjaC5qcyc7XG5cbi8vIFJldHVybiB0aGUgbWF4aW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1heChvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gIHZhciByZXN1bHQgPSAtSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IC1JbmZpbml0eSxcbiAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgaWYgKGl0ZXJhdGVlID09IG51bGwgfHwgKHR5cGVvZiBpdGVyYXRlZSA9PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqWzBdICE9ICdvYmplY3QnICYmIG9iaiAhPSBudWxsKSkge1xuICAgIG9iaiA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiB2YWx1ZXMob2JqKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IG9ialtpXTtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlID4gcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odiwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodiwgaW5kZXgsIGxpc3QpO1xuICAgICAgaWYgKGNvbXB1dGVkID4gbGFzdENvbXB1dGVkIHx8IChjb21wdXRlZCA9PT0gLUluZmluaXR5ICYmIHJlc3VsdCA9PT0gLUluZmluaXR5KSkge1xuICAgICAgICByZXN1bHQgPSB2O1xuICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwgImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgdmFsdWVzIGZyb20gJy4vdmFsdWVzLmpzJztcbmltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuXG4vLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaW4ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICB2YXIgcmVzdWx0ID0gSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IEluZmluaXR5LFxuICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCB8fCAodHlwZW9mIGl0ZXJhdGVlID09ICdudW1iZXInICYmIHR5cGVvZiBvYmpbMF0gIT0gJ29iamVjdCcgJiYgb2JqICE9IG51bGwpKSB7XG4gICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IHZhbHVlcyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUgPCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2LCBpbmRleCwgbGlzdCkge1xuICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2LCBpbmRleCwgbGlzdCk7XG4gICAgICBpZiAoY29tcHV0ZWQgPCBsYXN0Q29tcHV0ZWQgfHwgKGNvbXB1dGVkID09PSBJbmZpbml0eSAmJiByZXN1bHQgPT09IEluZmluaXR5KSkge1xuICAgICAgICByZXN1bHQgPSB2O1xuICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwgImltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgeyBzbGljZSB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBpc1N0cmluZyBmcm9tICcuL2lzU3RyaW5nLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgbWFwIGZyb20gJy4vbWFwLmpzJztcbmltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB2YWx1ZXMgZnJvbSAnLi92YWx1ZXMuanMnO1xuXG4vLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxudmFyIHJlU3RyU3ltYm9sID0gL1teXFx1ZDgwMC1cXHVkZmZmXXxbXFx1ZDgwMC1cXHVkYmZmXVtcXHVkYzAwLVxcdWRmZmZdfFtcXHVkODAwLVxcdWRmZmZdL2c7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICBpZiAoaXNBcnJheShvYmopKSByZXR1cm4gc2xpY2UuY2FsbChvYmopO1xuICBpZiAoaXNTdHJpbmcob2JqKSkge1xuICAgIC8vIEtlZXAgc3Vycm9nYXRlIHBhaXIgY2hhcmFjdGVycyB0b2dldGhlci5cbiAgICByZXR1cm4gb2JqLm1hdGNoKHJlU3RyU3ltYm9sKTtcbiAgfVxuICBpZiAoaXNBcnJheUxpa2Uob2JqKSkgcmV0dXJuIG1hcChvYmosIGlkZW50aXR5KTtcbiAgcmV0dXJuIHZhbHVlcyhvYmopO1xufVxuIiwgImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgdmFsdWVzIGZyb20gJy4vdmFsdWVzLmpzJztcbmltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcbmltcG9ydCByYW5kb20gZnJvbSAnLi9yYW5kb20uanMnO1xuaW1wb3J0IHRvQXJyYXkgZnJvbSAnLi90b0FycmF5LmpzJztcblxuLy8gU2FtcGxlICoqbioqIHJhbmRvbSB2YWx1ZXMgZnJvbSBhIGNvbGxlY3Rpb24gdXNpbmcgdGhlIG1vZGVybiB2ZXJzaW9uIG9mIHRoZVxuLy8gW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXJcdTIwMTNZYXRlc19zaHVmZmxlKS5cbi8vIElmICoqbioqIGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybnMgYSBzaW5nbGUgcmFuZG9tIGVsZW1lbnQuXG4vLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzYW1wbGUob2JqLCBuLCBndWFyZCkge1xuICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSB2YWx1ZXMob2JqKTtcbiAgICByZXR1cm4gb2JqW3JhbmRvbShvYmoubGVuZ3RoIC0gMSldO1xuICB9XG4gIHZhciBzYW1wbGUgPSB0b0FycmF5KG9iaik7XG4gIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoc2FtcGxlKTtcbiAgbiA9IE1hdGgubWF4KE1hdGgubWluKG4sIGxlbmd0aCksIDApO1xuICB2YXIgbGFzdCA9IGxlbmd0aCAtIDE7XG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBuOyBpbmRleCsrKSB7XG4gICAgdmFyIHJhbmQgPSByYW5kb20oaW5kZXgsIGxhc3QpO1xuICAgIHZhciB0ZW1wID0gc2FtcGxlW2luZGV4XTtcbiAgICBzYW1wbGVbaW5kZXhdID0gc2FtcGxlW3JhbmRdO1xuICAgIHNhbXBsZVtyYW5kXSA9IHRlbXA7XG4gIH1cbiAgcmV0dXJuIHNhbXBsZS5zbGljZSgwLCBuKTtcbn1cbiIsICJpbXBvcnQgc2FtcGxlIGZyb20gJy4vc2FtcGxlLmpzJztcblxuLy8gU2h1ZmZsZSBhIGNvbGxlY3Rpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaHVmZmxlKG9iaikge1xuICByZXR1cm4gc2FtcGxlKG9iaiwgSW5maW5pdHkpO1xufVxuIiwgImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgcGx1Y2sgZnJvbSAnLi9wbHVjay5qcyc7XG5pbXBvcnQgbWFwIGZyb20gJy4vbWFwLmpzJztcblxuLy8gU29ydCB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uIHByb2R1Y2VkIGJ5IGFuIGl0ZXJhdGVlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc29ydEJ5KG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gIHJldHVybiBwbHVjayhtYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBsaXN0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGluZGV4OiBpbmRleCsrLFxuICAgICAgY3JpdGVyaWE6IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGxpc3QpXG4gICAgfTtcbiAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHZhciBhID0gbGVmdC5jcml0ZXJpYTtcbiAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBpZiAoYSA+IGIgfHwgYSA9PT0gdm9pZCAwKSByZXR1cm4gMTtcbiAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQuaW5kZXggLSByaWdodC5pbmRleDtcbiAgfSksICd2YWx1ZScpO1xufVxuIiwgImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuXG4vLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBhZ2dyZWdhdGUgXCJncm91cCBieVwiIG9wZXJhdGlvbnMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBncm91cChiZWhhdmlvciwgcGFydGl0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IHBhcnRpdGlvbiA/IFtbXSwgW11dIDoge307XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgdmFyIGtleSA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgb2JqKTtcbiAgICAgIGJlaGF2aW9yKHJlc3VsdCwgdmFsdWUsIGtleSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbiIsICJpbXBvcnQgZ3JvdXAgZnJvbSAnLi9fZ3JvdXAuanMnO1xuaW1wb3J0IGhhcyBmcm9tICcuL19oYXMuanMnO1xuXG4vLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlXG4vLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi5cbmV4cG9ydCBkZWZhdWx0IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICBpZiAoaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7IGVsc2UgcmVzdWx0W2tleV0gPSBbdmFsdWVdO1xufSk7XG4iLCAiaW1wb3J0IGdyb3VwIGZyb20gJy4vX2dyb3VwLmpzJztcblxuLy8gSW5kZXhlcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLCBzaW1pbGFyIHRvIGBfLmdyb3VwQnlgLCBidXQgZm9yXG4vLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUuXG5leHBvcnQgZGVmYXVsdCBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbn0pO1xuIiwgImltcG9ydCBncm91cCBmcm9tICcuL19ncm91cC5qcyc7XG5pbXBvcnQgaGFzIGZyb20gJy4vX2hhcy5qcyc7XG5cbi8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4vLyBjcml0ZXJpb24uXG5leHBvcnQgZGVmYXVsdCBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgaWYgKGhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldKys7IGVsc2UgcmVzdWx0W2tleV0gPSAxO1xufSk7XG4iLCAiaW1wb3J0IGdyb3VwIGZyb20gJy4vX2dyb3VwLmpzJztcblxuLy8gU3BsaXQgYSBjb2xsZWN0aW9uIGludG8gdHdvIGFycmF5czogb25lIHdob3NlIGVsZW1lbnRzIGFsbCBwYXNzIHRoZSBnaXZlblxuLy8gdHJ1dGggdGVzdCwgYW5kIG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgZG8gbm90IHBhc3MgdGhlIHRydXRoIHRlc3QuXG5leHBvcnQgZGVmYXVsdCBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBwYXNzKSB7XG4gIHJlc3VsdFtwYXNzID8gMCA6IDFdLnB1c2godmFsdWUpO1xufSwgdHJ1ZSk7XG4iLCAiaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vX2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGEgY29sbGVjdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNpemUob2JqKSB7XG4gIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIDA7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmopID8gb2JqLmxlbmd0aCA6IGtleXMob2JqKS5sZW5ndGg7XG59XG4iLCAiLy8gSW50ZXJuYWwgYF8ucGlja2AgaGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSB3aGV0aGVyIGBrZXlgIGlzIGFuIGVudW1lcmFibGVcbi8vIHByb3BlcnR5IG5hbWUgb2YgYG9iamAuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZXlJbk9iaih2YWx1ZSwga2V5LCBvYmopIHtcbiAgcmV0dXJuIGtleSBpbiBvYmo7XG59XG4iLCAiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgb3B0aW1pemVDYiBmcm9tICcuL19vcHRpbWl6ZUNiLmpzJztcbmltcG9ydCBhbGxLZXlzIGZyb20gJy4vYWxsS2V5cy5qcyc7XG5pbXBvcnQga2V5SW5PYmogZnJvbSAnLi9fa2V5SW5PYmouanMnO1xuaW1wb3J0IGZsYXR0ZW4gZnJvbSAnLi9fZmxhdHRlbi5qcyc7XG5cbi8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIGFsbG93ZWQgcHJvcGVydGllcy5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gIHZhciByZXN1bHQgPSB7fSwgaXRlcmF0ZWUgPSBrZXlzWzBdO1xuICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gIGlmIChpc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgIGlmIChrZXlzLmxlbmd0aCA+IDEpIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwga2V5c1sxXSk7XG4gICAga2V5cyA9IGFsbEtleXMob2JqKTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyYXRlZSA9IGtleUluT2JqO1xuICAgIGtleXMgPSBmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSk7XG4gICAgb2JqID0gT2JqZWN0KG9iaik7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICBpZiAoaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqKSkgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSk7XG4iLCAiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgbmVnYXRlIGZyb20gJy4vbmVnYXRlLmpzJztcbmltcG9ydCBtYXAgZnJvbSAnLi9tYXAuanMnO1xuaW1wb3J0IGZsYXR0ZW4gZnJvbSAnLi9fZmxhdHRlbi5qcyc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnLi9jb250YWlucy5qcyc7XG5pbXBvcnQgcGljayBmcm9tICcuL3BpY2suanMnO1xuXG4vLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgd2l0aG91dCB0aGUgZGlzYWxsb3dlZCBwcm9wZXJ0aWVzLlxuZXhwb3J0IGRlZmF1bHQgcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgdmFyIGl0ZXJhdGVlID0ga2V5c1swXSwgY29udGV4dDtcbiAgaWYgKGlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgaXRlcmF0ZWUgPSBuZWdhdGUoaXRlcmF0ZWUpO1xuICAgIGlmIChrZXlzLmxlbmd0aCA+IDEpIGNvbnRleHQgPSBrZXlzWzFdO1xuICB9IGVsc2Uge1xuICAgIGtleXMgPSBtYXAoZmxhdHRlbihrZXlzLCBmYWxzZSwgZmFsc2UpLCBTdHJpbmcpO1xuICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmV0dXJuICFjb250YWlucyhrZXlzLCBrZXkpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHBpY2sob2JqLCBpdGVyYXRlZSwgY29udGV4dCk7XG59KTtcbiIsICJpbXBvcnQgeyBzbGljZSB9IGZyb20gJy4vX3NldHVwLmpzJztcblxuLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXG4vLyB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiBhbGwgdGhlIHZhbHVlcyBpblxuLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXRpYWwoYXJyYXksIG4sIGd1YXJkKSB7XG4gIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSAobiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pKSk7XG59XG4iLCAiaW1wb3J0IGluaXRpYWwgZnJvbSAnLi9pbml0aWFsLmpzJztcblxuLy8gR2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBOXG4vLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBUaGUgKipndWFyZCoqIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpcnN0KGFycmF5LCBuLCBndWFyZCkge1xuICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPCAxKSByZXR1cm4gbiA9PSBudWxsIHx8IGd1YXJkID8gdm9pZCAwIDogW107XG4gIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVswXTtcbiAgcmV0dXJuIGluaXRpYWwoYXJyYXksIGFycmF5Lmxlbmd0aCAtIG4pO1xufVxuIiwgImltcG9ydCB7IHNsaWNlIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG4vLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBmaXJzdCBlbnRyeSBvZiB0aGUgYGFycmF5YC4gRXNwZWNpYWxseSB1c2VmdWwgb25cbi8vIHRoZSBgYXJndW1lbnRzYCBvYmplY3QuIFBhc3NpbmcgYW4gKipuKiogd2lsbCByZXR1cm4gdGhlIHJlc3QgTiB2YWx1ZXMgaW4gdGhlXG4vLyBgYXJyYXlgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzdChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKTtcbn1cbiIsICJpbXBvcnQgcmVzdCBmcm9tICcuL3Jlc3QuanMnO1xuXG4vLyBHZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgbGFzdCBOXG4vLyB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFzdChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoIDwgMSkgcmV0dXJuIG4gPT0gbnVsbCB8fCBndWFyZCA/IHZvaWQgMCA6IFtdO1xuICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gIHJldHVybiByZXN0KGFycmF5LCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSBuKSk7XG59XG4iLCAiaW1wb3J0IGZpbHRlciBmcm9tICcuL2ZpbHRlci5qcyc7XG5cbi8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgcmV0dXJuIGZpbHRlcihhcnJheSwgQm9vbGVhbik7XG59XG4iLCAiaW1wb3J0IF9mbGF0dGVuIGZyb20gJy4vX2ZsYXR0ZW4uanMnO1xuXG4vLyBGbGF0dGVuIG91dCBhbiBhcnJheSwgZWl0aGVyIHJlY3Vyc2l2ZWx5IChieSBkZWZhdWx0KSwgb3IgdXAgdG8gYGRlcHRoYC5cbi8vIFBhc3NpbmcgYHRydWVgIG9yIGBmYWxzZWAgYXMgYGRlcHRoYCBtZWFucyBgMWAgb3IgYEluZmluaXR5YCwgcmVzcGVjdGl2ZWx5LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmxhdHRlbihhcnJheSwgZGVwdGgpIHtcbiAgcmV0dXJuIF9mbGF0dGVuKGFycmF5LCBkZXB0aCwgZmFsc2UpO1xufVxuIiwgImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgZmxhdHRlbiBmcm9tICcuL19mbGF0dGVuLmpzJztcbmltcG9ydCBmaWx0ZXIgZnJvbSAnLi9maWx0ZXIuanMnO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gJy4vY29udGFpbnMuanMnO1xuXG4vLyBUYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gb25lIGFycmF5IGFuZCBhIG51bWJlciBvZiBvdGhlciBhcnJheXMuXG4vLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuZXhwb3J0IGRlZmF1bHQgcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcnJheSwgcmVzdCkge1xuICByZXN0ID0gZmxhdHRlbihyZXN0LCB0cnVlLCB0cnVlKTtcbiAgcmV0dXJuIGZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpe1xuICAgIHJldHVybiAhY29udGFpbnMocmVzdCwgdmFsdWUpO1xuICB9KTtcbn0pO1xuIiwgImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgZGlmZmVyZW5jZSBmcm9tICcuL2RpZmZlcmVuY2UuanMnO1xuXG4vLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXksIG90aGVyQXJyYXlzKSB7XG4gIHJldHVybiBkaWZmZXJlbmNlKGFycmF5LCBvdGhlckFycmF5cyk7XG59KTtcbiIsICJpbXBvcnQgaXNCb29sZWFuIGZyb20gJy4vaXNCb29sZWFuLmpzJztcbmltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnLi9jb250YWlucy5qcyc7XG5cbi8vIFByb2R1Y2UgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIHRoZSBhcnJheS4gSWYgdGhlIGFycmF5IGhhcyBhbHJlYWR5XG4vLyBiZWVuIHNvcnRlZCwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiB1c2luZyBhIGZhc3RlciBhbGdvcml0aG0uXG4vLyBUaGUgZmFzdGVyIGFsZ29yaXRobSB3aWxsIG5vdCB3b3JrIHdpdGggYW4gaXRlcmF0ZWUgaWYgdGhlIGl0ZXJhdGVlXG4vLyBpcyBub3QgYSBvbmUtdG8tb25lIGZ1bmN0aW9uLCBzbyBwcm92aWRpbmcgYW4gaXRlcmF0ZWUgd2lsbCBkaXNhYmxlXG4vLyB0aGUgZmFzdGVyIGFsZ29yaXRobS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuaXEoYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICBpZiAoIWlzQm9vbGVhbihpc1NvcnRlZCkpIHtcbiAgICBjb250ZXh0ID0gaXRlcmF0ZWU7XG4gICAgaXRlcmF0ZWUgPSBpc1NvcnRlZDtcbiAgICBpc1NvcnRlZCA9IGZhbHNlO1xuICB9XG4gIGlmIChpdGVyYXRlZSAhPSBudWxsKSBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgc2VlbiA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaV0sXG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaSwgYXJyYXkpIDogdmFsdWU7XG4gICAgaWYgKGlzU29ydGVkICYmICFpdGVyYXRlZSkge1xuICAgICAgaWYgKCFpIHx8IHNlZW4gIT09IGNvbXB1dGVkKSByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICBzZWVuID0gY29tcHV0ZWQ7XG4gICAgfSBlbHNlIGlmIChpdGVyYXRlZSkge1xuICAgICAgaWYgKCFjb250YWlucyhzZWVuLCBjb21wdXRlZCkpIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWNvbnRhaW5zKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCAiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCB1bmlxIGZyb20gJy4vdW5pcS5qcyc7XG5pbXBvcnQgZmxhdHRlbiBmcm9tICcuL19mbGF0dGVuLmpzJztcblxuLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSB1bmlvbjogZWFjaCBkaXN0aW5jdCBlbGVtZW50IGZyb20gYWxsIG9mXG4vLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXlzKSB7XG4gIHJldHVybiB1bmlxKGZsYXR0ZW4oYXJyYXlzLCB0cnVlLCB0cnVlKSk7XG59KTtcbiIsICJpbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnLi9jb250YWlucy5qcyc7XG5cbi8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGVcbi8vIHBhc3NlZC1pbiBhcnJheXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbnRlcnNlY3Rpb24oYXJyYXkpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGFycmF5W2ldO1xuICAgIGlmIChjb250YWlucyhyZXN1bHQsIGl0ZW0pKSBjb250aW51ZTtcbiAgICB2YXIgajtcbiAgICBmb3IgKGogPSAxOyBqIDwgYXJnc0xlbmd0aDsgaisrKSB7XG4gICAgICBpZiAoIWNvbnRhaW5zKGFyZ3VtZW50c1tqXSwgaXRlbSkpIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsICJpbXBvcnQgbWF4IGZyb20gJy4vbWF4LmpzJztcbmltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcbmltcG9ydCBwbHVjayBmcm9tICcuL3BsdWNrLmpzJztcblxuLy8gQ29tcGxlbWVudCBvZiB6aXAuIFVuemlwIGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIGFuZCBncm91cHNcbi8vIGVhY2ggYXJyYXkncyBlbGVtZW50cyBvbiBzaGFyZWQgaW5kaWNlcy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSAoYXJyYXkgJiYgbWF4KGFycmF5LCBnZXRMZW5ndGgpLmxlbmd0aCkgfHwgMDtcbiAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIHJlc3VsdFtpbmRleF0gPSBwbHVjayhhcnJheSwgaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCAiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCB1bnppcCBmcm9tICcuL3VuemlwLmpzJztcblxuLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZVxuLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKHVuemlwKTtcbiIsICJpbXBvcnQgZ2V0TGVuZ3RoICBmcm9tICcuL19nZXRMZW5ndGguanMnO1xuXG4vLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4vLyBwYWlycywgb3IgdHdvIHBhcmFsbGVsIGFycmF5cyBvZiB0aGUgc2FtZSBsZW5ndGggLS0gb25lIG9mIGtleXMsIGFuZCBvbmUgb2Zcbi8vIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlcy4gUGFzc2luZyBieSBwYWlycyBpcyB0aGUgcmV2ZXJzZSBvZiBgXy5wYWlyc2AuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvYmplY3QobGlzdCwgdmFsdWVzKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChsaXN0KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHZhbHVlcykge1xuICAgICAgcmVzdWx0W2xpc3RbaV1dID0gdmFsdWVzW2ldO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwgIi8vIEdlbmVyYXRlIGFuIGludGVnZXIgQXJyYXkgY29udGFpbmluZyBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLiBBIHBvcnQgb2Zcbi8vIHRoZSBuYXRpdmUgUHl0aG9uIGByYW5nZSgpYCBmdW5jdGlvbi4gU2VlXG4vLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIGlmIChzdG9wID09IG51bGwpIHtcbiAgICBzdG9wID0gc3RhcnQgfHwgMDtcbiAgICBzdGFydCA9IDA7XG4gIH1cbiAgaWYgKCFzdGVwKSB7XG4gICAgc3RlcCA9IHN0b3AgPCBzdGFydCA/IC0xIDogMTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gIHZhciByYW5nZSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKywgc3RhcnQgKz0gc3RlcCkge1xuICAgIHJhbmdlW2lkeF0gPSBzdGFydDtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn1cbiIsICJpbXBvcnQgeyBzbGljZSB9IGZyb20gJy4vX3NldHVwLmpzJztcblxuLy8gQ2h1bmsgYSBzaW5nbGUgYXJyYXkgaW50byBtdWx0aXBsZSBhcnJheXMsIGVhY2ggY29udGFpbmluZyBgY291bnRgIG9yIGZld2VyXG4vLyBpdGVtcy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNodW5rKGFycmF5LCBjb3VudCkge1xuICBpZiAoY291bnQgPT0gbnVsbCB8fCBjb3VudCA8IDEpIHJldHVybiBbXTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICByZXN1bHQucHVzaChzbGljZS5jYWxsKGFycmF5LCBpLCBpICs9IGNvdW50KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsICJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udGludWUgY2hhaW5pbmcgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjaGFpblJlc3VsdChpbnN0YW5jZSwgb2JqKSB7XG4gIHJldHVybiBpbnN0YW5jZS5fY2hhaW4gPyBfKG9iaikuY2hhaW4oKSA6IG9iajtcbn1cbiIsICJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuaW1wb3J0IGVhY2ggZnJvbSAnLi9lYWNoLmpzJztcbmltcG9ydCBmdW5jdGlvbnMgZnJvbSAnLi9mdW5jdGlvbnMuanMnO1xuaW1wb3J0IHsgcHVzaCB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBjaGFpblJlc3VsdCBmcm9tICcuL19jaGFpblJlc3VsdC5qcyc7XG5cbi8vIEFkZCB5b3VyIG93biBjdXN0b20gZnVuY3Rpb25zIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1peGluKG9iaikge1xuICBlYWNoKGZ1bmN0aW9ucyhvYmopLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IFt0aGlzLl93cmFwcGVkXTtcbiAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBjaGFpblJlc3VsdCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTtcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIF87XG59XG4iLCAiaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcbmltcG9ydCBlYWNoIGZyb20gJy4vZWFjaC5qcyc7XG5pbXBvcnQgeyBBcnJheVByb3RvIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGNoYWluUmVzdWx0IGZyb20gJy4vX2NoYWluUmVzdWx0LmpzJztcblxuLy8gQWRkIGFsbCBtdXRhdG9yIGBBcnJheWAgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuZWFjaChbJ3BvcCcsICdwdXNoJywgJ3JldmVyc2UnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSB0aGlzLl93cmFwcGVkO1xuICAgIGlmIChvYmogIT0gbnVsbCkge1xuICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgICAgIGlmICgobmFtZSA9PT0gJ3NoaWZ0JyB8fCBuYW1lID09PSAnc3BsaWNlJykgJiYgb2JqLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBkZWxldGUgb2JqWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hhaW5SZXN1bHQodGhpcywgb2JqKTtcbiAgfTtcbn0pO1xuXG4vLyBBZGQgYWxsIGFjY2Vzc29yIGBBcnJheWAgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9iaiA9IHRoaXMuX3dyYXBwZWQ7XG4gICAgaWYgKG9iaiAhPSBudWxsKSBvYmogPSBtZXRob2QuYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBjaGFpblJlc3VsdCh0aGlzLCBvYmopO1xuICB9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IF87XG4iLCAiLy8gRGVmYXVsdCBFeHBvcnRcbi8vID09PT09PT09PT09PT09XG4vLyBJbiB0aGlzIG1vZHVsZSwgd2UgbWl4IG91ciBidW5kbGVkIGV4cG9ydHMgaW50byB0aGUgYF9gIG9iamVjdCBhbmQgZXhwb3J0XG4vLyB0aGUgcmVzdWx0LiBUaGlzIGlzIGFuYWxvZ291cyB0byBzZXR0aW5nIGBtb2R1bGUuZXhwb3J0cyA9IF9gIGluIENvbW1vbkpTLlxuLy8gSGVuY2UsIHRoaXMgbW9kdWxlIGlzIGFsc28gdGhlIGVudHJ5IHBvaW50IG9mIG91ciBVTUQgYnVuZGxlIGFuZCB0aGUgcGFja2FnZVxuLy8gZW50cnkgcG9pbnQgZm9yIENvbW1vbkpTIGFuZCBBTUQgdXNlcnMuIEluIG90aGVyIHdvcmRzLCB0aGlzIGlzICh0aGUgc291cmNlXG4vLyBvZikgdGhlIG1vZHVsZSB5b3UgYXJlIGludGVyZmFjaW5nIHdpdGggd2hlbiB5b3UgZG8gYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4vL1xuLy8gYGBganNcbi8vIC8vIENvbW1vbkpTXG4vLyB2YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbi8vXG4vLyAvLyBBTURcbi8vIGRlZmluZShbJ3VuZGVyc2NvcmUnXSwgZnVuY3Rpb24oXykgey4uLn0pO1xuLy9cbi8vIC8vIFVNRCBpbiB0aGUgYnJvd3NlclxuLy8gLy8gXyBpcyBhdmFpbGFibGUgYXMgYSBnbG9iYWwgdmFyaWFibGVcbi8vIGBgYFxuaW1wb3J0ICogYXMgYWxsRXhwb3J0cyBmcm9tICcuL2luZGV4LmpzJztcbmltcG9ydCB7IG1peGluIH0gZnJvbSAnLi9pbmRleC5qcyc7XG5cbi8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbnZhciBfID0gbWl4aW4oYWxsRXhwb3J0cyk7XG4vLyBMZWdhY3kgTm9kZS5qcyBBUEkuXG5fLl8gPSBfO1xuLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIEFQSS5cbmV4cG9ydCBkZWZhdWx0IF87XG4iLCAiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZywgTm90aWNlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgZGVidWcgZnJvbSBcImRlYnVnXCI7XG5jb25zdCBsb2dnZXIgPSBkZWJ1ZyhcInRleHRnZW5lcmF0b3I6U2V0UGF0aFwiKTtcbmV4cG9ydCBjbGFzcyBTZXRQYXRoIGV4dGVuZHMgTW9kYWwge1xuXHRyZXN1bHQ6IHN0cmluZztcblx0b25TdWJtaXQ6IChyZXN1bHQ6IHN0cmluZykgPT4gdm9pZDtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcmVzdWx0OiBzdHJpbmcsIG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQpIHtcblx0XHRzdXBlcihhcHApO1xuXHRcdHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuXHRcdHRoaXMub25TdWJtaXQgPSBvblN1Ym1pdDtcblx0fVxuXG5cdG9uT3BlbigpIHtcblx0XHRsb2dnZXIoXCJvbk9wZW5cIik7XG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cblx0XHRjb250ZW50RWwuY3JlYXRlRWwoXCJoMVwiLCB7IHRleHQ6IFwiTmV3IERvY3VtZW50IFBhdGhcIiB9KTtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGNvbnRlbnRFbC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgYXN5bmMgKGV2ZW50KSA9PiB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLm9uU3VibWl0KHRoaXMucmVzdWx0KTtcblx0XHRcdFx0XHRcdHRoaXMuY2xvc2UoKTtcblx0XHRcdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRcdFx0bmV3IE5vdGljZShcblx0XHRcdFx0XHRcdFx0XCJcdUQ4M0RcdUREMzRFcnJvcjogRmlsZSBhbHJlYWR5IGV4aXN0cy4gQ2hvb3NlIGFub3RoZXIgcGF0aC5cIlxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSwgMTAwKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRlbnRFbCkuc2V0TmFtZShcIlBhdGhcIikuYWRkVGV4dCgodGV4dCkgPT5cblx0XHRcdHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiUGF0aFwiKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5yZXN1bHQudG9TdHJpbmcoKSlcblx0XHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucmVzdWx0ID0gdmFsdWU7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5pbnB1dEVsLnNldEF0dHJpYnV0ZShcInNpemVcIiwgXCI1MFwiKVxuXHRcdCk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250ZW50RWwpLmFkZEJ1dHRvbigoYnRuKSA9PlxuXHRcdFx0YnRuXG5cdFx0XHRcdC5zZXRCdXR0b25UZXh0KFwiU3VibWl0XCIpXG5cdFx0XHRcdC5zZXRDdGEoKVxuXHRcdFx0XHQub25DbGljayhhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMub25TdWJtaXQodGhpcy5yZXN1bHQpO1xuXHRcdFx0XHRcdFx0dGhpcy5jbG9zZSgpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRuZXcgTm90aWNlKFxuXHRcdFx0XHRcdFx0XHRcIlx1RDgzRFx1REQzNEVycm9yOiBGaWxlIGFscmVhZHkgZXhpc3RzLiBDaG9vc2UgYW5vdGhlciBwYXRoLlwiXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnJvcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdCk7XG5cdH1cblxuXHRvbkNsb3NlKCkge1xuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQSxzQ0FBQUEsU0FBQTtBQUlBLFFBQUksSUFBSTtBQUNSLFFBQUks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QUFFLEdBQUcsV0FBVyxHQUFHLHVEQUFtQixVQUFVO0FBQzVELGNBQVUsT0FBTyxLQUFLLFVBQVUsVUFBVTtBQUMxQyxJQUFBQSxRQUFPLHdCQUF3QixFQUFFLFlBQVksVUFBVSxDQUFDO0FBQ3hELFdBQU87QUFBQSxFQUNSO0FBQ0Q7OztBQ2xFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBQUFFO0FBQUEsRUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUFBQztBQUFBLEVBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsa0JBQUFDO0FBQUEsRUFBQTtBQUFBO0FBQUE7QUFBQSxlQUFBQztBQUFBLEVBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFB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TUFBTTtBQUFBLE1BQzFCLE1BQU07QUFBQSxJQUNQLENBQUM7QUFFRCxRQUFJLHlCQUFRLFdBQVcsRUFDckIsUUFBUSxTQUFTLEVBQ2pCLFFBQVEseUJBQWtCLEVBQzFCO0FBQUEsTUFBUSxDQUFDLFNBQ1QsS0FDRSxlQUFlLDRCQUE0QixFQUMzQyxTQUFTLEtBQUssT0FBTyxTQUFTLE9BQU8sRUFDckMsU0FBUyxPQUFPLFVBQVU7QUFDMUIsYUFBSyxPQUFPLFNBQVMsVUFBVTtBQUMvQixjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDaEMsQ0FBQztBQUFBLElBQ0g7QUFDRCxRQUFJLHlCQUFRLFdBQVcsRUFDcEIsUUFBUSxPQUFPLEVBQ2YsWUFBWSxDQUFDLFdBQ2QsT0FDRSxVQUFVLGlCQUFnQixlQUFlLEVBQ3pDLFVBQVUsU0FBUyxPQUFPLEVBQzFCLFNBQVMsZUFBZSxFQUN4QixTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxTQUFTO0FBQzlCLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNoQyxDQUFDLENBQUM7QUFDTCxRQUFJLHlCQUFRLFdBQVcsRUFDckIsUUFBUSxpQkFBaUIsRUFDekIsUUFBUSxnREFBZ0QsRUFDeEQ7QUFBQSxNQUFVLENBQUMsUUFDWCxJQUNFLFNBQVMsS0FBSyxPQUFPLFNBQVMsS0FBSyxFQUNuQyxTQUFTLE9BQU8sVUFBVTtBQUMxQixhQUFLLE9BQU8sU0FBUyxRQUFRO0FBQzdCLGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNoQyxDQUFDO0FBQUEsSUFDSDtBQUFBLEVBQ0Y7QUFDRDsiLAogICJuYW1lcyI6IFsibW9kdWxlIiwgIm1vZHVsZSIsICJkZWJ1ZyIsICJzZWxmIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAic2FmZUF3YWl0IiwgImltcG9ydF9vYnNpZGlhbiIsICJkZWJ1ZyIsICJpbXBvcnRfZGVidWciLCAiaW1wb3J0X2RlYnVnIiwgImxvZ2dlciIsICJkZWJ1ZyIsICJmbGF0dGVuIiwgImhhcyIsICJpc0Zpbml0ZSIsICJpc05hTiIsICJyZXN0IiwgImlzRmluaXRlIiwgImlzTmFOIiwgImtleXMiLCAia2V5cyIsICJvYmplY3QiLCAia2V5cyIsICJrZXlzIiwgInZhbHVlcyIsICJwYWlycyIsICJyZXN1bHQiLCAia2V5cyIsICJyZXN1bHQiLCAicmVzdWx0IiwgInRvUGF0aCIsICJvYmplY3QiLCAidG9QYXRoIiwgImhhcyIsICJ0b1BhdGgiLCAidG9QYXRoIiwgIml0ZXJhdGVlIiwgIml0ZXJhdGVlIiwgIm1pbiIsICJtYXgiLCAibWFwIiwgIm1hdGNoZXIiLCAidGVtcGxhdGUiLCAidG9QYXRoIiwgInNlbGYiLCAicmVzdWx0IiwgImtleXMiLCAibWVtb2l6ZSIsICJyZXN1bHQiLCAicmVzdWx0IiwgInJlc3VsdCIsICJ0aW1lcyIsICJ0aW1lcyIsICJpdGVyYXRlZSIsICJzb3J0ZWRJbmRleCIsICJpc05hTiIsICJpdGVyYXRlZSIsICJpdGVyYXRlZSIsICJpdGVyYXRlZSIsICJpbml0aWFsIiwgInRvUGF0aCIsICJpdGVyYXRlZSIsICJyZXN1bHQiLCAiaXRlcmF0ZWUiLCAicmVzdWx0IiwgInNhbXBsZSIsICJsYXN0IiwgIml0ZXJhdGVlIiwgIml0ZXJhdGVlIiwgInJlc3VsdCIsICJyZXN1bHQiLCAicmVzdWx0IiwgInJlc3VsdCIsICJyZXN1bHQiLCAia2V5cyIsICJyZXN1bHQiLCAiaXRlcmF0ZWUiLCAia2V5cyIsICJpdGVyYXRlZSIsICJmbGF0dGVuIiwgInJlc3QiLCAiaXRlcmF0ZWUiLCAicmVzdWx0IiwgInJlc3VsdCIsICJyZXN1bHQiLCAidmFsdWVzIiwgInJlc3VsdCIsICJyYW5nZSIsICJyZXN1bHQiLCAiXyIsICJsb2dnZXIiLCAiZGVidWciLCAiY2h1bmsiLCAicmVzdWx0IiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfZGVidWciLCAibG9nZ2VyIiwgImRlYnVnIiwgInJlc3VsdCIsICJpbXBvcnRfZGVidWciLCAibG9nZ2VyIiwgImRlYnVnIiwgInNhZmVBd2FpdCJdCn0K
